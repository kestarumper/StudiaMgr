{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14","program":"/home/adrian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","bstr","/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"lazy_static\"","--cfg","feature=\"regex-automata\"","--cfg","feature=\"serde\"","--cfg","feature=\"serde1\"","--cfg","feature=\"serde1-nostd\"","--cfg","feature=\"std\"","--cfg","feature=\"unicode\"","-C","metadata=403ddcbdcee9a0ee","-C","extra-filename=-403ddcbdcee9a0ee","--out-dir","/home/adrian/magister/II/BigData/p20/target/rls/debug/deps","-L","dependency=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps","--extern","lazy_static=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/liblazy_static-72923b2d9aa06af7.rmeta","--extern","memchr=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libmemchr-222db4af82b1ddd2.rmeta","--extern","regex_automata=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libregex_automata-1e1f5c75e4f96668.rmeta","--extern","serde=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libserde-d9b7fd8803bade35.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/adrian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libbstr-403ddcbdcee9a0ee.rmeta"},"prelude":{"crate_id":{"name":"bstr","disambiguator":[4187105485472174186,10070461049503586321]},"crate_root":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src","external_crates":[{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":18,"id":{"name":"lazy_static","disambiguator":[14168987126381539521,8506224783846070473]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":19,"id":{"name":"memchr","disambiguator":[470664262734134257,2472908657699944231]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":20,"id":{"name":"regex_automata","disambiguator":[5775181059984253882,15424220468922697545]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":21,"id":{"name":"byteorder","disambiguator":[13914746223120247819,7461522404633341420]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","num":22,"id":{"name":"serde","disambiguator":[13241015039447953903,9903462571130677414]}}],"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":0,"byte_end":20276,"line_start":1,"line_end":456,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1057},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18560,"byte_end":18564,"line_start":389,"line_end":389,"column_start":15,"column_end":19},"alias_span":null,"name":"BStr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1062},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18607,"byte_end":18614,"line_start":391,"line_end":391,"column_start":18,"column_end":25},"alias_span":null,"name":"BString","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":186},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18641,"byte_end":18650,"line_start":393,"line_end":393,"column_start":5,"column_end":14},"alias_span":null,"name":"ByteSlice","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1125},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18652,"byte_end":18657,"line_start":393,"line_end":393,"column_start":16,"column_end":21},"alias_span":null,"name":"Bytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1134},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18659,"byte_end":18665,"line_start":393,"line_end":393,"column_start":23,"column_end":29},"alias_span":null,"name":"Fields","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1140},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18667,"byte_end":18677,"line_start":393,"line_end":393,"column_start":31,"column_end":41},"alias_span":null,"name":"FieldsWith","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1107},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18679,"byte_end":18683,"line_start":393,"line_end":393,"column_start":43,"column_end":47},"alias_span":null,"name":"Find","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1116},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18685,"byte_end":18696,"line_start":393,"line_end":393,"column_start":49,"column_end":60},"alias_span":null,"name":"FindReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1089},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18698,"byte_end":18704,"line_start":393,"line_end":393,"column_start":62,"column_end":68},"alias_span":null,"name":"Finder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1098},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18710,"byte_end":18723,"line_start":394,"line_end":394,"column_start":5,"column_end":18},"alias_span":null,"name":"FinderReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":404},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18725,"byte_end":18730,"line_start":394,"line_end":394,"column_start":20,"column_end":25},"alias_span":null,"name":"Lines","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18732,"byte_end":18751,"line_start":394,"line_end":394,"column_start":27,"column_end":46},"alias_span":null,"name":"LinesWithTerminator","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1150},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18753,"byte_end":18758,"line_start":394,"line_end":394,"column_start":48,"column_end":53},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1166},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18760,"byte_end":18766,"line_start":394,"line_end":394,"column_start":55,"column_end":61},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1174},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18768,"byte_end":18781,"line_start":394,"line_end":394,"column_start":63,"column_end":76},"alias_span":null,"name":"SplitNReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18787,"byte_end":18799,"line_start":395,"line_end":395,"column_start":5,"column_end":17},"alias_span":null,"name":"SplitReverse","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":178},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18801,"byte_end":18802,"line_start":395,"line_end":395,"column_start":19,"column_end":20},"alias_span":null,"name":"B","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":443},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18849,"byte_end":18855,"line_start":398,"line_end":398,"column_start":19,"column_end":25},"alias_span":null,"name":"concat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":446},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18857,"byte_end":18861,"line_start":398,"line_end":398,"column_start":27,"column_end":31},"alias_span":null,"name":"join","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":456},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18863,"byte_end":18870,"line_start":398,"line_end":398,"column_start":33,"column_end":40},"alias_span":null,"name":"ByteVec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1182},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18872,"byte_end":18882,"line_start":398,"line_end":398,"column_start":42,"column_end":52},"alias_span":null,"name":"DrainBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1188},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18884,"byte_end":18897,"line_start":398,"line_end":398,"column_start":54,"column_end":67},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1706},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18951,"byte_end":18966,"line_start":401,"line_end":401,"column_start":5,"column_end":20},"alias_span":null,"name":"GraphemeIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1697},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18968,"byte_end":18977,"line_start":401,"line_end":401,"column_start":22,"column_end":31},"alias_span":null,"name":"Graphemes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1726},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18979,"byte_end":18994,"line_start":401,"line_end":401,"column_start":33,"column_end":48},"alias_span":null,"name":"SentenceIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1717},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18996,"byte_end":19005,"line_start":401,"line_end":401,"column_start":50,"column_end":59},"alias_span":null,"name":"Sentences","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1746},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19007,"byte_end":19018,"line_start":401,"line_end":401,"column_start":61,"column_end":72},"alias_span":null,"name":"WordIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1736},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19024,"byte_end":19029,"line_start":402,"line_end":402,"column_start":5,"column_end":10},"alias_span":null,"name":"Words","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1765},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19031,"byte_end":19052,"line_start":402,"line_end":402,"column_start":12,"column_end":33},"alias_span":null,"name":"WordsWithBreakIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1756},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19054,"byte_end":19069,"line_start":402,"line_end":402,"column_start":35,"column_end":50},"alias_span":null,"name":"WordsWithBreaks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1047},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19094,"byte_end":19100,"line_start":405,"line_end":405,"column_start":5,"column_end":11},"alias_span":null,"name":"decode_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1051},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19117,"byte_end":19128,"line_start":405,"line_end":405,"column_start":28,"column_end":39},"alias_span":null,"name":"decode_last_utf8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1784},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19150,"byte_end":19161,"line_start":405,"line_end":405,"column_start":61,"column_end":72},"alias_span":null,"name":"CharIndices","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1775},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19167,"byte_end":19172,"line_start":406,"line_end":406,"column_start":5,"column_end":10},"alias_span":null,"name":"Chars","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1017},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19174,"byte_end":19183,"line_start":406,"line_end":406,"column_start":12,"column_end":21},"alias_span":null,"name":"Utf8Chunk","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1795},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19185,"byte_end":19195,"line_start":406,"line_end":406,"column_start":23,"column_end":33},"alias_span":null,"name":"Utf8Chunks","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1804},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19197,"byte_end":19206,"line_start":406,"line_end":406,"column_start":35,"column_end":44},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":0,"byte_end":20276,"line_start":1,"line_end":456,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":61},{"krate":0,"index":73},{"krate":0,"index":79},{"krate":0,"index":122},{"krate":0,"index":140},{"krate":0,"index":424},{"krate":0,"index":521},{"krate":0,"index":759},{"krate":0,"index":790},{"krate":0,"index":851},{"krate":0,"index":979}],"decl_id":null,"docs":"An experimental byte string library.","sig":null,"attributes":[{"value":"*\nAn experimental byte string library.\n\nByte strings are just like standard Unicode strings with one very important\ndifference: byte strings are only *conventionally* UTF-8 while Rust's standard\nUnicode strings are *guaranteed* to be valid UTF-8. The primary motivation for\nbyte strings is for handling arbitrary bytes that are mostly UTF-8.\n\n# Overview\n\nThis crate provides two important traits that provide string oriented methods\non `&[u8]` and `Vec<u8>` types:\n\n* [`ByteSlice`](trait.ByteSlice.html) extends the `[u8]` type with additional\n  string oriented methods.\n* [`ByteVec`](trait.ByteVec.html) extends the `Vec<u8>` type with additional\n  string oriented methods.\n\nAdditionally, this crate provides two concrete byte string types that deref to\n`[u8]` and `Vec<u8>`. These are useful for storing byte string types, and come\nwith convenient `std::fmt::Debug` implementations:\n\n* [`BStr`](struct.BStr.html) is a byte string slice, analogous to `str`.\n* [`BString`](struct.BString.html) is an owned growable byte string buffer,\n  analogous to `String`.\n\nAdditionally, the free function [`B`](fn.B.html) serves as a convenient short\nhand for writing byte string literals.\n\n# Quick examples\n\nByte strings build on the existing APIs for `Vec<u8>` and `&[u8]`, with\nadditional string oriented methods. Operations such as iterating over\ngraphemes, searching for substrings, replacing substrings, trimming and case\nconversion are examples of things not provided on the standard library `&[u8]`\nAPIs but are provided by this crate. For example, this code iterates over all\nof occurrences of a subtring:\n\n```\nuse bstr::ByteSlice;\n\nlet s = b\"foo bar foo foo quux foo\";\n\nlet mut matches = vec![];\nfor start in s.find_iter(\"foo\") {\n    matches.push(start);\n}\nassert_eq!(matches, [0, 8, 12, 21]);\n```\n\nHere's another example showing how to do a search and replace (and also showing\nuse of the `B` function):\n\n```\nuse bstr::{B, ByteSlice};\n\nlet old = B(\"foo ☃☃☃ foo foo quux foo\");\nlet new = old.replace(\"foo\", \"hello\");\nassert_eq!(new, B(\"hello ☃☃☃ hello hello quux hello\"));\n```\n\nAnd here's an example that shows case conversion, even in the presence of\ninvalid UTF-8:\n\n```\nuse bstr::{ByteSlice, ByteVec};\n\nlet mut lower = Vec::from(\"hello β\");\nlower[0] = b'\\xFF';\n// lowercase β is uppercased to Β\nassert_eq!(lower.to_uppercase(), b\"\\xFFELLO \\xCE\\x92\");\n```\n\n# Convenient debug representation\n\nWhen working with byte strings, it is often useful to be able to print them\nas if they were byte strings and not sequences of integers. While this crate\ncannot affect the `std::fmt::Debug` implementations for `[u8]` and `Vec<u8>`,\nthis crate does provide the `BStr` and `BString` types which have convenient\n`std::fmt::Debug` implementations.\n\nFor example, this\n\n```\nuse bstr::ByteSlice;\n\nlet mut bytes = Vec::from(\"hello β\");\nbytes[0] = b'\\xFF';\n\nprintln!(\"{:?}\", bytes.as_bstr());\n```\n\nwill output `\"\\xFFello β\"`.\n\nThis example works because the\n[`ByteSlice::as_bstr`](trait.ByteSlice.html#method.as_bstr)\nmethod converts any `&[u8]` to a `&BStr`.\n\n# When should I use byte strings?\n\nThis library is somewhat of an experiment that reflects my hypothesis that\nUTF-8 by convention is a better trade off in some circumstances than guaranteed\nUTF-8. It's possible, perhaps even likely, that this is a niche concern for\nfolks working closely with core text primitives.\n\nThe first time this idea hit me was in the implementation of Rust's regex\nengine. In particular, very little of the internal implementation cares at all\nabout searching valid UTF-8 encoded strings. Indeed, internally, the\nimplementation converts `&str` from the API to `&[u8]` fairly quickly and\njust deals with raw bytes. UTF-8 match boundaries are then guaranteed by the\nfinite state machine itself rather than any specific string type. This makes it\npossible to not only run regexes on `&str` values, but also on `&[u8]` values.\n\nWhy would you ever want to run a regex on a `&[u8]` though? Well, `&[u8]` is\nthe fundamental way at which one reads data from all sorts of streams, via the\nstandard library's [`Read`](https://doc.rust-lang.org/std/io/trait.Read.html)\ntrait. In particular, there is no platform independent way to determine whether\nwhat you're reading from is some binary file or a human readable text file.\nTherefore, if you're writing a program to search files, you probably need to\ndeal with `&[u8]` directly unless you're okay with first converting it to a\n`&str` and dropping any bytes that aren't valid UTF-8. (Or otherwise determine\nthe encoding---which is often impractical---and perform a transcoding step.)\nOften, the simplest and most robust way to approach this is to simply treat the\ncontents of a file as if it were mostly valid UTF-8 and pass through invalid\nUTF-8 untouched. This may not be the most correct approach though!\n\nOne case in particular exacerbates these issues, and that's memory mapping\na file. When you memory map a file, that file may be gigabytes big, but all\nyou get is a `&[u8]`. Converting that to a `&str` all in one go is generally\nnot a good idea because of the costs associated with doing so, and also\nbecause it generally causes one to do two passes over the data instead of\none, which is quite undesirable. It is of course usually possible to do it an\nincremental way by only parsing chunks at a time, but this is often complex to\ndo or impractical. For example, many regex engines only accept one contiguous\nsequence of bytes at a time with no way to perform incremental matching.\n\nIn summary, the conventional UTF-8 byte strings provided by this library is an\nexperiment. They are definitely useful in some limited circumstances, but how\nuseful they are more broadly isn't clear yet.\n\n# `bstr` in public APIs\n\nSince this library is still experimental, you should not use it in the public\nAPI of your crates until it hits `1.0` (unless you're OK with with tracking\nbreaking releases of `bstr`).\n\nIn general, it should be possible to avoid putting anything in this crate into\nyour public APIs. Namely, you should never need to use the `ByteSlice` or\n`ByteVec` traits as bounds on public APIs, since their only purpose is to\nextend the methods on the concrete types `[u8]` and `Vec<u8>`, respectively.\nSimilarly, it should not be necessary to put either the `BStr` or `BString`\ntypes into public APIs. If you want to use them internally, then they can\nbe converted to/from `[u8]`/`Vec<u8>` as needed.\n\n# Differences with standard strings\n\nThe primary difference between `[u8]` and `str` is that the former is\nconventionally UTF-8 while the latter is guaranteed to be UTF-8. The phrase\n\"conventionally UTF-8\" means that a `[u8]` may contain bytes that do not form\na valid UTF-8 sequence, but operations defined on the type in this crate are\ngenerally most useful on valid UTF-8 sequences. For example, iterating over\nUnicode codepoints or grapheme clusters is an operation that is only defined\non valid UTF-8. Therefore, when invalid UTF-8 is encountered, the Unicode\nreplacement codepoint is substituted. Thus, a byte string that is not UTF-8 at\nall is of limited utility when using these crate.\n\nHowever, not all operations on byte strings are specifically Unicode aware. For\nexample, substring search has no specific Unicode semantics ascribed to it. It\nworks just as well for byte strings that are completely valid UTF-8 as for byte\nstrings that contain no valid UTF-8 at all. Similarly for replacements and\nvarious other operations that do not need any Unicode specific tailoring.\n\nAside from the difference in how UTF-8 is handled, the APIs between `[u8]` and\n`str` (and `Vec<u8>` and `String`) are intentionally very similar, including\nmaintaining the same behavior for corner cases in things like substring\nsplitting. There are, however, some differences:\n\n* Substring search is not done with `matches`, but instead, `find_iter`.\n  In general, this crate does not define any generic\n  [`Pattern`](https://doc.rust-lang.org/std/str/pattern/trait.Pattern.html)\n  infrastructure, and instead prefers adding new methods for different\n  argument types. For example, `matches` can search by a `char` or a `&str`,\n  where as `find_iter` can only search by a byte string. `find_char` can be\n  used for searching by a `char`.\n* Since `SliceConcatExt` in the standard library is unstable, it is not\n  possible to reuse that to implement `join` and `concat` methods. Instead,\n  [`join`](fn.join.html) and [`concat`](fn.concat.html) are provided as free\n  functions that perform a similar task.\n* This library bundles in a few more Unicode operations, such as grapheme,\n  word and sentence iterators. More operations, such as normalization and\n  case folding, may be provided in the future.\n* Some `String`/`str` APIs will panic if a particular index was not on a valid\n  UTF-8 code unit sequence boundary. Conversely, no such checking is performed\n  in this crate, as is consistent with treating byte strings as a sequence of\n  bytes. This means callers are responsible for maintaining a UTF-8 invariant\n  if that's important.\n* Some routines provided by this crate, such as `starts_with_str`, have a\n  `_str` suffix to differentiate them from similar routines already defined\n  on the `[u8]` type. The difference is that `starts_with` requires its\n  parameter to be a `&[u8]`, where as `starts_with_str` permits its parameter\n  to by anything that implements `AsRef<[u8]>`, which is more flexible. This\n  means you can write `bytes.starts_with_str(\"☃\")` instead of\n  `bytes.starts_with(\"☃\".as_bytes())`.\n\nOtherwise, you should find most of the APIs between this crate and the standard\nlibrary string APIs to be very similar, if not identical.\n\n# Handling of invalid UTF-8\n\nSince byte strings are only *conventionally* UTF-8, there is no guarantee\nthat byte strings contain valid UTF-8. Indeed, it is perfectly legal for a\nbyte string to contain arbitrary bytes. However, since this library defines\na *string* type, it provides many operations specified by Unicode. These\noperations are typically only defined over codepoints, and thus have no real\nmeaning on bytes that are invalid UTF-8 because they do not map to a particular\ncodepoint.\n\nFor this reason, whenever operations defined only on codepoints are used, this\nlibrary will automatically convert invalid UTF-8 to the Unicode replacement\ncodepoint, `U+FFFD`, which looks like this: `�`. For example, an\n[iterator over codepoints](struct.Chars.html) will yield a Unicode\nreplacement codepoint whenever it comes across bytes that are not valid UTF-8:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xFF\\xFFz\";\nlet chars: Vec<char> = bs.chars().collect();\nassert_eq!(vec!['a', '\\u{FFFD}', '\\u{FFFD}', 'z'], chars);\n```\n\nThere are a few ways in which invalid bytes can be substituted with a Unicode\nreplacement codepoint. One way, not used by this crate, is to replace every\nindividual invalid byte with a single replacement codepoint. In contrast, the\napproach this crate uses is called the \"substitution of maximal subparts,\" as\nspecified by the Unicode Standard (Chapter 3, Section 9). (This approach is\nalso used by [W3C's Encoding Standard](https://www.w3.org/TR/encoding/).) In\nthis strategy, a replacement codepoint is inserted whenever a byte is found\nthat cannot possibly lead to a valid UTF-8 code unit sequence. If there were\nprevious bytes that represented a *prefix* of a well-formed UTF-8 code unit\nsequence, then all of those bytes (up to 3) are substituted with a single\nreplacement codepoint. For example:\n\n```\nuse bstr::ByteSlice;\n\nlet bs = b\"a\\xF0\\x9F\\x87z\";\nlet chars: Vec<char> = bs.chars().collect();\n// The bytes \\xF0\\x9F\\x87 could lead to a valid UTF-8 sequence, but 3 of them\n// on their own are invalid. Only one replacement codepoint is substituted,\n// which demonstrates the \"substitution of maximal subparts\" strategy.\nassert_eq!(vec!['a', '\\u{FFFD}', 'z'], chars);\n```\n\nIf you do need to access the raw bytes for some reason in an iterator like\n`Chars`, then you should use the iterator's \"indices\" variant, which gives\nthe byte offsets containing the invalid UTF-8 bytes that were substituted with\nthe replacement codepoint. For example:\n\n```\nuse bstr::{B, ByteSlice};\n\nlet bs = b\"a\\xE2\\x98z\";\nlet chars: Vec<(usize, usize, char)> = bs.char_indices().collect();\n// Even though the replacement codepoint is encoded as 3 bytes itself, the\n// byte range given here is only two bytes, corresponding to the original\n// raw bytes.\nassert_eq!(vec![(0, 1, 'a'), (1, 3, '\\u{FFFD}'), (3, 4, 'z')], chars);\n\n// Thus, getting the original raw bytes is as simple as slicing the original\n// byte string:\nlet chars: Vec<&[u8]> = bs.char_indices().map(|(s, e, _)| &bs[s..e]).collect();\nassert_eq!(vec![B(\"a\"), B(b\"\\xE2\\x98\"), B(\"z\")], chars);\n```\n\n# File paths and OS strings\n\nOne of the premiere features of Rust's standard library is how it handles file\npaths. In particular, it makes it very hard to write incorrect code while\nsimultaneously providing a correct cross platform abstraction for manipulating\nfile paths. The key challenge that one faces with file paths across platforms\nis derived from the following observations:\n\n* On most Unix-like systems, file paths are an arbitrary sequence of bytes.\n* On Windows, file paths are an arbitrary sequence of 16-bit integers.\n\n(In both cases, certain sequences aren't allowed. For example a `NUL` byte is\nnot allowed in either case. But we can ignore this for the purposes of this\nsection.)\n\nByte strings, like the ones provided in this crate, line up really well with\nfile paths on Unix like systems, which are themselves just arbitrary sequences\nof bytes. It turns out that if you treat them as \"mostly UTF-8,\" then things\nwork out pretty well. On the contrary, byte strings _don't_ really work\nthat well on Windows because it's not possible to correctly roundtrip file\npaths between 16-bit integers and something that looks like UTF-8 _without_\nexplicitly defining an encoding to do this for you, which is anathema to byte\nstrings, which are just bytes.\n\nRust's standard library elegantly solves this problem by specifying an\ninternal encoding for file paths that's only used on Windows called\n[WTF-8](https://simonsapin.github.io/wtf-8/). Its key properties are that they\npermit losslessly roundtripping file paths on Windows by extending UTF-8 to\nsupport an encoding of surrogate codepoints, while simultaneously supporting\nzero-cost conversion from Rust's Unicode strings to file paths. (Since UTF-8 is\na proper subset of WTF-8.)\n\nThe fundamental point at which the above strategy fails is when you want to\ntreat file paths as things that look like strings in a zero cost way. In most\ncases, this is actually the wrong thing to do, but some cases call for it,\nfor example, glob or regex matching on file paths. This is because WTF-8 is\ntreated as an internal implementation detail, and there is no way to access\nthose bytes via a public API. Therefore, such consumers are limited in what\nthey can do:\n\n1. One could re-implement WTF-8 and re-encode file paths on Windows to WTF-8\n   by accessing their underlying 16-bit integer representation. Unfortunately,\n   this isn't zero cost (it introduces a second WTF-8 decoding step) and it's\n   not clear this is a good thing to do, since WTF-8 should ideally remain an\n   internal implementation detail.\n2. One could instead declare that they will not handle paths on Windows that\n   are not valid UTF-16, and return an error when one is encountered.\n3. Like (2), but instead of returning an error, lossily decode the file path\n   on Windows that isn't valid UTF-16 into UTF-16 by replacing invalid bytes\n   with the Unicode replacement codepoint.\n\nWhile this library may provide facilities for (1) in the future, currently,\nthis library only provides facilities for (2) and (3). In particular, a suite\nof conversion functions are provided that permit converting between byte\nstrings, OS strings and file paths. For owned byte strings, they are:\n\n* [`ByteVec::from_os_string`](trait.ByteVec.html#method.from_os_string)\n* [`ByteVec::from_os_str_lossy`](trait.ByteVec.html#method.from_os_str_lossy)\n* [`ByteVec::from_path_buf`](trait.ByteVec.html#method.from_path_buf)\n* [`ByteVec::from_path_lossy`](trait.ByteVec.html#method.from_path_lossy)\n* [`ByteVec::into_os_string`](trait.ByteVec.html#method.into_os_string)\n* [`ByteVec::into_os_string_lossy`](trait.ByteVec.html#method.into_os_string_lossy)\n* [`ByteVec::into_path_buf`](trait.ByteVec.html#method.into_path_buf)\n* [`ByteVec::into_path_buf_lossy`](trait.ByteVec.html#method.into_path_buf_lossy)\n\nFor byte string slices, they are:\n\n* [`ByteSlice::from_os_str`](trait.ByteSlice.html#method.from_os_str)\n* [`ByteSlice::from_path`](trait.ByteSlice.html#method.from_path)\n* [`ByteSlice::to_os_str`](trait.ByteSlice.html#method.to_os_str)\n* [`ByteSlice::to_os_str_lossy`](trait.ByteSlice.html#method.to_os_str_lossy)\n* [`ByteSlice::to_path`](trait.ByteSlice.html#method.to_path)\n* [`ByteSlice::to_path_lossy`](trait.ByteSlice.html#method.to_path_lossy)\n\nOn Unix, all of these conversions are rigorously zero cost, which gives one\na way to ergonomically deal with raw file paths exactly as they are using\nnormal string-related functions. On Windows, these conversion routines perform\na UTF-8 check and either return an error or lossily decode the file path\ninto valid UTF-8, depending on which function you use. This means that you\ncannot roundtrip all file paths on Windows correctly using these conversion\nroutines. However, this may be an acceptable downside since such file paths\nare exceptionally rare. Moreover, roundtripping isn't always necessary, for\nexample, if all you're doing is filtering based on file paths.\n\nThe reason why using byte strings for this is potentially superior than the\nstandard library's approach is that a lot of Rust code is already lossily\nconverting file paths to Rust's Unicode strings, which are required to be valid\nUTF-8, and thus contain latent bugs on Unix where paths with invalid UTF-8 are\nnot terribly uncommon. If you instead use byte strings, then you're guaranteed\nto write correct code for Unix, at the cost of getting a corner case wrong on\nWindows.\n*/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":0,"byte_end":18148,"line_start":1,"line_end":367,"column_start":1,"column_end":3}},{"value":"allow(dead_code)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":18193,"byte_end":18213,"line_start":370,"line_end":370,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1057},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33513,"byte_end":33517,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"BStr","qualname":"::bstr::BStr","value":"BStr {  }","parent":null,"children":[{"krate":0,"index":1058}],"decl_id":null,"docs":" A wrapper for `&[u8]` that provides convenient string oriented trait impls.","sig":null,"attributes":[{"value":"/ A wrapper for `&[u8]` that provides convenient string oriented trait impls.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32361,"byte_end":32440,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32441,"byte_end":32444,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ If you need ownership or a growable byte string buffer, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32445,"byte_end":32513,"line_start":5,"line_end":5,"column_start":1,"column_end":69}},{"value":"/ [`BString`](struct.BString.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32514,"byte_end":32551,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32552,"byte_end":32555,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ Using a `&BStr` is just like using a `&[u8]`, since `BStr`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32556,"byte_end":32618,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/ implements `Deref` to `[u8]`. So all methods available on `[u8]`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32619,"byte_end":32687,"line_start":9,"line_end":9,"column_start":1,"column_end":69}},{"value":"/ are also available on `BStr`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32688,"byte_end":32721,"line_start":10,"line_end":10,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32722,"byte_end":32725,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32726,"byte_end":32746,"line_start":12,"line_end":12,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32747,"byte_end":32750,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ A `&BStr` has the same representation as a `&str`. That is, a `&BStr` is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32751,"byte_end":32827,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ a fat pointer which consists of a pointer to some bytes and a length.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32828,"byte_end":32901,"line_start":15,"line_end":15,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32902,"byte_end":32905,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Trait implementations","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32906,"byte_end":32933,"line_start":17,"line_end":17,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32934,"byte_end":32937,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ The `BStr` type has a number of trait implementations, and in particular,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":32938,"byte_end":33015,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ defines equality and ordinal comparisons between `&BStr`, `&str` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33016,"byte_end":33088,"line_start":20,"line_end":20,"column_start":1,"column_end":73}},{"value":"/ `&[u8]` for convenience.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33089,"byte_end":33117,"line_start":21,"line_end":21,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33118,"byte_end":33121,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ The `Debug` implementation for `BStr` shows its bytes as a normal string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33122,"byte_end":33199,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ For invalid UTF-8, hex escape sequences are used.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33200,"byte_end":33253,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33254,"byte_end":33257,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `Display` implementation behaves as if `BStr` were first lossily","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33258,"byte_end":33330,"line_start":26,"line_end":26,"column_start":1,"column_end":73}},{"value":"/ converted to a `str`. Invalid UTF-8 bytes are substituted with the Unicode","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33331,"byte_end":33409,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ replacement codepoint, which looks like this: �.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33410,"byte_end":33464,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"repr(transparent)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33481,"byte_end":33501,"line_start":30,"line_end":30,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1062},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35921,"byte_end":35928,"line_start":40,"line_end":40,"column_start":12,"column_end":19},"name":"BString","qualname":"::bstring::BString","value":"BString {  }","parent":null,"children":[{"krate":0,"index":1063}],"decl_id":null,"docs":" A wrapper for `Vec<u8>` that provides convenient string oriented trait\n impls.","sig":null,"attributes":[{"value":"/ A wrapper for `Vec<u8>` that provides convenient string oriented trait","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34559,"byte_end":34633,"line_start":3,"line_end":3,"column_start":1,"column_end":75}},{"value":"/ impls.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34634,"byte_end":34644,"line_start":4,"line_end":4,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34645,"byte_end":34648,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ A `BString` has ownership over its contents and corresponds to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34649,"byte_end":34715,"line_start":6,"line_end":6,"column_start":1,"column_end":67}},{"value":"/ a growable or shrinkable buffer. Its borrowed counterpart is a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34716,"byte_end":34782,"line_start":7,"line_end":7,"column_start":1,"column_end":67}},{"value":"/ [`BStr`](struct.BStr.html), called a byte string slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34783,"byte_end":34842,"line_start":8,"line_end":8,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34843,"byte_end":34846,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Using a `BString` is just like using a `Vec<u8>`, since `BString`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34847,"byte_end":34916,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/ implements `Deref` to `Vec<u8>`. So all methods available on `Vec<u8>`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34917,"byte_end":34991,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/ are also available on `BString`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":34992,"byte_end":35028,"line_start":12,"line_end":12,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35029,"byte_end":35032,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35033,"byte_end":35047,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35048,"byte_end":35051,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ You can create a new `BString` from a `Vec<u8>` via a `From` impl:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35052,"byte_end":35122,"line_start":16,"line_end":16,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35123,"byte_end":35126,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35127,"byte_end":35134,"line_start":18,"line_end":18,"column_start":1,"column_end":8}},{"value":"/ use bstr::BString;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35135,"byte_end":35157,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35158,"byte_end":35161,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ let s = BString::from(\"Hello, world!\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35162,"byte_end":35205,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35206,"byte_end":35213,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35214,"byte_end":35217,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Deref","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35218,"byte_end":35229,"line_start":24,"line_end":24,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35230,"byte_end":35233,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ The `BString` type implements `Deref` and `DerefMut`, where the target","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35234,"byte_end":35308,"line_start":26,"line_end":26,"column_start":1,"column_end":75}},{"value":"/ types are `&Vec<u8>` and `&mut Vec<u8>`, respectively. `Deref` permits all of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35309,"byte_end":35394,"line_start":27,"line_end":27,"column_start":1,"column_end":86}},{"value":"/ methods defined on `Vec<u8>` to be implicitly callable on any `BString`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35395,"byte_end":35471,"line_start":28,"line_end":28,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35472,"byte_end":35475,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ For more information about how deref works, see the documentation for the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35476,"byte_end":35553,"line_start":30,"line_end":30,"column_start":1,"column_end":78}},{"value":"/ [`std::ops::Deref`](https://doc.rust-lang.org/std/ops/trait.Deref.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35554,"byte_end":35629,"line_start":31,"line_end":31,"column_start":1,"column_end":76}},{"value":"/ trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35630,"byte_end":35640,"line_start":32,"line_end":32,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35641,"byte_end":35644,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Representation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35645,"byte_end":35665,"line_start":34,"line_end":34,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35666,"byte_end":35669,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ A `BString` has the same representation as a `Vec<u8>` and a `String`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35670,"byte_end":35744,"line_start":36,"line_end":36,"column_start":1,"column_end":75}},{"value":"/ That is, it is made up of three word sized components: a pointer to a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35745,"byte_end":35818,"line_start":37,"line_end":37,"column_start":1,"column_end":74}},{"value":"/ region of memory containing the bytes, a length and a capacity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35819,"byte_end":35886,"line_start":38,"line_end":38,"column_start":1,"column_end":68}}]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53787,"byte_end":53788,"line_start":71,"line_end":71,"column_start":8,"column_end":9},"name":"B","qualname":"::ext_slice::B","value":"pub fn B<'a, B: ?Sized + AsRef<[u8]>>(&'a B) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" A short-hand constructor for building a `&[u8]`.","sig":null,"attributes":[{"value":"/ A short-hand constructor for building a `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52159,"byte_end":52211,"line_start":25,"line_end":25,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52212,"byte_end":52215,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This idiosyncratic constructor is useful for concisely building byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52216,"byte_end":52295,"line_start":27,"line_end":27,"column_start":1,"column_end":80}},{"value":"/ slices. Its primary utility is in conveniently writing byte string literals","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52296,"byte_end":52375,"line_start":28,"line_end":28,"column_start":1,"column_end":80}},{"value":"/ in a uniform way. For example, consider this code that does not compile:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52376,"byte_end":52452,"line_start":29,"line_end":29,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52453,"byte_end":52456,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52457,"byte_end":52470,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![b\"a\", b\"xy\"];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52471,"byte_end":52504,"line_start":32,"line_end":32,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52505,"byte_end":52512,"line_start":33,"line_end":33,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52513,"byte_end":52516,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ The above code doesn't compile because the type of the byte string literal","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52517,"byte_end":52595,"line_start":35,"line_end":35,"column_start":1,"column_end":79}},{"value":"/ `b\"a\"` is `&'static [u8; 1]`, and the type of `b\"xy\"` is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52596,"byte_end":52656,"line_start":36,"line_end":36,"column_start":1,"column_end":61}},{"value":"/ `&'static [u8; 2]`. Since their types aren't the same, they can't be stored","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52657,"byte_end":52736,"line_start":37,"line_end":37,"column_start":1,"column_end":80}},{"value":"/ in the same `Vec`. (This is dissimilar from normal Unicode string slices,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52737,"byte_end":52814,"line_start":38,"line_end":38,"column_start":1,"column_end":78}},{"value":"/ where both `\"a\"` and `\"xy\"` have the same type of `&'static str`.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52815,"byte_end":52885,"line_start":39,"line_end":39,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52886,"byte_end":52889,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ One way of getting the above code to compile is to convert byte strings to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52890,"byte_end":52968,"line_start":41,"line_end":41,"column_start":1,"column_end":79}},{"value":"/ slices. You might try this:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":52969,"byte_end":53000,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53001,"byte_end":53004,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53005,"byte_end":53018,"line_start":44,"line_end":44,"column_start":1,"column_end":14}},{"value":"/ let strs = vec![&b\"a\", &b\"xy\"];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53019,"byte_end":53054,"line_start":45,"line_end":45,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53055,"byte_end":53062,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53063,"byte_end":53066,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ But this just creates values with type `& &'static [u8; 1]` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53067,"byte_end":53134,"line_start":48,"line_end":48,"column_start":1,"column_end":68}},{"value":"/ `& &'static [u8; 2]`. Instead, you need to force the issue like so:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53135,"byte_end":53206,"line_start":49,"line_end":49,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53207,"byte_end":53210,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53211,"byte_end":53218,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ let strs = vec![&b\"a\"[..], &b\"xy\"[..]];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53219,"byte_end":53262,"line_start":52,"line_end":52,"column_start":1,"column_end":44}},{"value":"/ // or","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53263,"byte_end":53272,"line_start":53,"line_end":53,"column_start":1,"column_end":10}},{"value":"/ let strs = vec![b\"a\".as_ref(), b\"xy\".as_ref()];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53273,"byte_end":53324,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53325,"byte_end":53332,"line_start":55,"line_end":55,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53333,"byte_end":53336,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ But neither of these are particularly convenient to type, especially when","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53337,"byte_end":53414,"line_start":57,"line_end":57,"column_start":1,"column_end":78}},{"value":"/ it's something as common as a string literal. Thus, this constructor","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53415,"byte_end":53487,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/ permits writing the following instead:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53488,"byte_end":53530,"line_start":59,"line_end":59,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53531,"byte_end":53534,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53535,"byte_end":53542,"line_start":61,"line_end":61,"column_start":1,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53543,"byte_end":53559,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53560,"byte_end":53563,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ let strs = vec![B(\"a\"), B(b\"xy\")];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53564,"byte_end":53602,"line_start":64,"line_end":64,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53603,"byte_end":53610,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53611,"byte_end":53614,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ Notice that this also lets you mix and match both string literals and byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53615,"byte_end":53693,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/ string literals. This can be quite convenient!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53694,"byte_end":53744,"line_start":68,"line_end":68,"column_start":1,"column_end":51}},{"value":"allow(non_snake_case)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53745,"byte_end":53769,"line_start":69,"line_end":69,"column_start":1,"column_end":25}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":53770,"byte_end":53779,"line_start":70,"line_end":70,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":184},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54161,"byte_end":54167,"line_start":89,"line_end":89,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_slice::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54044,"byte_end":54109,"line_start":87,"line_end":87,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54110,"byte_end":54150,"line_start":88,"line_end":88,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":186},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54269,"byte_end":54278,"line_start":93,"line_end":93,"column_start":11,"column_end":20},"name":"ByteSlice","qualname":"::ext_slice::ByteSlice","value":"ByteSlice: Sealed","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":227},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":246},{"krate":0,"index":249},{"krate":0,"index":252},{"krate":0,"index":255},{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":264},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":307}],"decl_id":null,"docs":" A trait that extends `&[u8]` with string oriented methods.\n","sig":null,"attributes":[{"value":"/ A trait that extends `&[u8]` with string oriented methods.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54196,"byte_end":54258,"line_start":92,"line_end":92,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":187},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54504,"byte_end":54512,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::ext_slice::ByteSlice::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type. This is always a\n no-op and callers shouldn't care about it. This only exists for making\n the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type. This is always a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54293,"byte_end":54364,"line_start":94,"line_end":94,"column_start":5,"column_end":76}},{"value":"/ no-op and callers shouldn't care about it. This only exists for making","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54369,"byte_end":54443,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the extension trait work.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54448,"byte_end":54477,"line_start":96,"line_end":96,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54755,"byte_end":54767,"line_start":104,"line_end":104,"column_start":8,"column_end":20},"name":"as_bytes_mut","qualname":"::ext_slice::ByteSlice::as_bytes_mut","value":"pub fn as_bytes_mut(&mut Self) -> &mut [u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" A method for accessing the raw bytes of this type, mutably. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw bytes of this type, mutably. This is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54535,"byte_end":54606,"line_start":100,"line_end":100,"column_start":5,"column_end":76}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54611,"byte_end":54683,"line_start":101,"line_end":101,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54688,"byte_end":54728,"line_start":102,"line_end":102,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55368,"byte_end":55375,"line_start":124,"line_end":124,"column_start":8,"column_end":15},"name":"as_bstr","qualname":"::ext_slice::ByteSlice::as_bstr","value":"pub fn as_bstr(&Self) -> &BStr","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&BStr`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54798,"byte_end":54838,"line_start":106,"line_end":106,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54843,"byte_end":54846,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ Use `&BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54851,"byte_end":54919,"line_start":108,"line_end":108,"column_start":5,"column_end":73}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54924,"byte_end":54992,"line_start":109,"line_end":109,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54997,"byte_end":55068,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55073,"byte_end":55142,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55147,"byte_end":55170,"line_start":112,"line_end":112,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55175,"byte_end":55178,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55183,"byte_end":55197,"line_start":114,"line_end":114,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55202,"byte_end":55205,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55210,"byte_end":55226,"line_start":116,"line_end":116,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55231,"byte_end":55234,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55239,"byte_end":55246,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55251,"byte_end":55275,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55280,"byte_end":55283,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ println!(\"{:?}\", b\"foo\\xFFbar\".as_bstr());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55288,"byte_end":55334,"line_start":121,"line_end":121,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55339,"byte_end":55346,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55351,"byte_end":55360,"line_start":123,"line_end":123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56059,"byte_end":56070,"line_start":147,"line_end":147,"column_start":8,"column_end":19},"name":"as_bstr_mut","qualname":"::ext_slice::ByteSlice::as_bstr_mut","value":"pub fn as_bstr_mut(&mut Self) -> &mut BStr","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return this byte slice as a `&mut BStr`.","sig":null,"attributes":[{"value":"/ Return this byte slice as a `&mut BStr`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55440,"byte_end":55484,"line_start":128,"line_end":128,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55489,"byte_end":55492,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Use `&mut BStr` is useful because of its `fmt::Debug` representation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55497,"byte_end":55569,"line_start":130,"line_end":130,"column_start":5,"column_end":77}},{"value":"/ and various other trait implementations (such as `PartialEq` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55574,"byte_end":55642,"line_start":131,"line_end":131,"column_start":5,"column_end":73}},{"value":"/ `PartialOrd`). In particular, the `Debug` implementation for `BStr`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55647,"byte_end":55718,"line_start":132,"line_end":132,"column_start":5,"column_end":76}},{"value":"/ shows its bytes as a normal string. For invalid UTF-8, hex escape","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55723,"byte_end":55792,"line_start":133,"line_end":133,"column_start":5,"column_end":74}},{"value":"/ sequences are used.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55797,"byte_end":55820,"line_start":134,"line_end":134,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55825,"byte_end":55828,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55833,"byte_end":55847,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55852,"byte_end":55855,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55860,"byte_end":55876,"line_start":138,"line_end":138,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55881,"byte_end":55884,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55889,"byte_end":55896,"line_start":140,"line_end":140,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55901,"byte_end":55925,"line_start":141,"line_end":141,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55930,"byte_end":55933,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = *b\"foo\\xFFbar\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55938,"byte_end":55973,"line_start":143,"line_end":143,"column_start":5,"column_end":40}},{"value":"/ println!(\"{:?}\", &mut bytes.as_bstr_mut());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":55978,"byte_end":56025,"line_start":144,"line_end":144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56030,"byte_end":56037,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56042,"byte_end":56051,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56914,"byte_end":56925,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"from_os_str","qualname":"::ext_slice::ByteSlice::from_os_str","value":"pub fn from_os_str(&OsStr) -> Option<&[u8]>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Create an immutable byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from an OS string slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56151,"byte_end":56211,"line_start":151,"line_end":151,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56216,"byte_end":56219,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56224,"byte_end":56296,"line_start":153,"line_end":153,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given OS string is not valid UTF-8. (For","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56301,"byte_end":56372,"line_start":154,"line_end":154,"column_start":5,"column_end":76}},{"value":"/ example, on Windows, file paths are allowed to be a sequence of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56377,"byte_end":56444,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/ arbitrary 16-bit integers. Not all such sequences can be transcoded to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56449,"byte_end":56523,"line_start":156,"line_end":156,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56528,"byte_end":56545,"line_start":157,"line_end":157,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56550,"byte_end":56553,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56558,"byte_end":56572,"line_start":159,"line_end":159,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56577,"byte_end":56580,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56585,"byte_end":56601,"line_start":161,"line_end":161,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56606,"byte_end":56609,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56614,"byte_end":56621,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56626,"byte_end":56650,"line_start":164,"line_end":164,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56655,"byte_end":56658,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56663,"byte_end":56692,"line_start":166,"line_end":166,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56697,"byte_end":56700,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56705,"byte_end":56740,"line_start":168,"line_end":168,"column_start":5,"column_end":40}},{"value":"/ let bs = <[u8]>::from_os_str(os_str).expect(\"should be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56745,"byte_end":56818,"line_start":169,"line_end":169,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56823,"byte_end":56852,"line_start":170,"line_end":170,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56857,"byte_end":56864,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56869,"byte_end":56892,"line_start":172,"line_end":172,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":56897,"byte_end":56906,"line_start":173,"line_end":173,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58066,"byte_end":58075,"line_start":214,"line_end":214,"column_start":8,"column_end":17},"name":"from_path","qualname":"::ext_slice::ByteSlice::from_path","value":"pub fn from_path(&Path) -> Option<&[u8]>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Create an immutable byte string from a file path.","sig":null,"attributes":[{"value":"/ Create an immutable byte string from a file path.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57330,"byte_end":57383,"line_start":192,"line_end":192,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57388,"byte_end":57391,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57396,"byte_end":57468,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ this returns `None` if the given path is not valid UTF-8. (For example,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57473,"byte_end":57548,"line_start":195,"line_end":195,"column_start":5,"column_end":80}},{"value":"/ on Windows, file paths are allowed to be a sequence of arbitrary 16-bit","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57553,"byte_end":57628,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ integers. Not all such sequences can be transcoded to valid UTF-8.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57633,"byte_end":57704,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57709,"byte_end":57712,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57717,"byte_end":57731,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57736,"byte_end":57739,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57744,"byte_end":57760,"line_start":201,"line_end":201,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57765,"byte_end":57768,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57773,"byte_end":57780,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57785,"byte_end":57809,"line_start":204,"line_end":204,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57814,"byte_end":57817,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57822,"byte_end":57851,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57856,"byte_end":57859,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57864,"byte_end":57896,"line_start":208,"line_end":208,"column_start":5,"column_end":37}},{"value":"/ let bs = <[u8]>::from_path(path).expect(\"should be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57901,"byte_end":57970,"line_start":209,"line_end":209,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":57975,"byte_end":58004,"line_start":210,"line_end":210,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58009,"byte_end":58016,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58021,"byte_end":58044,"line_start":212,"line_end":212,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58049,"byte_end":58058,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59195,"byte_end":59201,"line_start":247,"line_end":247,"column_start":8,"column_end":14},"name":"to_str","qualname":"::ext_slice::ByteSlice::to_str","value":"pub fn to_str(&Self) -> Result<&str, Utf8Error>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Safely convert this byte string into a `&str` if it's valid UTF-8.","sig":null,"attributes":[{"value":"/ Safely convert this byte string into a `&str` if it's valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58163,"byte_end":58233,"line_start":218,"line_end":218,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58238,"byte_end":58241,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error is returned. The","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58246,"byte_end":58320,"line_start":220,"line_end":220,"column_start":5,"column_end":79}},{"value":"/ error returned indicates the first invalid byte found and the length","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58325,"byte_end":58397,"line_start":221,"line_end":221,"column_start":5,"column_end":77}},{"value":"/ of the error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58402,"byte_end":58419,"line_start":222,"line_end":222,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58424,"byte_end":58427,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ In cases where a lossy conversion to `&str` is acceptable, then use one","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58432,"byte_end":58507,"line_start":224,"line_end":224,"column_start":5,"column_end":80}},{"value":"/ of the [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) or","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58512,"byte_end":58584,"line_start":225,"line_end":225,"column_start":5,"column_end":77}},{"value":"/ [`to_str_lossy_into`](trait.ByteSlice.html#method.to_str_lossy_into)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58589,"byte_end":58661,"line_start":226,"line_end":226,"column_start":5,"column_end":77}},{"value":"/ methods.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58666,"byte_end":58678,"line_start":227,"line_end":227,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58683,"byte_end":58686,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58691,"byte_end":58705,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58710,"byte_end":58713,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58718,"byte_end":58734,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58739,"byte_end":58742,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58747,"byte_end":58754,"line_start":233,"line_end":233,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58759,"byte_end":58797,"line_start":234,"line_end":234,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58802,"byte_end":58805,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), bstr::Utf8Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58810,"byte_end":58861,"line_start":236,"line_end":236,"column_start":5,"column_end":56}},{"value":"/ let s = B(\"☃βツ\").to_str()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58866,"byte_end":58902,"line_start":237,"line_end":237,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58907,"byte_end":58937,"line_start":238,"line_end":238,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58942,"byte_end":58945,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":58950,"byte_end":59000,"line_start":240,"line_end":240,"column_start":5,"column_end":50}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59005,"byte_end":59031,"line_start":241,"line_end":241,"column_start":5,"column_end":31}},{"value":"/ let err = bstring.to_str().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59036,"byte_end":59080,"line_start":242,"line_end":242,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(8, err.valid_up_to());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59085,"byte_end":59122,"line_start":243,"line_end":243,"column_start":5,"column_end":42}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59127,"byte_end":59161,"line_start":244,"line_end":244,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59166,"byte_end":59173,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59178,"byte_end":59187,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60490,"byte_end":60506,"line_start":282,"line_end":282,"column_start":15,"column_end":31},"name":"to_str_unchecked","qualname":"::ext_slice::ByteSlice::to_str_unchecked","value":"pub unsafe fn to_str_unchecked(&Self) -> &str","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `&str`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `&str`, without checking for","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59480,"byte_end":59553,"line_start":255,"line_end":255,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59558,"byte_end":59574,"line_start":256,"line_end":256,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59579,"byte_end":59582,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59587,"byte_end":59599,"line_start":258,"line_end":258,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59604,"byte_end":59607,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59612,"byte_end":59681,"line_start":260,"line_end":260,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `&str` that is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59686,"byte_end":59757,"line_start":261,"line_end":261,"column_start":5,"column_end":76}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59762,"byte_end":59815,"line_start":262,"line_end":262,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59820,"byte_end":59823,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59828,"byte_end":59898,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59903,"byte_end":59967,"line_start":265,"line_end":265,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":59972,"byte_end":60043,"line_start":266,"line_end":266,"column_start":5,"column_end":76}},{"value":"/ that [`to_str`](trait.ByteSlice.html#method.to_str) performs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60048,"byte_end":60113,"line_start":267,"line_end":267,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60118,"byte_end":60121,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60126,"byte_end":60140,"line_start":269,"line_end":269,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60145,"byte_end":60148,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60153,"byte_end":60169,"line_start":271,"line_end":271,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60174,"byte_end":60177,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60182,"byte_end":60189,"line_start":273,"line_end":273,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60194,"byte_end":60223,"line_start":274,"line_end":274,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60228,"byte_end":60231,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60236,"byte_end":60308,"line_start":276,"line_end":276,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60313,"byte_end":60353,"line_start":277,"line_end":277,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { B(\"☃βツ\").to_str_unchecked() };","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60358,"byte_end":60414,"line_start":278,"line_end":278,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60419,"byte_end":60449,"line_start":279,"line_end":279,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60454,"byte_end":60461,"line_start":280,"line_end":280,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60466,"byte_end":60475,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63392,"byte_end":63404,"line_start":347,"line_end":347,"column_start":8,"column_end":20},"name":"to_str_lossy","qualname":"::ext_slice::ByteSlice::to_str_lossy","value":"pub fn to_str_lossy(&Self) -> Cow<, str>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Convert this byte string to a valid UTF-8 string by replacing invalid\n UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Convert this byte string to a valid UTF-8 string by replacing invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60585,"byte_end":60658,"line_start":286,"line_end":286,"column_start":5,"column_end":78}},{"value":"/ UTF-8 bytes with the Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60663,"byte_end":60729,"line_start":287,"line_end":287,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60734,"byte_end":60737,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ If the byte string is already valid UTF-8, then no copying or","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60742,"byte_end":60807,"line_start":289,"line_end":289,"column_start":5,"column_end":70}},{"value":"/ allocation is performed and a borrrowed string slice is returned. If","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60812,"byte_end":60884,"line_start":290,"line_end":290,"column_start":5,"column_end":77}},{"value":"/ the byte string is not valid UTF-8, then an owned string buffer is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60889,"byte_end":60959,"line_start":291,"line_end":291,"column_start":5,"column_end":75}},{"value":"/ returned with invalid bytes replaced by the replacement codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":60964,"byte_end":61034,"line_start":292,"line_end":292,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61039,"byte_end":61042,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ This method uses the \"substitution of maximal subparts\" (Unicode","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61047,"byte_end":61115,"line_start":294,"line_end":294,"column_start":5,"column_end":73}},{"value":"/ Standard, Chapter 3, Section 9) strategy for inserting the replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61120,"byte_end":61194,"line_start":295,"line_end":295,"column_start":5,"column_end":79}},{"value":"/ codepoint. Specifically, a replacement codepoint is inserted whenever a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61199,"byte_end":61274,"line_start":296,"line_end":296,"column_start":5,"column_end":80}},{"value":"/ byte is found that cannot possibly lead to a valid code unit sequence.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61279,"byte_end":61353,"line_start":297,"line_end":297,"column_start":5,"column_end":79}},{"value":"/ If there were previous bytes that represented a prefix of a well-formed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61358,"byte_end":61433,"line_start":298,"line_end":298,"column_start":5,"column_end":80}},{"value":"/ code unit sequence, then all of those bytes are substituted with a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61438,"byte_end":61508,"line_start":299,"line_end":299,"column_start":5,"column_end":75}},{"value":"/ single replacement codepoint. The \"substitution of maximal subparts\"","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61513,"byte_end":61585,"line_start":300,"line_end":300,"column_start":5,"column_end":77}},{"value":"/ strategy is the same strategy used by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61590,"byte_end":61631,"line_start":301,"line_end":301,"column_start":5,"column_end":46}},{"value":"/ [W3C's Encoding standard](https://www.w3.org/TR/encoding/).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61636,"byte_end":61699,"line_start":302,"line_end":302,"column_start":5,"column_end":68}},{"value":"/ For a more precise description of the maximal subpart strategy, see","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61704,"byte_end":61775,"line_start":303,"line_end":303,"column_start":5,"column_end":76}},{"value":"/ the Unicode Standard, Chapter 3, Section 9. See also","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61780,"byte_end":61836,"line_start":304,"line_end":304,"column_start":5,"column_end":61}},{"value":"/ [Public Review Issue #121](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61841,"byte_end":61915,"line_start":305,"line_end":305,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61920,"byte_end":61923,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ N.B. Rust's standard library also appears to use the same strategy,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":61928,"byte_end":61999,"line_start":307,"line_end":307,"column_start":5,"column_end":76}},{"value":"/ but it does not appear to be an API guarantee.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62004,"byte_end":62054,"line_start":308,"line_end":308,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62059,"byte_end":62062,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62067,"byte_end":62081,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62086,"byte_end":62089,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62094,"byte_end":62110,"line_start":312,"line_end":312,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62115,"byte_end":62118,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62123,"byte_end":62130,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62135,"byte_end":62160,"line_start":315,"line_end":315,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62165,"byte_end":62168,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62173,"byte_end":62197,"line_start":317,"line_end":317,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62202,"byte_end":62205,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62210,"byte_end":62260,"line_start":319,"line_end":319,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\"), bstring.to_str_lossy());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62265,"byte_end":62331,"line_start":320,"line_end":320,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62336,"byte_end":62339,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62344,"byte_end":62394,"line_start":322,"line_end":322,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62399,"byte_end":62425,"line_start":323,"line_end":323,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(Cow::Borrowed(\"☃βツ\\u{FFFD}\"), bstring.to_str_lossy());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62430,"byte_end":62504,"line_start":324,"line_end":324,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62509,"byte_end":62516,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62521,"byte_end":62524,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This demonstrates the \"maximal subpart\" substitution logic.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62529,"byte_end":62592,"line_start":327,"line_end":327,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62597,"byte_end":62600,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62605,"byte_end":62612,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62617,"byte_end":62646,"line_start":330,"line_end":330,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62651,"byte_end":62654,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ // \\x61 is the ASCII codepoint for 'a'.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62659,"byte_end":62702,"line_start":332,"line_end":332,"column_start":5,"column_end":48}},{"value":"/ // \\xF1\\x80\\x80 is a valid 3-byte code unit prefix.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62707,"byte_end":62762,"line_start":333,"line_end":333,"column_start":5,"column_end":60}},{"value":"/ // \\xE1\\x80 is a valid 2-byte code unit prefix.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62767,"byte_end":62818,"line_start":334,"line_end":334,"column_start":5,"column_end":56}},{"value":"/ // \\xC2 is a valid 1-byte code unit prefix.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62823,"byte_end":62870,"line_start":335,"line_end":335,"column_start":5,"column_end":52}},{"value":"/ // \\x62 is the ASCII codepoint for 'b'.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62875,"byte_end":62918,"line_start":336,"line_end":336,"column_start":5,"column_end":48}},{"value":"/ //","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62923,"byte_end":62929,"line_start":337,"line_end":337,"column_start":5,"column_end":11}},{"value":"/ // In sum, each of the prefixes is replaced by a single replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":62934,"byte_end":63005,"line_start":338,"line_end":338,"column_start":5,"column_end":76}},{"value":"/ // codepoint since none of the prefixes are properly completed. This","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63010,"byte_end":63082,"line_start":339,"line_end":339,"column_start":5,"column_end":77}},{"value":"/ // is in contrast to other strategies that might insert a replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63087,"byte_end":63160,"line_start":340,"line_end":340,"column_start":5,"column_end":78}},{"value":"/ // codepoint for every single byte.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63165,"byte_end":63204,"line_start":341,"line_end":341,"column_start":5,"column_end":44}},{"value":"/ let bs = B(b\"\\x61\\xF1\\x80\\x80\\xE1\\x80\\xC2\\x62\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63209,"byte_end":63261,"line_start":342,"line_end":342,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(\"a\\u{FFFD}\\u{FFFD}\\u{FFFD}b\", bs.to_str_lossy());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63266,"byte_end":63330,"line_start":343,"line_end":343,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63335,"byte_end":63342,"line_start":344,"line_end":344,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63347,"byte_end":63370,"line_start":345,"line_end":345,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":63375,"byte_end":63384,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65563,"byte_end":65580,"line_start":404,"line_end":404,"column_start":8,"column_end":25},"name":"to_str_lossy_into","qualname":"::ext_slice::ByteSlice::to_str_lossy_into","value":"pub fn to_str_lossy_into(&Self, &mut String)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Copy the contents of this byte string into the given owned string\n buffer, while replacing invalid UTF-8 code unit sequences with the\n Unicode replacement codepoint (`U+FFFD`).","sig":null,"attributes":[{"value":"/ Copy the contents of this byte string into the given owned string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64404,"byte_end":64473,"line_start":372,"line_end":372,"column_start":5,"column_end":74}},{"value":"/ buffer, while replacing invalid UTF-8 code unit sequences with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64478,"byte_end":64548,"line_start":373,"line_end":373,"column_start":5,"column_end":75}},{"value":"/ Unicode replacement codepoint (`U+FFFD`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64553,"byte_end":64598,"line_start":374,"line_end":374,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64603,"byte_end":64606,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ This method uses the same \"substitution of maximal subparts\" strategy","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64611,"byte_end":64684,"line_start":376,"line_end":376,"column_start":5,"column_end":78}},{"value":"/ for inserting the replacement codepoint as the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64689,"byte_end":64739,"line_start":377,"line_end":377,"column_start":5,"column_end":55}},{"value":"/ [`to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy) method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64744,"byte_end":64814,"line_start":378,"line_end":378,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64819,"byte_end":64822,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for amortizing allocation. However, unlike","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64827,"byte_end":64896,"line_start":380,"line_end":380,"column_start":5,"column_end":74}},{"value":"/ `to_str_lossy`, this routine will _always_ copy the contents of this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64901,"byte_end":64973,"line_start":381,"line_end":381,"column_start":5,"column_end":77}},{"value":"/ byte string into the destination buffer, even if this byte string is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":64978,"byte_end":65050,"line_start":382,"line_end":382,"column_start":5,"column_end":77}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65055,"byte_end":65071,"line_start":383,"line_end":383,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65076,"byte_end":65079,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65084,"byte_end":65098,"line_start":385,"line_end":385,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65103,"byte_end":65106,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65111,"byte_end":65127,"line_start":387,"line_end":387,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65132,"byte_end":65135,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65140,"byte_end":65147,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"/ use std::borrow::Cow;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65152,"byte_end":65177,"line_start":390,"line_end":390,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65182,"byte_end":65185,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65190,"byte_end":65214,"line_start":392,"line_end":392,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65219,"byte_end":65222,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ let mut bstring = <Vec<u8>>::from(\"☃βツ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65227,"byte_end":65277,"line_start":394,"line_end":394,"column_start":5,"column_end":50}},{"value":"/ // Add a byte that makes the sequence invalid.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65282,"byte_end":65332,"line_start":395,"line_end":395,"column_start":5,"column_end":55}},{"value":"/ bstring.push(b'\\xFF');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65337,"byte_end":65363,"line_start":396,"line_end":396,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65368,"byte_end":65371,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut dest = String::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65376,"byte_end":65409,"line_start":398,"line_end":398,"column_start":5,"column_end":38}},{"value":"/ bstring.to_str_lossy_into(&mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65414,"byte_end":65455,"line_start":399,"line_end":399,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(\"☃βツ\\u{FFFD}\", dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65460,"byte_end":65501,"line_start":400,"line_end":400,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65506,"byte_end":65513,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65518,"byte_end":65541,"line_start":402,"line_end":402,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":65546,"byte_end":65555,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67374,"byte_end":67383,"line_start":451,"line_end":451,"column_start":8,"column_end":17},"name":"to_os_str","qualname":"::ext_slice::ByteSlice::to_os_str","value":"pub fn to_os_str(&Self) -> Result<&OsStr, Utf8Error>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Create an OS string slice from this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66618,"byte_end":66670,"line_start":430,"line_end":430,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66675,"byte_end":66678,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66683,"byte_end":66755,"line_start":432,"line_end":432,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66760,"byte_end":66832,"line_start":433,"line_end":433,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66837,"byte_end":66904,"line_start":434,"line_end":434,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66909,"byte_end":66984,"line_start":435,"line_end":435,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":66989,"byte_end":67060,"line_start":436,"line_end":436,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67065,"byte_end":67086,"line_start":437,"line_end":437,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67091,"byte_end":67094,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67099,"byte_end":67113,"line_start":439,"line_end":439,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67118,"byte_end":67121,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67126,"byte_end":67142,"line_start":441,"line_end":441,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67147,"byte_end":67150,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67155,"byte_end":67162,"line_start":443,"line_end":443,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67167,"byte_end":67196,"line_start":444,"line_end":444,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67201,"byte_end":67204,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\".to_os_str().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67209,"byte_end":67277,"line_start":446,"line_end":446,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(os_str, \"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67282,"byte_end":67312,"line_start":447,"line_end":447,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67317,"byte_end":67324,"line_start":448,"line_end":448,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67329,"byte_end":67352,"line_start":449,"line_end":449,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67357,"byte_end":67366,"line_start":450,"line_end":450,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68598,"byte_end":68613,"line_start":491,"line_end":491,"column_start":8,"column_end":23},"name":"to_os_str_lossy","qualname":"::ext_slice::ByteSlice::to_os_str_lossy","value":"pub fn to_os_str_lossy(&Self) -> Cow<, OsStr>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Lossily create an OS string slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create an OS string slice from this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67818,"byte_end":67878,"line_start":469,"line_end":469,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67883,"byte_end":67886,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67891,"byte_end":67963,"line_start":471,"line_end":471,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":67968,"byte_end":68040,"line_start":472,"line_end":472,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68045,"byte_end":68106,"line_start":473,"line_end":473,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68111,"byte_end":68114,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68119,"byte_end":68192,"line_start":475,"line_end":475,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68197,"byte_end":68268,"line_start":476,"line_end":476,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68273,"byte_end":68305,"line_start":477,"line_end":477,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68310,"byte_end":68313,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68318,"byte_end":68332,"line_start":479,"line_end":479,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68337,"byte_end":68340,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68345,"byte_end":68361,"line_start":481,"line_end":481,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68366,"byte_end":68369,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68374,"byte_end":68381,"line_start":483,"line_end":483,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68386,"byte_end":68410,"line_start":484,"line_end":484,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68415,"byte_end":68418,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let os_str = b\"foo\\xFFbar\".to_os_str_lossy();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68423,"byte_end":68472,"line_start":486,"line_end":486,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68477,"byte_end":68536,"line_start":487,"line_end":487,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68541,"byte_end":68548,"line_start":488,"line_end":488,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68553,"byte_end":68576,"line_start":489,"line_end":489,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":68581,"byte_end":68590,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69944,"byte_end":69951,"line_start":535,"line_end":535,"column_start":8,"column_end":15},"name":"to_path","qualname":"::ext_slice::ByteSlice::to_path","value":"pub fn to_path(&Self) -> Result<&Path, Utf8Error>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Create a path slice from this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69193,"byte_end":69239,"line_start":514,"line_end":514,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69244,"byte_end":69247,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69252,"byte_end":69324,"line_start":516,"line_end":516,"column_start":5,"column_end":77}},{"value":"/ this returns a UTF-8 decoding error if this byte string is not valid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69329,"byte_end":69401,"line_start":517,"line_end":517,"column_start":5,"column_end":77}},{"value":"/ UTF-8. (For example, on Windows, file paths are allowed to be a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69406,"byte_end":69473,"line_start":518,"line_end":518,"column_start":5,"column_end":72}},{"value":"/ sequence of arbitrary 16-bit integers. There is no obvious mapping from","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69478,"byte_end":69553,"line_start":519,"line_end":519,"column_start":5,"column_end":80}},{"value":"/ an arbitrary sequence of 8-bit integers to an arbitrary sequence of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69558,"byte_end":69629,"line_start":520,"line_end":520,"column_start":5,"column_end":76}},{"value":"/ 16-bit integers.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69634,"byte_end":69655,"line_start":521,"line_end":521,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69660,"byte_end":69663,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69668,"byte_end":69682,"line_start":523,"line_end":523,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69687,"byte_end":69690,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69695,"byte_end":69711,"line_start":525,"line_end":525,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69716,"byte_end":69719,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69724,"byte_end":69731,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69736,"byte_end":69760,"line_start":528,"line_end":528,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69765,"byte_end":69768,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ let path = b\"foo\".to_path().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69773,"byte_end":69837,"line_start":530,"line_end":530,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69842,"byte_end":69882,"line_start":531,"line_end":531,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69887,"byte_end":69894,"line_start":532,"line_end":532,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69899,"byte_end":69922,"line_start":533,"line_end":533,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":69927,"byte_end":69936,"line_start":534,"line_end":534,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70829,"byte_end":70842,"line_start":562,"line_end":562,"column_start":8,"column_end":21},"name":"to_path_lossy","qualname":"::ext_slice::ByteSlice::to_path_lossy","value":"pub fn to_path_lossy(&Self) -> Cow<, Path>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Lossily create a path slice from this byte string.","sig":null,"attributes":[{"value":"/ Lossily create a path slice from this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70040,"byte_end":70094,"line_start":539,"line_end":539,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70099,"byte_end":70102,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70107,"byte_end":70179,"line_start":541,"line_end":541,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70184,"byte_end":70256,"line_start":542,"line_end":542,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70261,"byte_end":70322,"line_start":543,"line_end":543,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70327,"byte_end":70330,"line_start":544,"line_end":544,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70335,"byte_end":70408,"line_start":545,"line_end":545,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70413,"byte_end":70484,"line_start":546,"line_end":546,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70489,"byte_end":70521,"line_start":547,"line_end":547,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70526,"byte_end":70529,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70534,"byte_end":70548,"line_start":549,"line_end":549,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70553,"byte_end":70556,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70561,"byte_end":70577,"line_start":551,"line_end":551,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70582,"byte_end":70585,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70590,"byte_end":70597,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70602,"byte_end":70626,"line_start":554,"line_end":554,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70631,"byte_end":70634,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foo\\xFFbar\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70639,"byte_end":70666,"line_start":556,"line_end":556,"column_start":5,"column_end":32}},{"value":"/ let path = bs.to_path_lossy();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70671,"byte_end":70705,"line_start":557,"line_end":557,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70710,"byte_end":70767,"line_start":558,"line_end":558,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70772,"byte_end":70779,"line_start":559,"line_end":559,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70784,"byte_end":70807,"line_start":560,"line_end":560,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":70812,"byte_end":70821,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71556,"byte_end":71563,"line_start":590,"line_end":590,"column_start":8,"column_end":15},"name":"repeatn","qualname":"::ext_slice::ByteSlice::repeatn","value":"pub fn repeatn(&Self, usize) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Create a new byte string by repeating this byte string `n` times.","sig":null,"attributes":[{"value":"/ Create a new byte string by repeating this byte string `n` times.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71078,"byte_end":71147,"line_start":571,"line_end":571,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71152,"byte_end":71155,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71160,"byte_end":71172,"line_start":573,"line_end":573,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71177,"byte_end":71180,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ This function panics if the capacity of the new byte string would","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71185,"byte_end":71254,"line_start":575,"line_end":575,"column_start":5,"column_end":74}},{"value":"/ overflow.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71259,"byte_end":71272,"line_start":576,"line_end":576,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71277,"byte_end":71280,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71285,"byte_end":71299,"line_start":578,"line_end":578,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71304,"byte_end":71307,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71312,"byte_end":71328,"line_start":580,"line_end":580,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71333,"byte_end":71336,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71341,"byte_end":71348,"line_start":582,"line_end":582,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71353,"byte_end":71382,"line_start":583,"line_end":583,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71387,"byte_end":71390,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo\".repeatn(4), B(\"foofoofoofoo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71395,"byte_end":71448,"line_start":585,"line_end":585,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(b\"foo\".repeatn(0), B(\"\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71453,"byte_end":71494,"line_start":586,"line_end":586,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71499,"byte_end":71506,"line_start":587,"line_end":587,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71511,"byte_end":71534,"line_start":588,"line_end":588,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71539,"byte_end":71548,"line_start":589,"line_end":589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72170,"byte_end":72182,"line_start":613,"line_end":613,"column_start":8,"column_end":20},"name":"contains_str","qualname":"::ext_slice::ByteSlice::contains_str","value":"pub fn contains_str<B: AsRef<[u8]>>(&Self, B) -> bool","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string contains the given needle.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string contains the given needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71801,"byte_end":71876,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71881,"byte_end":71884,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71889,"byte_end":71903,"line_start":601,"line_end":601,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71908,"byte_end":71911,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71916,"byte_end":71932,"line_start":603,"line_end":603,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71937,"byte_end":71940,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71945,"byte_end":71952,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71957,"byte_end":71981,"line_start":606,"line_end":606,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71986,"byte_end":71989,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".contains_str(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":71994,"byte_end":72038,"line_start":608,"line_end":608,"column_start":5,"column_end":49}},{"value":"/ assert!(b\"foo bar\".contains_str(\"bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72043,"byte_end":72087,"line_start":609,"line_end":609,"column_start":5,"column_end":49}},{"value":"/ assert!(!b\"foo\".contains_str(\"foobar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72092,"byte_end":72136,"line_start":610,"line_end":610,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72141,"byte_end":72148,"line_start":611,"line_end":611,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72153,"byte_end":72162,"line_start":612,"line_end":612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72648,"byte_end":72663,"line_start":631,"line_end":631,"column_start":8,"column_end":23},"name":"starts_with_str","qualname":"::ext_slice::ByteSlice::starts_with_str","value":"pub fn starts_with_str<B: AsRef<[u8]>>(&Self, B) -> bool","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given prefix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given prefix.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72274,"byte_end":72344,"line_start":617,"line_end":617,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72349,"byte_end":72352,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72357,"byte_end":72371,"line_start":619,"line_end":619,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72376,"byte_end":72379,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72384,"byte_end":72400,"line_start":621,"line_end":621,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72405,"byte_end":72408,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72413,"byte_end":72420,"line_start":623,"line_end":623,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72425,"byte_end":72449,"line_start":624,"line_end":624,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72454,"byte_end":72457,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".starts_with_str(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72462,"byte_end":72509,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ assert!(!b\"foo bar\".starts_with_str(\"bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72514,"byte_end":72562,"line_start":627,"line_end":627,"column_start":5,"column_end":53}},{"value":"/ assert!(!b\"foo\".starts_with_str(\"foobar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72567,"byte_end":72614,"line_start":628,"line_end":628,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72619,"byte_end":72626,"line_start":629,"line_end":629,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72631,"byte_end":72640,"line_start":630,"line_end":630,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73140,"byte_end":73153,"line_start":649,"line_end":649,"column_start":8,"column_end":21},"name":"ends_with_str","qualname":"::ext_slice::ByteSlice::ends_with_str","value":"pub fn ends_with_str<B: AsRef<[u8]>>(&Self, B) -> bool","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns true if and only if this byte string has the given suffix.","sig":null,"attributes":[{"value":"/ Returns true if and only if this byte string has the given suffix.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72772,"byte_end":72842,"line_start":635,"line_end":635,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72847,"byte_end":72850,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72855,"byte_end":72869,"line_start":637,"line_end":637,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72874,"byte_end":72877,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72882,"byte_end":72898,"line_start":639,"line_end":639,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72903,"byte_end":72906,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72911,"byte_end":72918,"line_start":641,"line_end":641,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72923,"byte_end":72947,"line_start":642,"line_end":642,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72952,"byte_end":72955,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ assert!(b\"foo bar\".ends_with_str(\"bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":72960,"byte_end":73005,"line_start":644,"line_end":644,"column_start":5,"column_end":50}},{"value":"/ assert!(!b\"foo bar\".ends_with_str(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73010,"byte_end":73056,"line_start":645,"line_end":645,"column_start":5,"column_end":51}},{"value":"/ assert!(!b\"bar\".ends_with_str(\"foobar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73061,"byte_end":73106,"line_start":646,"line_end":646,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73111,"byte_end":73118,"line_start":647,"line_end":647,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73123,"byte_end":73132,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74356,"byte_end":74360,"line_start":684,"line_end":684,"column_start":8,"column_end":12},"name":"find","qualname":"::ext_slice::ByteSlice::find","value":"pub fn find<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73260,"byte_end":73326,"line_start":653,"line_end":653,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73331,"byte_end":73334,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73339,"byte_end":73406,"line_start":655,"line_end":655,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73411,"byte_end":73481,"line_start":656,"line_end":656,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73486,"byte_end":73489,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73494,"byte_end":73559,"line_start":658,"line_end":658,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73564,"byte_end":73627,"line_start":659,"line_end":659,"column_start":5,"column_end":68}},{"value":"/ [`Finder`](struct.Finder.html) once, and reuse it for each search.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73632,"byte_end":73702,"line_start":660,"line_end":660,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73707,"byte_end":73710,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73715,"byte_end":73731,"line_start":662,"line_end":662,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73736,"byte_end":73739,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73744,"byte_end":73816,"line_start":664,"line_end":664,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73821,"byte_end":73893,"line_start":665,"line_end":665,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73898,"byte_end":73945,"line_start":666,"line_end":666,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73950,"byte_end":73953,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":73958,"byte_end":74027,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74032,"byte_end":74047,"line_start":669,"line_end":669,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74052,"byte_end":74055,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74060,"byte_end":74074,"line_start":671,"line_end":671,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74079,"byte_end":74082,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74087,"byte_end":74103,"line_start":673,"line_end":673,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74108,"byte_end":74111,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74116,"byte_end":74123,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74128,"byte_end":74152,"line_start":676,"line_end":676,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74157,"byte_end":74160,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74165,"byte_end":74192,"line_start":678,"line_end":678,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.find(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74197,"byte_end":74236,"line_start":679,"line_end":679,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(Some(4), s.find(\"bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74241,"byte_end":74280,"line_start":680,"line_end":680,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.find(\"quux\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74285,"byte_end":74322,"line_start":681,"line_end":681,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74327,"byte_end":74334,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74339,"byte_end":74348,"line_start":683,"line_end":683,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75648,"byte_end":75653,"line_start":721,"line_end":721,"column_start":8,"column_end":13},"name":"rfind","qualname":"::ext_slice::ByteSlice::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given needle.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74484,"byte_end":74549,"line_start":688,"line_end":688,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74554,"byte_end":74557,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74562,"byte_end":74629,"line_start":690,"line_end":690,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74634,"byte_end":74704,"line_start":691,"line_end":691,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74709,"byte_end":74712,"line_start":692,"line_end":692,"column_start":5,"column_end":8}},{"value":"/ Note that if you're are searching for the same needle in many","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74717,"byte_end":74782,"line_start":693,"line_end":693,"column_start":5,"column_end":70}},{"value":"/ different small haystacks, it may be faster to initialize a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74787,"byte_end":74850,"line_start":694,"line_end":694,"column_start":5,"column_end":68}},{"value":"/ [`FinderReverse`](struct.FinderReverse.html) once, and reuse it for","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74855,"byte_end":74926,"line_start":695,"line_end":695,"column_start":5,"column_end":76}},{"value":"/ each search.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74931,"byte_end":74947,"line_start":696,"line_end":696,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74952,"byte_end":74955,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74960,"byte_end":74976,"line_start":698,"line_end":698,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74981,"byte_end":74984,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":74989,"byte_end":75061,"line_start":700,"line_end":700,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75066,"byte_end":75138,"line_start":701,"line_end":701,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75143,"byte_end":75190,"line_start":702,"line_end":702,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75195,"byte_end":75198,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75203,"byte_end":75272,"line_start":704,"line_end":704,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75277,"byte_end":75292,"line_start":705,"line_end":705,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75297,"byte_end":75300,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75305,"byte_end":75319,"line_start":707,"line_end":707,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75324,"byte_end":75327,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75332,"byte_end":75348,"line_start":709,"line_end":709,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75353,"byte_end":75356,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75361,"byte_end":75368,"line_start":711,"line_end":711,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75373,"byte_end":75397,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75402,"byte_end":75405,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar baz\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75410,"byte_end":75437,"line_start":714,"line_end":714,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(Some(0), s.rfind(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75442,"byte_end":75482,"line_start":715,"line_end":715,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(4), s.rfind(\"bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75487,"byte_end":75527,"line_start":716,"line_end":716,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(Some(8), s.rfind(\"ba\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75532,"byte_end":75571,"line_start":717,"line_end":717,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(None, s.rfind(\"quux\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75576,"byte_end":75614,"line_start":718,"line_end":718,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75619,"byte_end":75626,"line_start":719,"line_end":719,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75631,"byte_end":75640,"line_start":720,"line_end":720,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77026,"byte_end":77035,"line_start":763,"line_end":763,"column_start":8,"column_end":17},"name":"find_iter","qualname":"::ext_slice::ByteSlice::find_iter","value":"pub fn find_iter<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B) -> Find","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle. The iterator yields byte offset positions indicating the start\n of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75785,"byte_end":75856,"line_start":725,"line_end":725,"column_start":5,"column_end":76}},{"value":"/ needle. The iterator yields byte offset positions indicating the start","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75861,"byte_end":75935,"line_start":726,"line_end":726,"column_start":5,"column_end":79}},{"value":"/ of each match.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75940,"byte_end":75958,"line_start":727,"line_end":727,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75963,"byte_end":75966,"line_start":728,"line_end":728,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75971,"byte_end":75987,"line_start":729,"line_end":729,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":75992,"byte_end":75995,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76000,"byte_end":76072,"line_start":731,"line_end":731,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76077,"byte_end":76149,"line_start":732,"line_end":732,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76154,"byte_end":76201,"line_start":733,"line_end":733,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76206,"byte_end":76209,"line_start":734,"line_end":734,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76214,"byte_end":76283,"line_start":735,"line_end":735,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76288,"byte_end":76303,"line_start":736,"line_end":736,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76308,"byte_end":76311,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76316,"byte_end":76330,"line_start":738,"line_end":738,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76335,"byte_end":76338,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76343,"byte_end":76359,"line_start":740,"line_end":740,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76364,"byte_end":76367,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76372,"byte_end":76379,"line_start":742,"line_end":742,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76384,"byte_end":76408,"line_start":743,"line_end":743,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76413,"byte_end":76416,"line_start":744,"line_end":744,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76421,"byte_end":76461,"line_start":745,"line_end":745,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.find_iter(\"foo\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76466,"byte_end":76525,"line_start":746,"line_end":746,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0, 8, 12, 21]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76530,"byte_end":76574,"line_start":747,"line_end":747,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76579,"byte_end":76586,"line_start":748,"line_end":748,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76591,"byte_end":76594,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76599,"byte_end":76668,"line_start":750,"line_end":750,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76673,"byte_end":76713,"line_start":751,"line_end":751,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76718,"byte_end":76721,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76726,"byte_end":76733,"line_start":753,"line_end":753,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76738,"byte_end":76762,"line_start":754,"line_end":754,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76767,"byte_end":76770,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".find_iter(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76775,"byte_end":76836,"line_start":756,"line_end":756,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(matches, vec![0, 1, 2, 3]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76841,"byte_end":76883,"line_start":757,"line_end":757,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76888,"byte_end":76891,"line_start":758,"line_end":758,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".find_iter(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76896,"byte_end":76954,"line_start":759,"line_end":759,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76959,"byte_end":76992,"line_start":760,"line_end":760,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":76997,"byte_end":77004,"line_start":761,"line_end":761,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77009,"byte_end":77018,"line_start":762,"line_end":762,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78445,"byte_end":78455,"line_start":808,"line_end":808,"column_start":8,"column_end":18},"name":"rfind_iter","qualname":"::ext_slice::ByteSlice::rfind_iter","value":"pub fn rfind_iter<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B) -> FindReverse","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator of the non-overlapping occurrences of the given\n needle in reverse. The iterator yields byte offset positions indicating\n the start of each match.","sig":null,"attributes":[{"value":"/ Returns an iterator of the non-overlapping occurrences of the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77190,"byte_end":77261,"line_start":770,"line_end":770,"column_start":5,"column_end":76}},{"value":"/ needle in reverse. The iterator yields byte offset positions indicating","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77266,"byte_end":77341,"line_start":771,"line_end":771,"column_start":5,"column_end":80}},{"value":"/ the start of each match.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77346,"byte_end":77374,"line_start":772,"line_end":772,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77379,"byte_end":77382,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77387,"byte_end":77403,"line_start":774,"line_end":774,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77408,"byte_end":77411,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77416,"byte_end":77488,"line_start":776,"line_end":776,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77493,"byte_end":77565,"line_start":777,"line_end":777,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77570,"byte_end":77617,"line_start":778,"line_end":778,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77622,"byte_end":77625,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77630,"byte_end":77699,"line_start":780,"line_end":780,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77704,"byte_end":77719,"line_start":781,"line_end":781,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77724,"byte_end":77727,"line_start":782,"line_end":782,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77732,"byte_end":77746,"line_start":783,"line_end":783,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77751,"byte_end":77754,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77759,"byte_end":77775,"line_start":785,"line_end":785,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77780,"byte_end":77783,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77788,"byte_end":77795,"line_start":787,"line_end":787,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77800,"byte_end":77824,"line_start":788,"line_end":788,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77829,"byte_end":77832,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo bar foo foo quux foo\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77837,"byte_end":77877,"line_start":790,"line_end":790,"column_start":5,"column_end":45}},{"value":"/ let matches: Vec<usize> = s.rfind_iter(\"foo\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77882,"byte_end":77942,"line_start":791,"line_end":791,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(matches, vec![21, 12, 8, 0]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77947,"byte_end":77991,"line_start":792,"line_end":792,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":77996,"byte_end":78003,"line_start":793,"line_end":793,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78008,"byte_end":78011,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ An empty string matches at every position, including the position","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78016,"byte_end":78085,"line_start":795,"line_end":795,"column_start":5,"column_end":74}},{"value":"/ immediately following the last byte:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78090,"byte_end":78130,"line_start":796,"line_end":796,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78135,"byte_end":78138,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78143,"byte_end":78150,"line_start":798,"line_end":798,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78155,"byte_end":78179,"line_start":799,"line_end":799,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78184,"byte_end":78187,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"foo\".rfind_iter(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78192,"byte_end":78254,"line_start":801,"line_end":801,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(matches, vec![3, 2, 1, 0]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78259,"byte_end":78301,"line_start":802,"line_end":802,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78306,"byte_end":78309,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ let matches: Vec<usize> = b\"\".rfind_iter(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78314,"byte_end":78373,"line_start":804,"line_end":804,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(matches, vec![0]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78378,"byte_end":78411,"line_start":805,"line_end":805,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78416,"byte_end":78423,"line_start":806,"line_end":806,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78428,"byte_end":78437,"line_start":807,"line_end":807,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79036,"byte_end":79045,"line_start":829,"line_end":829,"column_start":8,"column_end":17},"name":"find_byte","qualname":"::ext_slice::ByteSlice::find_byte","value":"pub fn find_byte(&Self, u8) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given byte. If the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78624,"byte_end":78695,"line_start":815,"line_end":815,"column_start":5,"column_end":76}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78700,"byte_end":78769,"line_start":816,"line_end":816,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78774,"byte_end":78777,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78782,"byte_end":78796,"line_start":818,"line_end":818,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78801,"byte_end":78804,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78809,"byte_end":78825,"line_start":820,"line_end":820,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78830,"byte_end":78833,"line_start":821,"line_end":821,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78838,"byte_end":78845,"line_start":822,"line_end":822,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78850,"byte_end":78874,"line_start":823,"line_end":823,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78879,"byte_end":78882,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_byte(b'z'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78887,"byte_end":78944,"line_start":825,"line_end":825,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_byte(b'y'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":78949,"byte_end":79002,"line_start":826,"line_end":826,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79007,"byte_end":79014,"line_start":827,"line_end":827,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79019,"byte_end":79028,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":227},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79544,"byte_end":79554,"line_start":847,"line_end":847,"column_start":8,"column_end":18},"name":"rfind_byte","qualname":"::ext_slice::ByteSlice::rfind_byte","value":"pub fn rfind_byte(&Self, u8) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given byte. If the\n byte does not occur in this byte string, then `None` is returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given byte. If the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79131,"byte_end":79201,"line_start":833,"line_end":833,"column_start":5,"column_end":75}},{"value":"/ byte does not occur in this byte string, then `None` is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79206,"byte_end":79275,"line_start":834,"line_end":834,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79280,"byte_end":79283,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79288,"byte_end":79302,"line_start":836,"line_end":836,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79307,"byte_end":79310,"line_start":837,"line_end":837,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79315,"byte_end":79331,"line_start":838,"line_end":838,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79336,"byte_end":79339,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79344,"byte_end":79351,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79356,"byte_end":79380,"line_start":841,"line_end":841,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79385,"byte_end":79388,"line_start":842,"line_end":842,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_byte(b'z'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79393,"byte_end":79451,"line_start":843,"line_end":843,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_byte(b'y'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79456,"byte_end":79510,"line_start":844,"line_end":844,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79515,"byte_end":79522,"line_start":845,"line_end":845,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79527,"byte_end":79536,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80345,"byte_end":80354,"line_start":871,"line_end":871,"column_start":8,"column_end":17},"name":"find_char","qualname":"::ext_slice::ByteSlice::find_char","value":"pub fn find_char(&Self, char) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of the given codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79641,"byte_end":79710,"line_start":851,"line_end":851,"column_start":5,"column_end":74}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79715,"byte_end":79786,"line_start":852,"line_end":852,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79791,"byte_end":79804,"line_start":853,"line_end":853,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79809,"byte_end":79812,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79817,"byte_end":79889,"line_start":855,"line_end":855,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79894,"byte_end":79968,"line_start":856,"line_end":856,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":79973,"byte_end":80013,"line_start":857,"line_end":857,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80018,"byte_end":80021,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80026,"byte_end":80040,"line_start":859,"line_end":859,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80045,"byte_end":80048,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80053,"byte_end":80069,"line_start":861,"line_end":861,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80074,"byte_end":80077,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80082,"byte_end":80089,"line_start":863,"line_end":863,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80094,"byte_end":80123,"line_start":864,"line_end":864,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80128,"byte_end":80131,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".find_char('z'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80136,"byte_end":80192,"line_start":866,"line_end":866,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(Some(4), B(\"αβγγδ\").find_char('γ'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80197,"byte_end":80254,"line_start":867,"line_end":867,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(None, b\"foo bar baz\".find_char('y'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80259,"byte_end":80311,"line_start":868,"line_end":868,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80316,"byte_end":80323,"line_start":869,"line_end":869,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80328,"byte_end":80337,"line_start":870,"line_end":870,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81155,"byte_end":81165,"line_start":895,"line_end":895,"column_start":8,"column_end":18},"name":"rfind_char","qualname":"::ext_slice::ByteSlice::rfind_char","value":"pub fn rfind_char(&Self, char) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of the given codepoint.\n If the codepoint does not occur in this byte string, then `None` is\n returned.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of the given codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80449,"byte_end":80517,"line_start":875,"line_end":875,"column_start":5,"column_end":73}},{"value":"/ If the codepoint does not occur in this byte string, then `None` is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80522,"byte_end":80593,"line_start":876,"line_end":876,"column_start":5,"column_end":76}},{"value":"/ returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80598,"byte_end":80611,"line_start":877,"line_end":877,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80616,"byte_end":80619,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ Note that if one searches for the replacement codepoint, `\\u{FFFD}`,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80624,"byte_end":80696,"line_start":879,"line_end":879,"column_start":5,"column_end":77}},{"value":"/ then only explicit occurrences of that encoding will be found. Invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80701,"byte_end":80775,"line_start":880,"line_end":880,"column_start":5,"column_end":79}},{"value":"/ UTF-8 sequences will not be matched.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80780,"byte_end":80820,"line_start":881,"line_end":881,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80825,"byte_end":80828,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80833,"byte_end":80847,"line_start":883,"line_end":883,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80852,"byte_end":80855,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80860,"byte_end":80876,"line_start":885,"line_end":885,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80881,"byte_end":80884,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80889,"byte_end":80896,"line_start":887,"line_end":887,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80901,"byte_end":80930,"line_start":888,"line_end":888,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80935,"byte_end":80938,"line_start":889,"line_end":889,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(10), b\"foo bar baz\".rfind_char('z'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":80943,"byte_end":81000,"line_start":890,"line_end":890,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(Some(6), B(\"αβγγδ\").rfind_char('γ'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81005,"byte_end":81063,"line_start":891,"line_end":891,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(None, b\"foo bar baz\".rfind_char('y'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81068,"byte_end":81121,"line_start":892,"line_end":892,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81126,"byte_end":81133,"line_start":893,"line_end":893,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81138,"byte_end":81147,"line_start":894,"line_end":894,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82540,"byte_end":82552,"line_start":932,"line_end":932,"column_start":8,"column_end":20},"name":"find_byteset","qualname":"::ext_slice::ByteSlice::find_byteset","value":"pub fn find_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of any of the bytes in the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81261,"byte_end":81333,"line_start":899,"line_end":899,"column_start":5,"column_end":77}},{"value":"/ provided set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81338,"byte_end":81355,"line_start":900,"line_end":900,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81360,"byte_end":81363,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81368,"byte_end":81438,"line_start":902,"line_end":902,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81443,"byte_end":81517,"line_start":903,"line_end":903,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81522,"byte_end":81596,"line_start":904,"line_end":904,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81601,"byte_end":81667,"line_start":905,"line_end":905,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81672,"byte_end":81710,"line_start":906,"line_end":906,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81715,"byte_end":81718,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81723,"byte_end":81789,"line_start":908,"line_end":908,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81794,"byte_end":81846,"line_start":909,"line_end":909,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81851,"byte_end":81854,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81859,"byte_end":81875,"line_start":911,"line_end":911,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81880,"byte_end":81883,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81888,"byte_end":81960,"line_start":913,"line_end":913,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":81965,"byte_end":82038,"line_start":914,"line_end":914,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82043,"byte_end":82096,"line_start":915,"line_end":915,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82101,"byte_end":82104,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82109,"byte_end":82178,"line_start":917,"line_end":917,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82183,"byte_end":82198,"line_start":918,"line_end":918,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82203,"byte_end":82206,"line_start":919,"line_end":919,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82211,"byte_end":82225,"line_start":920,"line_end":920,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82230,"byte_end":82233,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82238,"byte_end":82254,"line_start":922,"line_end":922,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82259,"byte_end":82262,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82267,"byte_end":82274,"line_start":924,"line_end":924,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82279,"byte_end":82303,"line_start":925,"line_end":925,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82308,"byte_end":82311,"line_start":926,"line_end":926,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_byteset(b\"zr\"), Some(6));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82316,"byte_end":82376,"line_start":927,"line_end":927,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(b\"foo baz bar\".find_byteset(b\"bzr\"), Some(4));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82381,"byte_end":82442,"line_start":928,"line_end":928,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(None, b\"foo baz bar\".find_byteset(b\"\\t\\n\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82447,"byte_end":82506,"line_start":929,"line_end":929,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82511,"byte_end":82518,"line_start":930,"line_end":930,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82523,"byte_end":82532,"line_start":931,"line_end":931,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83987,"byte_end":84003,"line_start":969,"line_end":969,"column_start":8,"column_end":24},"name":"find_not_byteset","qualname":"::ext_slice::ByteSlice::find_not_byteset","value":"pub fn find_not_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of a byte that is not a member","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82675,"byte_end":82751,"line_start":936,"line_end":936,"column_start":5,"column_end":81}},{"value":"/ of the provided set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82756,"byte_end":82780,"line_start":937,"line_end":937,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82785,"byte_end":82788,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82793,"byte_end":82863,"line_start":939,"line_end":939,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82868,"byte_end":82942,"line_start":940,"line_end":940,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":82947,"byte_end":83021,"line_start":941,"line_end":941,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83026,"byte_end":83092,"line_start":942,"line_end":942,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83097,"byte_end":83135,"line_start":943,"line_end":943,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83140,"byte_end":83143,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83148,"byte_end":83214,"line_start":945,"line_end":945,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83219,"byte_end":83271,"line_start":946,"line_end":946,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83276,"byte_end":83279,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83284,"byte_end":83300,"line_start":948,"line_end":948,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83305,"byte_end":83308,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83313,"byte_end":83385,"line_start":950,"line_end":950,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83390,"byte_end":83463,"line_start":951,"line_end":951,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83468,"byte_end":83521,"line_start":952,"line_end":952,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83526,"byte_end":83529,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83534,"byte_end":83603,"line_start":954,"line_end":954,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83608,"byte_end":83623,"line_start":955,"line_end":955,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83628,"byte_end":83631,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83636,"byte_end":83650,"line_start":957,"line_end":957,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83655,"byte_end":83658,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83663,"byte_end":83679,"line_start":959,"line_end":959,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83684,"byte_end":83687,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83692,"byte_end":83699,"line_start":961,"line_end":961,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83704,"byte_end":83728,"line_start":962,"line_end":962,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83733,"byte_end":83736,"line_start":963,"line_end":963,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".find_not_byteset(b\"fo \"), Some(4));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83741,"byte_end":83806,"line_start":964,"line_end":964,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"\\t\\tbaz bar\".find_not_byteset(b\" \\t\\r\\n\"), Some(2));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83811,"byte_end":83880,"line_start":965,"line_end":965,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(b\"foo\\nbaz\\tbar\".find_not_byteset(b\"\\t\\n\"), Some(0));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83885,"byte_end":83953,"line_start":966,"line_end":966,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83958,"byte_end":83965,"line_start":967,"line_end":967,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":83970,"byte_end":83979,"line_start":968,"line_end":968,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85416,"byte_end":85429,"line_start":1006,"line_end":1006,"column_start":8,"column_end":21},"name":"rfind_byteset","qualname":"::ext_slice::ByteSlice::rfind_byteset","value":"pub fn rfind_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of any of the bytes in the\n provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of any of the bytes in the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84130,"byte_end":84201,"line_start":973,"line_end":973,"column_start":5,"column_end":76}},{"value":"/ provided set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84206,"byte_end":84223,"line_start":974,"line_end":974,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84228,"byte_end":84231,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84236,"byte_end":84306,"line_start":976,"line_end":976,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84311,"byte_end":84385,"line_start":977,"line_end":977,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84390,"byte_end":84464,"line_start":978,"line_end":978,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84469,"byte_end":84535,"line_start":979,"line_end":979,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84540,"byte_end":84578,"line_start":980,"line_end":980,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84583,"byte_end":84586,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and duplicate","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84591,"byte_end":84667,"line_start":982,"line_end":982,"column_start":5,"column_end":81}},{"value":"/ bytes present in its body are ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84672,"byte_end":84714,"line_start":983,"line_end":983,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84719,"byte_end":84722,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84727,"byte_end":84743,"line_start":985,"line_end":985,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84748,"byte_end":84751,"line_start":986,"line_end":986,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84756,"byte_end":84828,"line_start":987,"line_end":987,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84833,"byte_end":84906,"line_start":988,"line_end":988,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84911,"byte_end":84964,"line_start":989,"line_end":989,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84969,"byte_end":84972,"line_start":990,"line_end":990,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":84977,"byte_end":85046,"line_start":991,"line_end":991,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85051,"byte_end":85066,"line_start":992,"line_end":992,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85071,"byte_end":85074,"line_start":993,"line_end":993,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85079,"byte_end":85093,"line_start":994,"line_end":994,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85098,"byte_end":85101,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85106,"byte_end":85122,"line_start":996,"line_end":996,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85127,"byte_end":85130,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85135,"byte_end":85142,"line_start":998,"line_end":998,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85147,"byte_end":85171,"line_start":999,"line_end":999,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85176,"byte_end":85179,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\".rfind_byteset(b\"agb\"), Some(9));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85184,"byte_end":85246,"line_start":1001,"line_end":1001,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"rabz \"), Some(10));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85251,"byte_end":85316,"line_start":1002,"line_end":1002,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_byteset(b\"\\n123\"), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85321,"byte_end":85382,"line_start":1003,"line_end":1003,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85387,"byte_end":85394,"line_start":1004,"line_end":1004,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85399,"byte_end":85408,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86867,"byte_end":86884,"line_start":1043,"line_end":1043,"column_start":8,"column_end":25},"name":"rfind_not_byteset","qualname":"::ext_slice::ByteSlice::rfind_not_byteset","value":"pub fn rfind_not_byteset<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of a byte that is not a member\n of the provided set.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of a byte that is not a member","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85553,"byte_end":85628,"line_start":1010,"line_end":1010,"column_start":5,"column_end":80}},{"value":"/ of the provided set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85633,"byte_end":85657,"line_start":1011,"line_end":1011,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85662,"byte_end":85665,"line_start":1012,"line_end":1012,"column_start":5,"column_end":8}},{"value":"/ The `byteset` may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85670,"byte_end":85740,"line_start":1013,"line_end":1013,"column_start":5,"column_end":75}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`, but","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85745,"byte_end":85819,"line_start":1014,"line_end":1014,"column_start":5,"column_end":79}},{"value":"/ note that passing a `&str` which contains multibyte characters may not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85824,"byte_end":85898,"line_start":1015,"line_end":1015,"column_start":5,"column_end":79}},{"value":"/ behave as you expect: each byte in the `&str` is treated as an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85903,"byte_end":85969,"line_start":1016,"line_end":1016,"column_start":5,"column_end":71}},{"value":"/ individual member of the byte set.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":85974,"byte_end":86012,"line_start":1017,"line_end":1017,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86017,"byte_end":86020,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ Note that order is irrelevant for the `byteset` parameter, and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86025,"byte_end":86091,"line_start":1019,"line_end":1019,"column_start":5,"column_end":71}},{"value":"/ duplicate bytes present in its body are ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86096,"byte_end":86148,"line_start":1020,"line_end":1020,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86153,"byte_end":86156,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86161,"byte_end":86177,"line_start":1022,"line_end":1022,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86182,"byte_end":86185,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86190,"byte_end":86262,"line_start":1024,"line_end":1024,"column_start":5,"column_end":77}},{"value":"/ with respect to both the set of bytes and the haystack. That is, this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86267,"byte_end":86340,"line_start":1025,"line_end":1025,"column_start":5,"column_end":78}},{"value":"/ runs in `O(byteset.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86345,"byte_end":86398,"line_start":1026,"line_end":1026,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86403,"byte_end":86406,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86411,"byte_end":86480,"line_start":1028,"line_end":1028,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86485,"byte_end":86500,"line_start":1029,"line_end":1029,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86505,"byte_end":86508,"line_start":1030,"line_end":1030,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86513,"byte_end":86527,"line_start":1031,"line_end":1031,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86532,"byte_end":86535,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86540,"byte_end":86556,"line_start":1033,"line_end":1033,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86561,"byte_end":86564,"line_start":1034,"line_end":1034,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86569,"byte_end":86576,"line_start":1035,"line_end":1035,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86581,"byte_end":86605,"line_start":1036,"line_end":1036,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86610,"byte_end":86613,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz,\\t\".rfind_not_byteset(b\",\\t\"), Some(10));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86618,"byte_end":86688,"line_start":1038,"line_end":1038,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(b\"foo baz bar\".rfind_not_byteset(b\"rabz \"), Some(2));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86693,"byte_end":86761,"line_start":1039,"line_end":1039,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(None, b\"foo baz bar\".rfind_not_byteset(b\"barfoz \"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86766,"byte_end":86833,"line_start":1040,"line_end":1040,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86838,"byte_end":86845,"line_start":1041,"line_end":1041,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":86850,"byte_end":86859,"line_start":1042,"line_end":1042,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87659,"byte_end":87665,"line_start":1070,"line_end":1070,"column_start":8,"column_end":14},"name":"fields","qualname":"::ext_slice::ByteSlice::fields","value":"pub fn fields(&Self) -> Fields","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous whitespace.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87012,"byte_end":87082,"line_start":1047,"line_end":1047,"column_start":5,"column_end":75}},{"value":"/ contiguous whitespace.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87087,"byte_end":87113,"line_start":1048,"line_end":1048,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87118,"byte_end":87121,"line_start":1049,"line_end":1049,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87126,"byte_end":87139,"line_start":1050,"line_end":1050,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87144,"byte_end":87147,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87152,"byte_end":87168,"line_start":1052,"line_end":1052,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87173,"byte_end":87176,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87181,"byte_end":87188,"line_start":1054,"line_end":1054,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87193,"byte_end":87222,"line_start":1055,"line_end":1055,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87227,"byte_end":87230,"line_start":1056,"line_end":1056,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"  foo\\tbar\\t\\u{2003}\\nquux   \\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87235,"byte_end":87284,"line_start":1057,"line_end":1057,"column_start":5,"column_end":54}},{"value":"/ let fields: Vec<&[u8]> = s.fields().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87289,"byte_end":87339,"line_start":1058,"line_end":1058,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87344,"byte_end":87404,"line_start":1059,"line_end":1059,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87409,"byte_end":87416,"line_start":1060,"line_end":1060,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87421,"byte_end":87424,"line_start":1061,"line_end":1061,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of just whitespace yields no elements:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87429,"byte_end":87496,"line_start":1062,"line_end":1062,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87501,"byte_end":87504,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87509,"byte_end":87516,"line_start":1064,"line_end":1064,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87521,"byte_end":87550,"line_start":1065,"line_end":1065,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87555,"byte_end":87558,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, B(\"  \\n\\t\\u{2003}\\n  \\t\").fields().count());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87563,"byte_end":87625,"line_start":1067,"line_end":1067,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87630,"byte_end":87637,"line_start":1068,"line_end":1068,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87642,"byte_end":87651,"line_start":1069,"line_end":1069,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88647,"byte_end":88658,"line_start":1102,"line_end":1102,"column_start":8,"column_end":19},"name":"fields_with","qualname":"::ext_slice::ByteSlice::fields_with","value":"pub fn fields_with<F: FnMut(char) -> bool>(&Self, F) -> FieldsWith<, F>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the fields in a byte string, separated by\n contiguous codepoints satisfying the given predicate.","sig":null,"attributes":[{"value":"/ Returns an iterator over the fields in a byte string, separated by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87733,"byte_end":87803,"line_start":1074,"line_end":1074,"column_start":5,"column_end":75}},{"value":"/ contiguous codepoints satisfying the given predicate.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87808,"byte_end":87865,"line_start":1075,"line_end":1075,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87870,"byte_end":87873,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then the given closure will","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87878,"byte_end":87949,"line_start":1077,"line_end":1077,"column_start":5,"column_end":76}},{"value":"/ be called with a Unicode replacement codepoint when invalid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":87954,"byte_end":88023,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}},{"value":"/ bytes are seen.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88028,"byte_end":88047,"line_start":1079,"line_end":1079,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88052,"byte_end":88055,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88060,"byte_end":88073,"line_start":1081,"line_end":1081,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88078,"byte_end":88081,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88086,"byte_end":88102,"line_start":1083,"line_end":1083,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88107,"byte_end":88110,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88115,"byte_end":88122,"line_start":1085,"line_end":1085,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88127,"byte_end":88156,"line_start":1086,"line_end":1086,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88161,"byte_end":88164,"line_start":1087,"line_end":1087,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo999999bar1quux123456\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88169,"byte_end":88211,"line_start":1088,"line_end":1088,"column_start":5,"column_end":47}},{"value":"/ let fields: Vec<&[u8]> = s.fields_with(|c| c.is_numeric()).collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88216,"byte_end":88289,"line_start":1089,"line_end":1089,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(fields, vec![B(\"foo\"), B(\"bar\"), B(\"quux\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88294,"byte_end":88354,"line_start":1090,"line_end":1090,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88359,"byte_end":88366,"line_start":1091,"line_end":1091,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88371,"byte_end":88374,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ A byte string consisting of all codepoints satisfying the predicate","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88379,"byte_end":88450,"line_start":1093,"line_end":1093,"column_start":5,"column_end":76}},{"value":"/ yields no elements:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88455,"byte_end":88478,"line_start":1094,"line_end":1094,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88483,"byte_end":88486,"line_start":1095,"line_end":1095,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88491,"byte_end":88498,"line_start":1096,"line_end":1096,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88503,"byte_end":88527,"line_start":1097,"line_end":1097,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88532,"byte_end":88535,"line_start":1098,"line_end":1098,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(0, b\"1911354563\".fields_with(|c| c.is_numeric()).count());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88540,"byte_end":88613,"line_start":1099,"line_end":1099,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88618,"byte_end":88625,"line_start":1100,"line_end":1100,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88630,"byte_end":88639,"line_start":1101,"line_end":1101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":243},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91885,"byte_end":91894,"line_start":1195,"line_end":1195,"column_start":8,"column_end":17},"name":"split_str","qualname":"::ext_slice::ByteSlice::split_str","value":"pub fn split_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B) -> Split","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated\n by the given byte string. Each element yielded is guaranteed not to\n include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88770,"byte_end":88840,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/ by the given byte string. Each element yielded is guaranteed not to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88845,"byte_end":88916,"line_start":1107,"line_end":1107,"column_start":5,"column_end":76}},{"value":"/ include the splitter substring.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88921,"byte_end":88956,"line_start":1108,"line_end":1108,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88961,"byte_end":88964,"line_start":1109,"line_end":1109,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":88969,"byte_end":89038,"line_start":1110,"line_end":1110,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89043,"byte_end":89113,"line_start":1111,"line_end":1111,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89118,"byte_end":89121,"line_start":1112,"line_end":1112,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89126,"byte_end":89140,"line_start":1113,"line_end":1113,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89145,"byte_end":89148,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89153,"byte_end":89169,"line_start":1115,"line_end":1115,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89174,"byte_end":89177,"line_start":1116,"line_end":1116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89182,"byte_end":89189,"line_start":1117,"line_end":1117,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89194,"byte_end":89223,"line_start":1118,"line_end":1118,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89228,"byte_end":89231,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"Mary had a little lamb\".split_str(\" \").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89236,"byte_end":89311,"line_start":1120,"line_end":1120,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89316,"byte_end":89339,"line_start":1121,"line_end":1121,"column_start":5,"column_end":28}},{"value":"/     B(\"Mary\"), B(\"had\"), B(\"a\"), B(\"little\"), B(\"lamb\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89344,"byte_end":89404,"line_start":1122,"line_end":1122,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89409,"byte_end":89416,"line_start":1123,"line_end":1123,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89421,"byte_end":89424,"line_start":1124,"line_end":1124,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".split_str(\"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89429,"byte_end":89482,"line_start":1125,"line_end":1125,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89487,"byte_end":89516,"line_start":1126,"line_end":1126,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89521,"byte_end":89524,"line_start":1127,"line_end":1127,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".split_str(\"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89529,"byte_end":89601,"line_start":1128,"line_end":1128,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89606,"byte_end":89674,"line_start":1129,"line_end":1129,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89679,"byte_end":89682,"line_start":1130,"line_end":1130,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".split_str(\"::\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89687,"byte_end":89761,"line_start":1131,"line_end":1131,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger\"), B(\"leopard\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89766,"byte_end":89827,"line_start":1132,"line_end":1132,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89832,"byte_end":89839,"line_start":1133,"line_end":1133,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89844,"byte_end":89847,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89852,"byte_end":89924,"line_start":1135,"line_end":1135,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89929,"byte_end":89976,"line_start":1136,"line_end":1136,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89981,"byte_end":89984,"line_start":1137,"line_end":1137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":89989,"byte_end":89996,"line_start":1138,"line_end":1138,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90001,"byte_end":90030,"line_start":1139,"line_end":1139,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90035,"byte_end":90038,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".split_str(\"|\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90043,"byte_end":90106,"line_start":1141,"line_end":1141,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90111,"byte_end":90134,"line_start":1142,"line_end":1142,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90139,"byte_end":90205,"line_start":1143,"line_end":1143,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90210,"byte_end":90217,"line_start":1144,"line_end":1144,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90222,"byte_end":90225,"line_start":1145,"line_end":1145,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".split_str(\"/\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90230,"byte_end":90288,"line_start":1146,"line_end":1146,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(x, vec![B(\"(\"), B(\"\"), B(\"\"), B(\")\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90293,"byte_end":90347,"line_start":1147,"line_end":1147,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90352,"byte_end":90359,"line_start":1148,"line_end":1148,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90364,"byte_end":90367,"line_start":1149,"line_end":1149,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90372,"byte_end":90442,"line_start":1150,"line_end":1150,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90447,"byte_end":90459,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90464,"byte_end":90467,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90472,"byte_end":90479,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90484,"byte_end":90513,"line_start":1154,"line_end":1154,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90518,"byte_end":90521,"line_start":1155,"line_end":1155,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".split_str(\"0\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90526,"byte_end":90582,"line_start":1156,"line_end":1156,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90587,"byte_end":90633,"line_start":1157,"line_end":1157,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90638,"byte_end":90645,"line_start":1158,"line_end":1158,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90650,"byte_end":90653,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90658,"byte_end":90732,"line_start":1160,"line_end":1160,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90737,"byte_end":90805,"line_start":1161,"line_end":1161,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90810,"byte_end":90821,"line_start":1162,"line_end":1162,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90826,"byte_end":90829,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90834,"byte_end":90841,"line_start":1164,"line_end":1164,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90846,"byte_end":90875,"line_start":1165,"line_end":1165,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90880,"byte_end":90883,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".split_str(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90888,"byte_end":90944,"line_start":1167,"line_end":1167,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90949,"byte_end":90972,"line_start":1168,"line_end":1168,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"r\"), B(\"u\"), B(\"s\"), B(\"t\"), B(\"\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":90977,"byte_end":91030,"line_start":1169,"line_end":1169,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91035,"byte_end":91042,"line_start":1170,"line_end":1170,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91047,"byte_end":91050,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91055,"byte_end":91127,"line_start":1172,"line_end":1172,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91132,"byte_end":91162,"line_start":1173,"line_end":1173,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").split_str(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91167,"byte_end":91224,"line_start":1174,"line_end":1174,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91229,"byte_end":91252,"line_start":1175,"line_end":1175,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(b\"\\xE2\"), B(b\"\\x98\"), B(b\"\\x83\"), B(\"\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91257,"byte_end":91314,"line_start":1176,"line_end":1176,"column_start":5,"column_end":62}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91319,"byte_end":91326,"line_start":1177,"line_end":1177,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91331,"byte_end":91338,"line_start":1178,"line_end":1178,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91343,"byte_end":91346,"line_start":1179,"line_end":1179,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91351,"byte_end":91421,"line_start":1180,"line_end":1180,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91426,"byte_end":91485,"line_start":1181,"line_end":1181,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91490,"byte_end":91493,"line_start":1182,"line_end":1182,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91498,"byte_end":91505,"line_start":1183,"line_end":1183,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91510,"byte_end":91539,"line_start":1184,"line_end":1184,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91544,"byte_end":91547,"line_start":1185,"line_end":1185,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".split_str(\" \").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91552,"byte_end":91615,"line_start":1186,"line_end":1186,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91620,"byte_end":91643,"line_start":1187,"line_end":1187,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"\"), B(\"\"), B(\"\"), B(\"a\"), B(\"\"), B(\"b\"), B(\"c\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91648,"byte_end":91714,"line_start":1188,"line_end":1188,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91719,"byte_end":91726,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91731,"byte_end":91738,"line_start":1190,"line_end":1190,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91743,"byte_end":91746,"line_start":1191,"line_end":1191,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`. For that behavior, use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91751,"byte_end":91819,"line_start":1192,"line_end":1192,"column_start":5,"column_end":73}},{"value":"/ [`fields`](#method.fields) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91824,"byte_end":91863,"line_start":1193,"line_end":1193,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":91868,"byte_end":91877,"line_start":1194,"line_end":1194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95114,"byte_end":95124,"line_start":1289,"line_end":1289,"column_start":8,"column_end":18},"name":"rsplit_str","qualname":"::ext_slice::ByteSlice::rsplit_str","value":"pub fn rsplit_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, &'a B)\n-> SplitReverse","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over substrings of this byte string, separated by\n the given byte string, in reverse. Each element yielded is guaranteed\n not to include the splitter substring.","sig":null,"attributes":[{"value":"/ Returns an iterator over substrings of this byte string, separated by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92055,"byte_end":92128,"line_start":1202,"line_end":1202,"column_start":5,"column_end":78}},{"value":"/ the given byte string, in reverse. Each element yielded is guaranteed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92133,"byte_end":92206,"line_start":1203,"line_end":1203,"column_start":5,"column_end":78}},{"value":"/ not to include the splitter substring.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92211,"byte_end":92253,"line_start":1204,"line_end":1204,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92258,"byte_end":92261,"line_start":1205,"line_end":1205,"column_start":5,"column_end":8}},{"value":"/ The splitter may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92266,"byte_end":92335,"line_start":1206,"line_end":1206,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92340,"byte_end":92410,"line_start":1207,"line_end":1207,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92415,"byte_end":92418,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92423,"byte_end":92437,"line_start":1209,"line_end":1209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92442,"byte_end":92445,"line_start":1210,"line_end":1210,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92450,"byte_end":92466,"line_start":1211,"line_end":1211,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92471,"byte_end":92474,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92479,"byte_end":92486,"line_start":1213,"line_end":1213,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92491,"byte_end":92520,"line_start":1214,"line_end":1214,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92525,"byte_end":92528,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> =","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92533,"byte_end":92556,"line_start":1216,"line_end":1216,"column_start":5,"column_end":28}},{"value":"/     b\"Mary had a little lamb\".rsplit_str(\" \").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92561,"byte_end":92621,"line_start":1217,"line_end":1217,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92626,"byte_end":92649,"line_start":1218,"line_end":1218,"column_start":5,"column_end":28}},{"value":"/     B(\"lamb\"), B(\"little\"), B(\"a\"), B(\"had\"), B(\"Mary\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92654,"byte_end":92714,"line_start":1219,"line_end":1219,"column_start":5,"column_end":65}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92719,"byte_end":92726,"line_start":1220,"line_end":1220,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92731,"byte_end":92734,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"\".rsplit_str(\"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92739,"byte_end":92793,"line_start":1222,"line_end":1222,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92798,"byte_end":92827,"line_start":1223,"line_end":1223,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92832,"byte_end":92835,"line_start":1224,"line_end":1224,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lionXXtigerXleopard\".rsplit_str(\"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92840,"byte_end":92913,"line_start":1225,"line_end":1225,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"\"), B(\"lion\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92918,"byte_end":92986,"line_start":1226,"line_end":1226,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92991,"byte_end":92994,"line_start":1227,"line_end":1227,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"lion::tiger::leopard\".rsplit_str(\"::\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":92999,"byte_end":93074,"line_start":1228,"line_end":1228,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lion\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93079,"byte_end":93140,"line_start":1229,"line_end":1229,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93145,"byte_end":93152,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93157,"byte_end":93160,"line_start":1231,"line_end":1231,"column_start":5,"column_end":8}},{"value":"/ If a string contains multiple contiguous separators, you will end up","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93165,"byte_end":93237,"line_start":1232,"line_end":1232,"column_start":5,"column_end":77}},{"value":"/ with empty strings yielded by the iterator:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93242,"byte_end":93289,"line_start":1233,"line_end":1233,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93294,"byte_end":93297,"line_start":1234,"line_end":1234,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93302,"byte_end":93309,"line_start":1235,"line_end":1235,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93314,"byte_end":93343,"line_start":1236,"line_end":1236,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93348,"byte_end":93351,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"||||a||b|c\".rsplit_str(\"|\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93356,"byte_end":93420,"line_start":1238,"line_end":1238,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93425,"byte_end":93448,"line_start":1239,"line_end":1239,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93453,"byte_end":93519,"line_start":1240,"line_end":1240,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93524,"byte_end":93531,"line_start":1241,"line_end":1241,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93536,"byte_end":93539,"line_start":1242,"line_end":1242,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"(///)\".rsplit_str(\"/\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93544,"byte_end":93603,"line_start":1243,"line_end":1243,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\")\"), B(\"\"), B(\"\"), B(\"(\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93608,"byte_end":93662,"line_start":1244,"line_end":1244,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93667,"byte_end":93674,"line_start":1245,"line_end":1245,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93679,"byte_end":93682,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ Separators at the start or end of a string are neighbored by empty","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93687,"byte_end":93757,"line_start":1247,"line_end":1247,"column_start":5,"column_end":75}},{"value":"/ strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93762,"byte_end":93774,"line_start":1248,"line_end":1248,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93779,"byte_end":93782,"line_start":1249,"line_end":1249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93787,"byte_end":93794,"line_start":1250,"line_end":1250,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93799,"byte_end":93828,"line_start":1251,"line_end":1251,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93833,"byte_end":93836,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"010\".rsplit_str(\"0\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93841,"byte_end":93898,"line_start":1253,"line_end":1253,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(\"1\"), B(\"\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93903,"byte_end":93949,"line_start":1254,"line_end":1254,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93954,"byte_end":93961,"line_start":1255,"line_end":1255,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93966,"byte_end":93969,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ When the empty string is used as a separator, it splits every **byte**","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":93974,"byte_end":94048,"line_start":1257,"line_end":1257,"column_start":5,"column_end":79}},{"value":"/ in the byte string, along with the beginning and end of the byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94053,"byte_end":94121,"line_start":1258,"line_end":1258,"column_start":5,"column_end":73}},{"value":"/ string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94126,"byte_end":94137,"line_start":1259,"line_end":1259,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94142,"byte_end":94145,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94150,"byte_end":94157,"line_start":1261,"line_end":1261,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94162,"byte_end":94191,"line_start":1262,"line_end":1262,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94196,"byte_end":94199,"line_start":1263,"line_end":1263,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"rust\".rsplit_str(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94204,"byte_end":94261,"line_start":1264,"line_end":1264,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94266,"byte_end":94289,"line_start":1265,"line_end":1265,"column_start":5,"column_end":28}},{"value":"/     B(\"\"), B(\"t\"), B(\"s\"), B(\"u\"), B(\"r\"), B(\"\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94294,"byte_end":94347,"line_start":1266,"line_end":1266,"column_start":5,"column_end":58}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94352,"byte_end":94359,"line_start":1267,"line_end":1267,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94364,"byte_end":94367,"line_start":1268,"line_end":1268,"column_start":5,"column_end":8}},{"value":"/ // Splitting by an empty string is not UTF-8 aware. Elements yielded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94372,"byte_end":94444,"line_start":1269,"line_end":1269,"column_start":5,"column_end":77}},{"value":"/ // may not be valid UTF-8!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94449,"byte_end":94479,"line_start":1270,"line_end":1270,"column_start":5,"column_end":35}},{"value":"/ let x: Vec<&[u8]> = B(\"☃\").rsplit_str(\"\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94484,"byte_end":94542,"line_start":1271,"line_end":1271,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x, vec![B(\"\"), B(b\"\\x83\"), B(b\"\\x98\"), B(b\"\\xE2\"), B(\"\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94547,"byte_end":94621,"line_start":1272,"line_end":1272,"column_start":5,"column_end":79}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94626,"byte_end":94633,"line_start":1273,"line_end":1273,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94638,"byte_end":94641,"line_start":1274,"line_end":1274,"column_start":5,"column_end":8}},{"value":"/ Contiguous separators, especially whitespace, can lead to possibly","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94646,"byte_end":94716,"line_start":1275,"line_end":1275,"column_start":5,"column_end":75}},{"value":"/ surprising behavior. For example, this code is correct:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94721,"byte_end":94780,"line_start":1276,"line_end":1276,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94785,"byte_end":94788,"line_start":1277,"line_end":1277,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94793,"byte_end":94800,"line_start":1278,"line_end":1278,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94805,"byte_end":94834,"line_start":1279,"line_end":1279,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94839,"byte_end":94842,"line_start":1280,"line_end":1280,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<&[u8]> = b\"    a  b c\".rsplit_str(\" \").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94847,"byte_end":94911,"line_start":1281,"line_end":1281,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94916,"byte_end":94939,"line_start":1282,"line_end":1282,"column_start":5,"column_end":28}},{"value":"/     B(\"c\"), B(\"b\"), B(\"\"), B(\"a\"), B(\"\"), B(\"\"), B(\"\"), B(\"\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":94944,"byte_end":95010,"line_start":1283,"line_end":1283,"column_start":5,"column_end":71}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95015,"byte_end":95022,"line_start":1284,"line_end":1284,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95027,"byte_end":95034,"line_start":1285,"line_end":1285,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95039,"byte_end":95042,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ It does *not* give you `[\"a\", \"b\", \"c\"]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95047,"byte_end":95092,"line_start":1287,"line_end":1287,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95097,"byte_end":95106,"line_start":1288,"line_end":1288,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":249},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96723,"byte_end":96733,"line_start":1332,"line_end":1332,"column_start":8,"column_end":18},"name":"splitn_str","qualname":"::ext_slice::ByteSlice::splitn_str","value":"pub fn splitn_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, usize, &'a B)\n-> SplitN","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string. If `limit` substrings are yielded,\n then the last substring will contain the remainder of this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95299,"byte_end":95373,"line_start":1296,"line_end":1296,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string. If `limit` substrings are yielded,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95378,"byte_end":95452,"line_start":1297,"line_end":1297,"column_start":5,"column_end":79}},{"value":"/ then the last substring will contain the remainder of this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95457,"byte_end":95532,"line_start":1298,"line_end":1298,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95537,"byte_end":95540,"line_start":1299,"line_end":1299,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95545,"byte_end":95612,"line_start":1300,"line_end":1300,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95617,"byte_end":95687,"line_start":1301,"line_end":1301,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95692,"byte_end":95695,"line_start":1302,"line_end":1302,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95700,"byte_end":95714,"line_start":1303,"line_end":1303,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95719,"byte_end":95722,"line_start":1304,"line_end":1304,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95727,"byte_end":95743,"line_start":1305,"line_end":1305,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95748,"byte_end":95751,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95756,"byte_end":95763,"line_start":1307,"line_end":1307,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95768,"byte_end":95797,"line_start":1308,"line_end":1308,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95802,"byte_end":95805,"line_start":1309,"line_end":1309,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"Mary had a little lamb\".splitn_str(3, \" \").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95810,"byte_end":95885,"line_start":1310,"line_end":1310,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"Mary\"), B(\"had\"), B(\"a little lamb\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95890,"byte_end":95955,"line_start":1311,"line_end":1311,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95960,"byte_end":95963,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".splitn_str(3, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":95968,"byte_end":96021,"line_start":1313,"line_end":1313,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96026,"byte_end":96055,"line_start":1314,"line_end":1314,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96060,"byte_end":96063,"line_start":1315,"line_end":1315,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".splitn_str(3, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96068,"byte_end":96140,"line_start":1316,"line_end":1316,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"\"), B(\"tigerXleopard\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96145,"byte_end":96207,"line_start":1317,"line_end":1317,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96212,"byte_end":96215,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".splitn_str(2, \"::\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96220,"byte_end":96294,"line_start":1319,"line_end":1319,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(x, vec![B(\"lion\"), B(\"tiger::leopard\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96299,"byte_end":96355,"line_start":1320,"line_end":1320,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96360,"byte_end":96363,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(1, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96368,"byte_end":96428,"line_start":1322,"line_end":1322,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96433,"byte_end":96471,"line_start":1323,"line_end":1323,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96476,"byte_end":96479,"line_start":1324,"line_end":1324,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".splitn_str(2, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96484,"byte_end":96543,"line_start":1325,"line_end":1325,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96548,"byte_end":96585,"line_start":1326,"line_end":1326,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96590,"byte_end":96593,"line_start":1327,"line_end":1327,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".splitn_str(0, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96598,"byte_end":96658,"line_start":1328,"line_end":1328,"column_start":5,"column_end":65}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96663,"byte_end":96689,"line_start":1329,"line_end":1329,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96694,"byte_end":96701,"line_start":1330,"line_end":1330,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96706,"byte_end":96715,"line_start":1331,"line_end":1331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98388,"byte_end":98399,"line_start":1378,"line_end":1378,"column_start":8,"column_end":19},"name":"rsplitn_str","qualname":"::ext_slice::ByteSlice::rsplitn_str","value":"pub fn rsplitn_str<'a, B: ?Sized + AsRef<[u8]>>(&'a Self, usize, &'a B)\n-> SplitNReverse","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator of at most `limit` substrings of this byte string,\n separated by the given byte string, in reverse. If `limit` substrings\n are yielded, then the last substring will contain the remainder of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator of at most `limit` substrings of this byte string,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":96925,"byte_end":96999,"line_start":1340,"line_end":1340,"column_start":5,"column_end":79}},{"value":"/ separated by the given byte string, in reverse. If `limit` substrings","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97004,"byte_end":97077,"line_start":1341,"line_end":1341,"column_start":5,"column_end":78}},{"value":"/ are yielded, then the last substring will contain the remainder of this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97082,"byte_end":97157,"line_start":1342,"line_end":1342,"column_start":5,"column_end":80}},{"value":"/ byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97162,"byte_end":97178,"line_start":1343,"line_end":1343,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97183,"byte_end":97186,"line_start":1344,"line_end":1344,"column_start":5,"column_end":8}},{"value":"/ The needle may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97191,"byte_end":97258,"line_start":1345,"line_end":1345,"column_start":5,"column_end":72}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97263,"byte_end":97333,"line_start":1346,"line_end":1346,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97338,"byte_end":97341,"line_start":1347,"line_end":1347,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97346,"byte_end":97360,"line_start":1348,"line_end":1348,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97365,"byte_end":97368,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97373,"byte_end":97389,"line_start":1350,"line_end":1350,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97394,"byte_end":97397,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97402,"byte_end":97409,"line_start":1352,"line_end":1352,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97414,"byte_end":97443,"line_start":1353,"line_end":1353,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97448,"byte_end":97451,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> =","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97456,"byte_end":97475,"line_start":1355,"line_end":1355,"column_start":5,"column_end":24}},{"value":"/     b\"Mary had a little lamb\".rsplitn_str(3, \" \").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97480,"byte_end":97544,"line_start":1356,"line_end":1356,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(x, vec![B(\"lamb\"), B(\"little\"), B(\"Mary had a\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97549,"byte_end":97614,"line_start":1357,"line_end":1357,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97619,"byte_end":97622,"line_start":1358,"line_end":1358,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97627,"byte_end":97681,"line_start":1359,"line_end":1359,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(x, vec![b\"\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97686,"byte_end":97715,"line_start":1360,"line_end":1360,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97720,"byte_end":97723,"line_start":1361,"line_end":1361,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lionXXtigerXleopard\".rsplitn_str(3, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97728,"byte_end":97801,"line_start":1362,"line_end":1362,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"tiger\"), B(\"lionX\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97806,"byte_end":97868,"line_start":1363,"line_end":1363,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97873,"byte_end":97876,"line_start":1364,"line_end":1364,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"lion::tiger::leopard\".rsplitn_str(2, \"::\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97881,"byte_end":97956,"line_start":1365,"line_end":1365,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(x, vec![B(\"leopard\"), B(\"lion::tiger\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":97961,"byte_end":98017,"line_start":1366,"line_end":1366,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98022,"byte_end":98025,"line_start":1367,"line_end":1367,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(1, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98030,"byte_end":98091,"line_start":1368,"line_end":1368,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(x, vec![B(\"abcXdef\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98096,"byte_end":98134,"line_start":1369,"line_end":1369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98139,"byte_end":98142,"line_start":1370,"line_end":1370,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcdef\".rsplitn_str(2, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98147,"byte_end":98207,"line_start":1371,"line_end":1371,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(x, vec![B(\"abcdef\")]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98212,"byte_end":98249,"line_start":1372,"line_end":1372,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98254,"byte_end":98257,"line_start":1373,"line_end":1373,"column_start":5,"column_end":8}},{"value":"/ let x: Vec<_> = b\"abcXdef\".rsplitn_str(0, \"X\").collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98262,"byte_end":98323,"line_start":1374,"line_end":1374,"column_start":5,"column_end":66}},{"value":"/ assert!(x.is_empty());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98328,"byte_end":98354,"line_start":1375,"line_end":1375,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98359,"byte_end":98366,"line_start":1376,"line_end":1376,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98371,"byte_end":98380,"line_start":1377,"line_end":1377,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99588,"byte_end":99595,"line_start":1422,"line_end":1422,"column_start":8,"column_end":15},"name":"replace","qualname":"::ext_slice::ByteSlice::replace","value":"pub fn replace<N: AsRef<[u8]>, R: AsRef<[u8]>>(&Self, N, R) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement, and\n the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement, and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98605,"byte_end":98680,"line_start":1386,"line_end":1386,"column_start":5,"column_end":80}},{"value":"/ the result as a new `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98685,"byte_end":98719,"line_start":1387,"line_end":1387,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98724,"byte_end":98727,"line_start":1388,"line_end":1388,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98732,"byte_end":98800,"line_start":1389,"line_end":1389,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replace_into`](#method.replace_into) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98805,"byte_end":98872,"line_start":1390,"line_end":1390,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98877,"byte_end":98880,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98885,"byte_end":98899,"line_start":1392,"line_end":1392,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98904,"byte_end":98907,"line_start":1393,"line_end":1393,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98912,"byte_end":98928,"line_start":1394,"line_end":1394,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98933,"byte_end":98936,"line_start":1395,"line_end":1395,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98941,"byte_end":98948,"line_start":1396,"line_end":1396,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98953,"byte_end":98977,"line_start":1397,"line_end":1397,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98982,"byte_end":98985,"line_start":1398,"line_end":1398,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"old\", \"new\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":98990,"byte_end":99039,"line_start":1399,"line_end":1399,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(s, \"this is new\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99044,"byte_end":99088,"line_start":1400,"line_end":1400,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99093,"byte_end":99100,"line_start":1401,"line_end":1401,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99105,"byte_end":99108,"line_start":1402,"line_end":1402,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99113,"byte_end":99148,"line_start":1403,"line_end":1403,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99153,"byte_end":99156,"line_start":1404,"line_end":1404,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99161,"byte_end":99168,"line_start":1405,"line_end":1405,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99173,"byte_end":99197,"line_start":1406,"line_end":1406,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99202,"byte_end":99205,"line_start":1407,"line_end":1407,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\".replace(\"nada nada\", \"limonada\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99210,"byte_end":99270,"line_start":1408,"line_end":1408,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s, \"this is old\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99275,"byte_end":99319,"line_start":1409,"line_end":1409,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99324,"byte_end":99331,"line_start":1410,"line_end":1410,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99336,"byte_end":99339,"line_start":1411,"line_end":1411,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99344,"byte_end":99383,"line_start":1412,"line_end":1412,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99388,"byte_end":99391,"line_start":1413,"line_end":1413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99396,"byte_end":99403,"line_start":1414,"line_end":1414,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99408,"byte_end":99432,"line_start":1415,"line_end":1415,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99437,"byte_end":99440,"line_start":1416,"line_end":1416,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replace(\"\", \"Z\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99445,"byte_end":99481,"line_start":1417,"line_end":1417,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99486,"byte_end":99526,"line_start":1418,"line_end":1418,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99531,"byte_end":99538,"line_start":1419,"line_end":1419,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99543,"byte_end":99566,"line_start":1420,"line_end":1420,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99571,"byte_end":99580,"line_start":1421,"line_end":1421,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100821,"byte_end":100829,"line_start":1468,"line_end":1468,"column_start":8,"column_end":16},"name":"replacen","qualname":"::ext_slice::ByteSlice::replacen","value":"pub fn replacen<N: AsRef<[u8]>, R: AsRef<[u8]>>(&Self, N, R, usize) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and the result as a new `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99855,"byte_end":99923,"line_start":1432,"line_end":1432,"column_start":5,"column_end":73}},{"value":"/ replacement, and the result as a new `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99928,"byte_end":99979,"line_start":1433,"line_end":1433,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99984,"byte_end":99987,"line_start":1434,"line_end":1434,"column_start":5,"column_end":8}},{"value":"/ This routine is useful as a convenience. If you need to reuse an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":99992,"byte_end":100060,"line_start":1435,"line_end":1435,"column_start":5,"column_end":73}},{"value":"/ allocation, use [`replacen_into`](#method.replacen_into) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100065,"byte_end":100134,"line_start":1436,"line_end":1436,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100139,"byte_end":100142,"line_start":1437,"line_end":1437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100147,"byte_end":100161,"line_start":1438,"line_end":1438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100166,"byte_end":100169,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100174,"byte_end":100190,"line_start":1440,"line_end":1440,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100195,"byte_end":100198,"line_start":1441,"line_end":1441,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100203,"byte_end":100210,"line_start":1442,"line_end":1442,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100215,"byte_end":100239,"line_start":1443,"line_end":1443,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100244,"byte_end":100247,"line_start":1444,"line_end":1444,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"o\", \"z\", 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100252,"byte_end":100296,"line_start":1445,"line_end":1445,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"fzzfoo\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100301,"byte_end":100340,"line_start":1446,"line_end":1446,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100345,"byte_end":100352,"line_start":1447,"line_end":1447,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100357,"byte_end":100360,"line_start":1448,"line_end":1448,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100365,"byte_end":100400,"line_start":1449,"line_end":1449,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100405,"byte_end":100408,"line_start":1450,"line_end":1450,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100413,"byte_end":100420,"line_start":1451,"line_end":1451,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100425,"byte_end":100449,"line_start":1452,"line_end":1452,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100454,"byte_end":100457,"line_start":1453,"line_end":1453,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\".replacen(\"a\", \"z\", 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100462,"byte_end":100506,"line_start":1454,"line_end":1454,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(s, \"foofoo\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100511,"byte_end":100550,"line_start":1455,"line_end":1455,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100555,"byte_end":100562,"line_start":1456,"line_end":1456,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100567,"byte_end":100570,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100575,"byte_end":100614,"line_start":1458,"line_end":1458,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100619,"byte_end":100622,"line_start":1459,"line_end":1459,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100627,"byte_end":100634,"line_start":1460,"line_end":1460,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100639,"byte_end":100663,"line_start":1461,"line_end":1461,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100668,"byte_end":100671,"line_start":1462,"line_end":1462,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\".replacen(\"\", \"Z\", 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100676,"byte_end":100716,"line_start":1463,"line_end":1463,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s, \"ZfZoo\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100721,"byte_end":100759,"line_start":1464,"line_end":1464,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100764,"byte_end":100771,"line_start":1465,"line_end":1465,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100776,"byte_end":100799,"line_start":1466,"line_end":1466,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":100804,"byte_end":100813,"line_start":1467,"line_end":1467,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102380,"byte_end":102392,"line_start":1526,"line_end":1526,"column_start":8,"column_end":20},"name":"replace_into","qualname":"::ext_slice::ByteSlice::replace_into","value":"pub fn replace_into<N: AsRef<[u8]>, R: AsRef<[u8]>>(&Self, N, R, &mut Vec<u8>)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Replace all matches of the given needle with the given replacement,\n and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace all matches of the given needle with the given replacement,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101119,"byte_end":101190,"line_start":1479,"line_end":1479,"column_start":5,"column_end":76}},{"value":"/ and write the result into the provided `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101195,"byte_end":101248,"line_start":1480,"line_end":1480,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101253,"byte_end":101256,"line_start":1481,"line_end":1481,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101261,"byte_end":101317,"line_start":1482,"line_end":1482,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101322,"byte_end":101325,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101330,"byte_end":101402,"line_start":1484,"line_end":1484,"column_start":5,"column_end":77}},{"value":"/ API, use [`replace`](#method.replace) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101407,"byte_end":101457,"line_start":1485,"line_end":1485,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101462,"byte_end":101465,"line_start":1486,"line_end":1486,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101470,"byte_end":101484,"line_start":1487,"line_end":1487,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101489,"byte_end":101492,"line_start":1488,"line_end":1488,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101497,"byte_end":101513,"line_start":1489,"line_end":1489,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101518,"byte_end":101521,"line_start":1490,"line_end":1490,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101526,"byte_end":101533,"line_start":1491,"line_end":1491,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101538,"byte_end":101562,"line_start":1492,"line_end":1492,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101567,"byte_end":101570,"line_start":1493,"line_end":1493,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101575,"byte_end":101602,"line_start":1494,"line_end":1494,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101607,"byte_end":101610,"line_start":1495,"line_end":1495,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101615,"byte_end":101641,"line_start":1496,"line_end":1496,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"old\", \"new\", &mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101646,"byte_end":101690,"line_start":1497,"line_end":1497,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"this is new\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101695,"byte_end":101742,"line_start":1498,"line_end":1498,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101747,"byte_end":101754,"line_start":1499,"line_end":1499,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101759,"byte_end":101762,"line_start":1500,"line_end":1500,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101767,"byte_end":101802,"line_start":1501,"line_end":1501,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101807,"byte_end":101810,"line_start":1502,"line_end":1502,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101815,"byte_end":101822,"line_start":1503,"line_end":1503,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101827,"byte_end":101851,"line_start":1504,"line_end":1504,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101856,"byte_end":101859,"line_start":1505,"line_end":1505,"column_start":5,"column_end":8}},{"value":"/ let s = b\"this is old\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101864,"byte_end":101891,"line_start":1506,"line_end":1506,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101896,"byte_end":101899,"line_start":1507,"line_end":1507,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101904,"byte_end":101930,"line_start":1508,"line_end":1508,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"nada nada\", \"limonada\", &mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101935,"byte_end":101990,"line_start":1509,"line_end":1509,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(dest, \"this is old\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":101995,"byte_end":102042,"line_start":1510,"line_end":1510,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102047,"byte_end":102054,"line_start":1511,"line_end":1511,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102059,"byte_end":102062,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102067,"byte_end":102106,"line_start":1513,"line_end":1513,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102111,"byte_end":102114,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102119,"byte_end":102126,"line_start":1515,"line_end":1515,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102131,"byte_end":102155,"line_start":1516,"line_end":1516,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102160,"byte_end":102163,"line_start":1517,"line_end":1517,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102168,"byte_end":102187,"line_start":1518,"line_end":1518,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102192,"byte_end":102195,"line_start":1519,"line_end":1519,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102200,"byte_end":102226,"line_start":1520,"line_end":1520,"column_start":5,"column_end":31}},{"value":"/ s.replace_into(\"\", \"Z\", &mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102231,"byte_end":102270,"line_start":1521,"line_end":1521,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(dest, \"ZfZoZoZ\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102275,"byte_end":102318,"line_start":1522,"line_end":1522,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102323,"byte_end":102330,"line_start":1523,"line_end":1523,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102335,"byte_end":102358,"line_start":1524,"line_end":1524,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102363,"byte_end":102372,"line_start":1525,"line_end":1525,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104123,"byte_end":104136,"line_start":1590,"line_end":1590,"column_start":8,"column_end":21},"name":"replacen_into","qualname":"::ext_slice::ByteSlice::replacen_into","value":"pub fn replacen_into<N: AsRef<[u8]>,\n                     R: AsRef<[u8]>>(&Self, N, R, usize, &mut Vec<u8>)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Replace up to `limit` matches of the given needle with the given\n replacement, and write the result into the provided `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Replace up to `limit` matches of the given needle with the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102879,"byte_end":102947,"line_start":1543,"line_end":1543,"column_start":5,"column_end":73}},{"value":"/ replacement, and write the result into the provided `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":102952,"byte_end":103018,"line_start":1544,"line_end":1544,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103023,"byte_end":103026,"line_start":1545,"line_end":1545,"column_start":5,"column_end":8}},{"value":"/ This does **not** clear `dest` before writing to it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103031,"byte_end":103087,"line_start":1546,"line_end":1546,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103092,"byte_end":103095,"line_start":1547,"line_end":1547,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for reusing allocation. For a more convenient","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103100,"byte_end":103172,"line_start":1548,"line_end":1548,"column_start":5,"column_end":77}},{"value":"/ API, use [`replacen`](#method.replacen) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103177,"byte_end":103229,"line_start":1549,"line_end":1549,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103234,"byte_end":103237,"line_start":1550,"line_end":1550,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103242,"byte_end":103256,"line_start":1551,"line_end":1551,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103261,"byte_end":103264,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103269,"byte_end":103285,"line_start":1553,"line_end":1553,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103290,"byte_end":103293,"line_start":1554,"line_end":1554,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103298,"byte_end":103305,"line_start":1555,"line_end":1555,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103310,"byte_end":103334,"line_start":1556,"line_end":1556,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103339,"byte_end":103342,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103347,"byte_end":103369,"line_start":1558,"line_end":1558,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103374,"byte_end":103377,"line_start":1559,"line_end":1559,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103382,"byte_end":103408,"line_start":1560,"line_end":1560,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"o\", \"z\", 2, &mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103413,"byte_end":103457,"line_start":1561,"line_end":1561,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"fzzfoo\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103462,"byte_end":103504,"line_start":1562,"line_end":1562,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103509,"byte_end":103516,"line_start":1563,"line_end":1563,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103521,"byte_end":103524,"line_start":1564,"line_end":1564,"column_start":5,"column_end":8}},{"value":"/ When the pattern doesn't match:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103529,"byte_end":103564,"line_start":1565,"line_end":1565,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103569,"byte_end":103572,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103577,"byte_end":103584,"line_start":1567,"line_end":1567,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103589,"byte_end":103613,"line_start":1568,"line_end":1568,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103618,"byte_end":103621,"line_start":1569,"line_end":1569,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foofoo\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103626,"byte_end":103648,"line_start":1570,"line_end":1570,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103653,"byte_end":103656,"line_start":1571,"line_end":1571,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103661,"byte_end":103687,"line_start":1572,"line_end":1572,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"a\", \"z\", 2, &mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103692,"byte_end":103736,"line_start":1573,"line_end":1573,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(dest, \"foofoo\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103741,"byte_end":103783,"line_start":1574,"line_end":1574,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103788,"byte_end":103795,"line_start":1575,"line_end":1575,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103800,"byte_end":103803,"line_start":1576,"line_end":1576,"column_start":5,"column_end":8}},{"value":"/ When the needle is an empty string:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103808,"byte_end":103847,"line_start":1577,"line_end":1577,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103852,"byte_end":103855,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103860,"byte_end":103867,"line_start":1579,"line_end":1579,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103872,"byte_end":103896,"line_start":1580,"line_end":1580,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103901,"byte_end":103904,"line_start":1581,"line_end":1581,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foo\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103909,"byte_end":103928,"line_start":1582,"line_end":1582,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103933,"byte_end":103936,"line_start":1583,"line_end":1583,"column_start":5,"column_end":8}},{"value":"/ let mut dest = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103941,"byte_end":103967,"line_start":1584,"line_end":1584,"column_start":5,"column_end":31}},{"value":"/ s.replacen_into(\"\", \"Z\", 2, &mut dest);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":103972,"byte_end":104015,"line_start":1585,"line_end":1585,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dest, \"ZfZoo\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104020,"byte_end":104061,"line_start":1586,"line_end":1586,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104066,"byte_end":104073,"line_start":1587,"line_end":1587,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104078,"byte_end":104101,"line_start":1588,"line_end":1588,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104106,"byte_end":104115,"line_start":1589,"line_end":1589,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":267},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104973,"byte_end":104978,"line_start":1622,"line_end":1622,"column_start":8,"column_end":13},"name":"bytes","qualname":"::ext_slice::ByteSlice::bytes","value":"pub fn bytes(&Self) -> Bytes","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the bytes in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the bytes in this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104657,"byte_end":104716,"line_start":1608,"line_end":1608,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104721,"byte_end":104724,"line_start":1609,"line_end":1609,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104729,"byte_end":104743,"line_start":1610,"line_end":1610,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104748,"byte_end":104751,"line_start":1611,"line_end":1611,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104756,"byte_end":104772,"line_start":1612,"line_end":1612,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104777,"byte_end":104780,"line_start":1613,"line_end":1613,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104785,"byte_end":104792,"line_start":1614,"line_end":1614,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104797,"byte_end":104821,"line_start":1615,"line_end":1615,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104826,"byte_end":104829,"line_start":1616,"line_end":1616,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"foobar\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104834,"byte_end":104857,"line_start":1617,"line_end":1617,"column_start":5,"column_end":28}},{"value":"/ let bytes: Vec<u8> = bs.bytes().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104862,"byte_end":104908,"line_start":1618,"line_end":1618,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(bytes, bs);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104913,"byte_end":104939,"line_start":1619,"line_end":1619,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104944,"byte_end":104951,"line_start":1620,"line_end":1620,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":104956,"byte_end":104965,"line_start":1621,"line_end":1621,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105915,"byte_end":105920,"line_start":1652,"line_end":1652,"column_start":8,"column_end":13},"name":"chars","qualname":"::ext_slice::ByteSlice::chars","value":"pub fn chars(&Self) -> Chars","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105053,"byte_end":105128,"line_start":1626,"line_end":1626,"column_start":5,"column_end":80}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105133,"byte_end":105208,"line_start":1627,"line_end":1627,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105213,"byte_end":105236,"line_start":1628,"line_end":1628,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105241,"byte_end":105244,"line_start":1629,"line_end":1629,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105249,"byte_end":105263,"line_start":1630,"line_end":1630,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105268,"byte_end":105271,"line_start":1631,"line_end":1631,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105276,"byte_end":105292,"line_start":1632,"line_end":1632,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105297,"byte_end":105300,"line_start":1633,"line_end":1633,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105305,"byte_end":105312,"line_start":1634,"line_end":1634,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105317,"byte_end":105341,"line_start":1635,"line_end":1635,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105346,"byte_end":105349,"line_start":1636,"line_end":1636,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105354,"byte_end":105415,"line_start":1637,"line_end":1637,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105420,"byte_end":105468,"line_start":1638,"line_end":1638,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105473,"byte_end":105545,"line_start":1639,"line_end":1639,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105550,"byte_end":105557,"line_start":1640,"line_end":1640,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105562,"byte_end":105565,"line_start":1641,"line_end":1641,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105570,"byte_end":105622,"line_start":1642,"line_end":1642,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105627,"byte_end":105630,"line_start":1643,"line_end":1643,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105635,"byte_end":105642,"line_start":1644,"line_end":1644,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105647,"byte_end":105671,"line_start":1645,"line_end":1645,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105676,"byte_end":105679,"line_start":1646,"line_end":1646,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105684,"byte_end":105745,"line_start":1647,"line_end":1647,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<char> = bs.chars().rev().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105750,"byte_end":105804,"line_start":1648,"line_end":1648,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105809,"byte_end":105881,"line_start":1649,"line_end":1649,"column_start":5,"column_end":72}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105886,"byte_end":105893,"line_start":1650,"line_end":1650,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105898,"byte_end":105907,"line_start":1651,"line_end":1651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":269},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107798,"byte_end":107810,"line_start":1707,"line_end":1707,"column_start":8,"column_end":20},"name":"char_indices","qualname":"::ext_slice::ByteSlice::char_indices","value":"pub fn char_indices(&Self) -> CharIndices","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the Unicode scalar values in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the Unicode scalar values in this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":105986,"byte_end":106060,"line_start":1656,"line_end":1656,"column_start":5,"column_end":79}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106065,"byte_end":106138,"line_start":1657,"line_end":1657,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106143,"byte_end":106218,"line_start":1658,"line_end":1658,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106223,"byte_end":106235,"line_start":1659,"line_end":1659,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106240,"byte_end":106243,"line_start":1660,"line_end":1660,"column_start":5,"column_end":8}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106248,"byte_end":106320,"line_start":1661,"line_end":1661,"column_start":5,"column_end":77}},{"value":"/ provided by the standard library. Aside from working on possibly","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106325,"byte_end":106393,"line_start":1662,"line_end":1662,"column_start":5,"column_end":73}},{"value":"/ invalid UTF-8, this iterator provides both the corresponding starting","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106398,"byte_end":106471,"line_start":1663,"line_end":1663,"column_start":5,"column_end":78}},{"value":"/ and ending byte indices of each codepoint yielded. The ending position","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106476,"byte_end":106550,"line_start":1664,"line_end":1664,"column_start":5,"column_end":79}},{"value":"/ is necessary to slice the original byte string when invalid UTF-8 bytes","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106555,"byte_end":106630,"line_start":1665,"line_end":1665,"column_start":5,"column_end":80}},{"value":"/ are converted into a Unicode replacement codepoint, since a single","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106635,"byte_end":106705,"line_start":1666,"line_end":1666,"column_start":5,"column_end":75}},{"value":"/ replacement codepoint can substitute anywhere from 1 to 3 invalid bytes","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106710,"byte_end":106785,"line_start":1667,"line_end":1667,"column_start":5,"column_end":80}},{"value":"/ (inclusive).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106790,"byte_end":106806,"line_start":1668,"line_end":1668,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106811,"byte_end":106814,"line_start":1669,"line_end":1669,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106819,"byte_end":106833,"line_start":1670,"line_end":1670,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106838,"byte_end":106841,"line_start":1671,"line_end":1671,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106846,"byte_end":106862,"line_start":1672,"line_end":1672,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106867,"byte_end":106870,"line_start":1673,"line_end":1673,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106875,"byte_end":106882,"line_start":1674,"line_end":1674,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106887,"byte_end":106911,"line_start":1675,"line_end":1675,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106916,"byte_end":106919,"line_start":1676,"line_end":1676,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106924,"byte_end":106985,"line_start":1677,"line_end":1677,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs.char_indices().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":106990,"byte_end":107061,"line_start":1678,"line_end":1678,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107066,"byte_end":107093,"line_start":1679,"line_end":1679,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107098,"byte_end":107120,"line_start":1680,"line_end":1680,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107125,"byte_end":107152,"line_start":1681,"line_end":1681,"column_start":5,"column_end":32}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107157,"byte_end":107180,"line_start":1682,"line_end":1682,"column_start":5,"column_end":25}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107185,"byte_end":107213,"line_start":1683,"line_end":1683,"column_start":5,"column_end":33}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107218,"byte_end":107240,"line_start":1684,"line_end":1684,"column_start":5,"column_end":27}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107245,"byte_end":107252,"line_start":1685,"line_end":1685,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107257,"byte_end":107264,"line_start":1686,"line_end":1686,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107269,"byte_end":107272,"line_start":1687,"line_end":1687,"column_start":5,"column_end":8}},{"value":"/ Codepoints can also be iterated over in reverse:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107277,"byte_end":107329,"line_start":1688,"line_end":1688,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107334,"byte_end":107337,"line_start":1689,"line_end":1689,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107342,"byte_end":107349,"line_start":1690,"line_end":1690,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107354,"byte_end":107378,"line_start":1691,"line_end":1691,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107383,"byte_end":107386,"line_start":1692,"line_end":1692,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107391,"byte_end":107452,"line_start":1693,"line_end":1693,"column_start":5,"column_end":66}},{"value":"/ let chars: Vec<(usize, usize, char)> = bs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107457,"byte_end":107502,"line_start":1694,"line_end":1694,"column_start":5,"column_end":50}},{"value":"/     .char_indices()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107507,"byte_end":107530,"line_start":1695,"line_end":1695,"column_start":5,"column_end":28}},{"value":"/     .rev()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107535,"byte_end":107549,"line_start":1696,"line_end":1696,"column_start":5,"column_end":19}},{"value":"/     .collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107554,"byte_end":107573,"line_start":1697,"line_end":1697,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(chars, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107578,"byte_end":107605,"line_start":1698,"line_end":1698,"column_start":5,"column_end":32}},{"value":"/     (10, 11, 'a'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107610,"byte_end":107632,"line_start":1699,"line_end":1699,"column_start":5,"column_end":27}},{"value":"/     (8, 10, '\\u{FFFD}'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107637,"byte_end":107665,"line_start":1700,"line_end":1700,"column_start":5,"column_end":33}},{"value":"/     (4, 8, '𝞃'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107670,"byte_end":107693,"line_start":1701,"line_end":1701,"column_start":5,"column_end":25}},{"value":"/     (3, 4, '\\u{FFFD}'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107698,"byte_end":107725,"line_start":1702,"line_end":1702,"column_start":5,"column_end":32}},{"value":"/     (0, 3, '☃'),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107730,"byte_end":107752,"line_start":1703,"line_end":1703,"column_start":5,"column_end":25}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107757,"byte_end":107764,"line_start":1704,"line_end":1704,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107769,"byte_end":107776,"line_start":1705,"line_end":1705,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107781,"byte_end":107790,"line_start":1706,"line_end":1706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109068,"byte_end":109079,"line_start":1744,"line_end":1744,"column_start":8,"column_end":19},"name":"utf8_chunks","qualname":"::ext_slice::ByteSlice::utf8_chunks","value":"pub fn utf8_chunks(&Self) -> Utf8Chunks","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Iterate over chunks of valid UTF-8.","sig":null,"attributes":[{"value":"/ Iterate over chunks of valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107888,"byte_end":107927,"line_start":1711,"line_end":1711,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107932,"byte_end":107935,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/ The iterator returned yields chunks of valid UTF-8 separated by invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":107940,"byte_end":108015,"line_start":1713,"line_end":1713,"column_start":5,"column_end":80}},{"value":"/ UTF-8 bytes, if they exist. Invalid UTF-8 bytes are always 1-3 bytes,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108020,"byte_end":108093,"line_start":1714,"line_end":1714,"column_start":5,"column_end":78}},{"value":"/ which are determined via the \"substitution of maximal subparts\"","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108098,"byte_end":108165,"line_start":1715,"line_end":1715,"column_start":5,"column_end":72}},{"value":"/ strategy described in the docs for the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108170,"byte_end":108212,"line_start":1716,"line_end":1716,"column_start":5,"column_end":47}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108217,"byte_end":108290,"line_start":1717,"line_end":1717,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108295,"byte_end":108306,"line_start":1718,"line_end":1718,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108311,"byte_end":108314,"line_start":1719,"line_end":1719,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108319,"byte_end":108333,"line_start":1720,"line_end":1720,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108338,"byte_end":108341,"line_start":1721,"line_end":1721,"column_start":5,"column_end":8}},{"value":"/ This example shows how to gather all valid and invalid chunks from a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108346,"byte_end":108418,"line_start":1722,"line_end":1722,"column_start":5,"column_end":77}},{"value":"/ byte slice:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108423,"byte_end":108438,"line_start":1723,"line_end":1723,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108443,"byte_end":108446,"line_start":1724,"line_end":1724,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108451,"byte_end":108458,"line_start":1725,"line_end":1725,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, Utf8Chunk};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108463,"byte_end":108500,"line_start":1726,"line_end":1726,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108505,"byte_end":108508,"line_start":1727,"line_end":1727,"column_start":5,"column_end":8}},{"value":"/ let bytes = b\"foo\\xFD\\xFEbar\\xFF\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108513,"byte_end":108551,"line_start":1728,"line_end":1728,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108556,"byte_end":108559,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ let (mut valid_chunks, mut invalid_chunks) = (vec![], vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108564,"byte_end":108630,"line_start":1730,"line_end":1730,"column_start":5,"column_end":71}},{"value":"/ for chunk in bytes.utf8_chunks() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108635,"byte_end":108673,"line_start":1731,"line_end":1731,"column_start":5,"column_end":43}},{"value":"/     if !chunk.valid().is_empty() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108678,"byte_end":108716,"line_start":1732,"line_end":1732,"column_start":5,"column_end":43}},{"value":"/         valid_chunks.push(chunk.valid());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108721,"byte_end":108766,"line_start":1733,"line_end":1733,"column_start":5,"column_end":50}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108771,"byte_end":108780,"line_start":1734,"line_end":1734,"column_start":5,"column_end":14}},{"value":"/     if !chunk.invalid().is_empty() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108785,"byte_end":108825,"line_start":1735,"line_end":1735,"column_start":5,"column_end":45}},{"value":"/         invalid_chunks.push(chunk.invalid());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108830,"byte_end":108879,"line_start":1736,"line_end":1736,"column_start":5,"column_end":54}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108884,"byte_end":108893,"line_start":1737,"line_end":1737,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108898,"byte_end":108903,"line_start":1738,"line_end":1738,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108908,"byte_end":108911,"line_start":1739,"line_end":1739,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(valid_chunks, vec![\"foo\", \"bar\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108916,"byte_end":108965,"line_start":1740,"line_end":1740,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(invalid_chunks, vec![b\"\\xFD\", b\"\\xFE\", b\"\\xFF\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":108970,"byte_end":109034,"line_start":1741,"line_end":1741,"column_start":5,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109039,"byte_end":109046,"line_start":1742,"line_end":1742,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109051,"byte_end":109060,"line_start":1743,"line_end":1743,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":271},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110125,"byte_end":110134,"line_start":1776,"line_end":1776,"column_start":8,"column_end":17},"name":"graphemes","qualname":"::ext_slice::ByteSlice::graphemes","value":"pub fn graphemes(&Self) -> Graphemes","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the grapheme clusters in this byte string.\n If invalid UTF-8 is encountered, then the Unicode replacement codepoint\n is yielded instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the grapheme clusters in this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109160,"byte_end":109231,"line_start":1748,"line_end":1748,"column_start":5,"column_end":76}},{"value":"/ If invalid UTF-8 is encountered, then the Unicode replacement codepoint","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109236,"byte_end":109311,"line_start":1749,"line_end":1749,"column_start":5,"column_end":80}},{"value":"/ is yielded instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109316,"byte_end":109339,"line_start":1750,"line_end":1750,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109344,"byte_end":109347,"line_start":1751,"line_end":1751,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109352,"byte_end":109366,"line_start":1752,"line_end":1752,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109371,"byte_end":109374,"line_start":1753,"line_end":1753,"column_start":5,"column_end":8}},{"value":"/ This example shows how multiple codepoints can combine to form a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109379,"byte_end":109447,"line_start":1754,"line_end":1754,"column_start":5,"column_end":73}},{"value":"/ single grapheme cluster:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109452,"byte_end":109480,"line_start":1755,"line_end":1755,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109485,"byte_end":109488,"line_start":1756,"line_end":1756,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109493,"byte_end":109500,"line_start":1757,"line_end":1757,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109505,"byte_end":109529,"line_start":1758,"line_end":1758,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109534,"byte_end":109537,"line_start":1759,"line_end":1759,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109542,"byte_end":109604,"line_start":1760,"line_end":1760,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<&str> = bs.graphemes().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109609,"byte_end":109665,"line_start":1761,"line_end":1761,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(vec![\"à̖\", \"🇺🇸\"], graphemes);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109670,"byte_end":109723,"line_start":1762,"line_end":1762,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109728,"byte_end":109735,"line_start":1763,"line_end":1763,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109740,"byte_end":109743,"line_start":1764,"line_end":1764,"column_start":5,"column_end":8}},{"value":"/ This shows that graphemes can be iterated over in reverse:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109748,"byte_end":109810,"line_start":1765,"line_end":1765,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109815,"byte_end":109818,"line_start":1766,"line_end":1766,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109823,"byte_end":109830,"line_start":1767,"line_end":1767,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109835,"byte_end":109859,"line_start":1768,"line_end":1768,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109864,"byte_end":109867,"line_start":1769,"line_end":1769,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109872,"byte_end":109934,"line_start":1770,"line_end":1770,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<&str> = bs.graphemes().rev().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":109939,"byte_end":110001,"line_start":1771,"line_end":1771,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(vec![\"🇺🇸\", \"à̖\"], graphemes);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110006,"byte_end":110059,"line_start":1772,"line_end":1772,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110064,"byte_end":110071,"line_start":1773,"line_end":1773,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110076,"byte_end":110103,"line_start":1774,"line_end":1774,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110108,"byte_end":110117,"line_start":1775,"line_end":1775,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111653,"byte_end":111669,"line_start":1820,"line_end":1820,"column_start":8,"column_end":24},"name":"grapheme_indices","qualname":"::ext_slice::ByteSlice::grapheme_indices","value":"pub fn grapheme_indices(&Self) -> GraphemeIndices","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the grapheme clusters in this byte string\n along with their starting and ending byte index positions. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the grapheme clusters in this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110208,"byte_end":110278,"line_start":1780,"line_end":1780,"column_start":5,"column_end":75}},{"value":"/ along with their starting and ending byte index positions. If invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110283,"byte_end":110356,"line_start":1781,"line_end":1781,"column_start":5,"column_end":78}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110361,"byte_end":110436,"line_start":1782,"line_end":1782,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110441,"byte_end":110453,"line_start":1783,"line_end":1783,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110458,"byte_end":110461,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110466,"byte_end":110480,"line_start":1785,"line_end":1785,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110485,"byte_end":110488,"line_start":1786,"line_end":1786,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110493,"byte_end":110562,"line_start":1787,"line_end":1787,"column_start":5,"column_end":74}},{"value":"/ grapheme cluster:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110567,"byte_end":110588,"line_start":1788,"line_end":1788,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110593,"byte_end":110596,"line_start":1789,"line_end":1789,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110601,"byte_end":110608,"line_start":1790,"line_end":1790,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110613,"byte_end":110637,"line_start":1791,"line_end":1791,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110642,"byte_end":110645,"line_start":1792,"line_end":1792,"column_start":5,"column_end":8}},{"value":"/ let bs = \"a\\u{0300}\\u{0316}\\u{1F1FA}\\u{1F1F8}\".as_bytes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110650,"byte_end":110712,"line_start":1793,"line_end":1793,"column_start":5,"column_end":67}},{"value":"/ let graphemes: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110717,"byte_end":110763,"line_start":1794,"line_end":1794,"column_start":5,"column_end":51}},{"value":"/     bs.grapheme_indices().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110768,"byte_end":110808,"line_start":1795,"line_end":1795,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(vec![(0, 5, \"à̖\"), (5, 13, \"🇺🇸\")], graphemes);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110813,"byte_end":110883,"line_start":1796,"line_end":1796,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110888,"byte_end":110895,"line_start":1797,"line_end":1797,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110900,"byte_end":110903,"line_start":1798,"line_end":1798,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when invalid UTF-8 is enountered. Note","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110908,"byte_end":110982,"line_start":1799,"line_end":1799,"column_start":5,"column_end":79}},{"value":"/ that the offsets are valid indices into the original string, and do","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":110987,"byte_end":111058,"line_start":1800,"line_end":1800,"column_start":5,"column_end":76}},{"value":"/ not necessarily correspond to the length of the `&str` returned!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111063,"byte_end":111131,"line_start":1801,"line_end":1801,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111136,"byte_end":111139,"line_start":1802,"line_end":1802,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111144,"byte_end":111151,"line_start":1803,"line_end":1803,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111156,"byte_end":111191,"line_start":1804,"line_end":1804,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111196,"byte_end":111199,"line_start":1805,"line_end":1805,"column_start":5,"column_end":8}},{"value":"/ let mut bytes = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111204,"byte_end":111231,"line_start":1806,"line_end":1806,"column_start":5,"column_end":32}},{"value":"/ bytes.push_str(\"a\\u{0300}\\u{0316}\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111236,"byte_end":111276,"line_start":1807,"line_end":1807,"column_start":5,"column_end":45}},{"value":"/ bytes.push(b'\\xFF');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111281,"byte_end":111305,"line_start":1808,"line_end":1808,"column_start":5,"column_end":29}},{"value":"/ bytes.push_str(\"\\u{1F1FA}\\u{1F1F8}\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111310,"byte_end":111351,"line_start":1809,"line_end":1809,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111356,"byte_end":111359,"line_start":1810,"line_end":1810,"column_start":5,"column_end":8}},{"value":"/ let graphemes: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111364,"byte_end":111410,"line_start":1811,"line_end":1811,"column_start":5,"column_end":51}},{"value":"/     bytes.grapheme_indices().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111415,"byte_end":111458,"line_start":1812,"line_end":1812,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111463,"byte_end":111478,"line_start":1813,"line_end":1813,"column_start":5,"column_end":20}},{"value":"/     graphemes,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111483,"byte_end":111501,"line_start":1814,"line_end":1814,"column_start":5,"column_end":23}},{"value":"/     vec![(0, 5, \"à̖\"), (5, 6, \"\\u{FFFD}\"), (6, 14, \"🇺🇸\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111506,"byte_end":111576,"line_start":1815,"line_end":1815,"column_start":5,"column_end":67}},{"value":"/ );","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111581,"byte_end":111587,"line_start":1816,"line_end":1816,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111592,"byte_end":111599,"line_start":1817,"line_end":1817,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111604,"byte_end":111631,"line_start":1818,"line_end":1818,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111636,"byte_end":111645,"line_start":1819,"line_end":1819,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":273},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113037,"byte_end":113042,"line_start":1856,"line_end":1856,"column_start":8,"column_end":13},"name":"words","qualname":"::ext_slice::ByteSlice::words","value":"pub fn words(&Self) -> Words","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string. If invalid\n UTF-8 is encountered, then the Unicode replacement codepoint is yielded\n instead.","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string. If invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111755,"byte_end":111825,"line_start":1824,"line_end":1824,"column_start":5,"column_end":75}},{"value":"/ UTF-8 is encountered, then the Unicode replacement codepoint is yielded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111830,"byte_end":111905,"line_start":1825,"line_end":1825,"column_start":5,"column_end":80}},{"value":"/ instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111910,"byte_end":111922,"line_start":1826,"line_end":1826,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111927,"byte_end":111930,"line_start":1827,"line_end":1827,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111935,"byte_end":111957,"line_start":1828,"line_end":1828,"column_start":5,"column_end":27}},{"value":"/ [`words_with_breaks`](trait.ByteSlice.html#method.words_with_breaks),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":111962,"byte_end":112035,"line_start":1829,"line_end":1829,"column_start":5,"column_end":78}},{"value":"/ except it only returns elements that contain a \"word\" character. A word","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112040,"byte_end":112115,"line_start":1830,"line_end":1830,"column_start":5,"column_end":80}},{"value":"/ character is defined by UTS #18 (Annex C) to be the combination of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112120,"byte_end":112194,"line_start":1831,"line_end":1831,"column_start":5,"column_end":79}},{"value":"/ `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112199,"byte_end":112261,"line_start":1832,"line_end":1832,"column_start":5,"column_end":67}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112266,"byte_end":112330,"line_start":1833,"line_end":1833,"column_start":5,"column_end":69}},{"value":"/ categories.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112335,"byte_end":112350,"line_start":1834,"line_end":1834,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112355,"byte_end":112358,"line_start":1835,"line_end":1835,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112363,"byte_end":112431,"line_start":1836,"line_end":1836,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112436,"byte_end":112510,"line_start":1837,"line_end":1837,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112515,"byte_end":112586,"line_start":1838,"line_end":1838,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112591,"byte_end":112594,"line_start":1839,"line_end":1839,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112599,"byte_end":112613,"line_start":1840,"line_end":1840,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112618,"byte_end":112621,"line_start":1841,"line_end":1841,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112626,"byte_end":112642,"line_start":1842,"line_end":1842,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112647,"byte_end":112650,"line_start":1843,"line_end":1843,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112655,"byte_end":112662,"line_start":1844,"line_end":1844,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112667,"byte_end":112691,"line_start":1845,"line_end":1845,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112696,"byte_end":112699,"line_start":1846,"line_end":1846,"column_start":5,"column_end":8}},{"value":"/ let bs = br#\"The quick (\"brown\") fox can't jump 32.3 feet, right?\"#;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112704,"byte_end":112776,"line_start":1847,"line_end":1847,"column_start":5,"column_end":77}},{"value":"/ let words: Vec<&str> = bs.words().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112781,"byte_end":112829,"line_start":1848,"line_end":1848,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112834,"byte_end":112861,"line_start":1849,"line_end":1849,"column_start":5,"column_end":32}},{"value":"/     \"The\", \"quick\", \"brown\", \"fox\", \"can't\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112866,"byte_end":112914,"line_start":1850,"line_end":1850,"column_start":5,"column_end":53}},{"value":"/     \"jump\", \"32.3\", \"feet\", \"right\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112919,"byte_end":112959,"line_start":1851,"line_end":1851,"column_start":5,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112964,"byte_end":112971,"line_start":1852,"line_end":1852,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112976,"byte_end":112983,"line_start":1853,"line_end":1853,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":112988,"byte_end":113015,"line_start":1854,"line_end":1854,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113020,"byte_end":113029,"line_start":1855,"line_end":1855,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114437,"byte_end":114449,"line_start":1894,"line_end":1894,"column_start":8,"column_end":20},"name":"word_indices","qualname":"::ext_slice::ByteSlice::word_indices","value":"pub fn word_indices(&Self) -> WordIndices","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string along with\n their starting and ending byte index positions.","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string along with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113108,"byte_end":113177,"line_start":1860,"line_end":1860,"column_start":5,"column_end":74}},{"value":"/ their starting and ending byte index positions.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113182,"byte_end":113233,"line_start":1861,"line_end":1861,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113238,"byte_end":113241,"line_start":1862,"line_end":1862,"column_start":5,"column_end":8}},{"value":"/ This is similar to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113246,"byte_end":113268,"line_start":1863,"line_end":1863,"column_start":5,"column_end":27}},{"value":"/ [`words_with_break_indices`](trait.ByteSlice.html#method.words_with_break_indices),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113273,"byte_end":113360,"line_start":1864,"line_end":1864,"column_start":5,"column_end":92}},{"value":"/ except it only returns elements that contain a \"word\" character. A word","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113365,"byte_end":113440,"line_start":1865,"line_end":1865,"column_start":5,"column_end":80}},{"value":"/ character is defined by UTS #18 (Annex C) to be the combination of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113445,"byte_end":113519,"line_start":1866,"line_end":1866,"column_start":5,"column_end":79}},{"value":"/ `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113524,"byte_end":113586,"line_start":1867,"line_end":1867,"column_start":5,"column_end":67}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113591,"byte_end":113655,"line_start":1868,"line_end":1868,"column_start":5,"column_end":69}},{"value":"/ categories.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113660,"byte_end":113675,"line_start":1869,"line_end":1869,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113680,"byte_end":113683,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113688,"byte_end":113756,"line_start":1871,"line_end":1871,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113761,"byte_end":113835,"line_start":1872,"line_end":1872,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113840,"byte_end":113911,"line_start":1873,"line_end":1873,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113916,"byte_end":113919,"line_start":1874,"line_end":1874,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113924,"byte_end":113938,"line_start":1875,"line_end":1875,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113943,"byte_end":113946,"line_start":1876,"line_end":1876,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":113951,"byte_end":114020,"line_start":1877,"line_end":1877,"column_start":5,"column_end":74}},{"value":"/ word:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114025,"byte_end":114034,"line_start":1878,"line_end":1878,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114039,"byte_end":114042,"line_start":1879,"line_end":1879,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114047,"byte_end":114054,"line_start":1880,"line_end":1880,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114059,"byte_end":114083,"line_start":1881,"line_end":1881,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114088,"byte_end":114091,"line_start":1882,"line_end":1882,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"can't jump 32.3 feet\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114096,"byte_end":114133,"line_start":1883,"line_end":1883,"column_start":5,"column_end":42}},{"value":"/ let words: Vec<(usize, usize, &str)> = bs.word_indices().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114138,"byte_end":114209,"line_start":1884,"line_end":1884,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114214,"byte_end":114241,"line_start":1885,"line_end":1885,"column_start":5,"column_end":32}},{"value":"/     (0, 5, \"can't\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114246,"byte_end":114270,"line_start":1886,"line_end":1886,"column_start":5,"column_end":29}},{"value":"/     (6, 10, \"jump\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114275,"byte_end":114299,"line_start":1887,"line_end":1887,"column_start":5,"column_end":29}},{"value":"/     (11, 15, \"32.3\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114304,"byte_end":114329,"line_start":1888,"line_end":1888,"column_start":5,"column_end":30}},{"value":"/     (16, 20, \"feet\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114334,"byte_end":114359,"line_start":1889,"line_end":1889,"column_start":5,"column_end":30}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114364,"byte_end":114371,"line_start":1890,"line_end":1890,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114376,"byte_end":114383,"line_start":1891,"line_end":1891,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114388,"byte_end":114415,"line_start":1892,"line_end":1892,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114420,"byte_end":114429,"line_start":1893,"line_end":1893,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":275},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115602,"byte_end":115619,"line_start":1924,"line_end":1924,"column_start":8,"column_end":25},"name":"words_with_breaks","qualname":"::ext_slice::ByteSlice::words_with_breaks","value":"pub fn words_with_breaks(&Self) -> WordsWithBreaks","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the words in this byte string, along with\n all breaks between the words. Concatenating all elements yielded by\n the iterator results in the original string (modulo Unicode replacement\n codepoint substitutions if invalid UTF-8 is encountered).","sig":null,"attributes":[{"value":"/ Returns an iterator over the words in this byte string, along with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114527,"byte_end":114597,"line_start":1898,"line_end":1898,"column_start":5,"column_end":75}},{"value":"/ all breaks between the words. Concatenating all elements yielded by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114602,"byte_end":114673,"line_start":1899,"line_end":1899,"column_start":5,"column_end":76}},{"value":"/ the iterator results in the original string (modulo Unicode replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114678,"byte_end":114753,"line_start":1900,"line_end":1900,"column_start":5,"column_end":80}},{"value":"/ codepoint substitutions if invalid UTF-8 is encountered).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114758,"byte_end":114819,"line_start":1901,"line_end":1901,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114824,"byte_end":114827,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114832,"byte_end":114900,"line_start":1903,"line_end":1903,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114905,"byte_end":114979,"line_start":1904,"line_end":1904,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":114984,"byte_end":115055,"line_start":1905,"line_end":1905,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115060,"byte_end":115063,"line_start":1906,"line_end":1906,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115068,"byte_end":115082,"line_start":1907,"line_end":1907,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115087,"byte_end":115090,"line_start":1908,"line_end":1908,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115095,"byte_end":115111,"line_start":1909,"line_end":1909,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115116,"byte_end":115119,"line_start":1910,"line_end":1910,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115124,"byte_end":115131,"line_start":1911,"line_end":1911,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115136,"byte_end":115160,"line_start":1912,"line_end":1912,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115165,"byte_end":115168,"line_start":1913,"line_end":1913,"column_start":5,"column_end":8}},{"value":"/ let bs = br#\"The quick (\"brown\") fox can't jump 32.3 feet, right?\"#;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115173,"byte_end":115245,"line_start":1914,"line_end":1914,"column_start":5,"column_end":77}},{"value":"/ let words: Vec<&str> = bs.words_with_breaks().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115250,"byte_end":115310,"line_start":1915,"line_end":1915,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115315,"byte_end":115342,"line_start":1916,"line_end":1916,"column_start":5,"column_end":32}},{"value":"/     \"The\", \" \", \"quick\", \" \", \"(\", \"\\\"\", \"brown\", \"\\\"\", \")\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115347,"byte_end":115411,"line_start":1917,"line_end":1917,"column_start":5,"column_end":69}},{"value":"/     \" \", \"fox\", \" \", \"can't\", \" \", \"jump\", \" \", \"32.3\", \" \", \"feet\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115416,"byte_end":115488,"line_start":1918,"line_end":1918,"column_start":5,"column_end":77}},{"value":"/     \",\", \" \", \"right\", \"?\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115493,"byte_end":115524,"line_start":1919,"line_end":1919,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115529,"byte_end":115536,"line_start":1920,"line_end":1920,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115541,"byte_end":115548,"line_start":1921,"line_end":1921,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115553,"byte_end":115580,"line_start":1922,"line_end":1922,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115585,"byte_end":115594,"line_start":1923,"line_end":1923,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116893,"byte_end":116917,"line_start":1961,"line_end":1961,"column_start":8,"column_end":32},"name":"words_with_break_indices","qualname":"::ext_slice::ByteSlice::words_with_break_indices","value":"pub fn words_with_break_indices(&Self) -> WordsWithBreakIndices","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the words and their byte offsets in this\n byte string, along with all breaks between the words. Concatenating\n all elements yielded by the iterator results in the original string\n (modulo Unicode replacement codepoint substitutions if invalid UTF-8 is\n encountered).","sig":null,"attributes":[{"value":"/ Returns an iterator over the words and their byte offsets in this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115705,"byte_end":115774,"line_start":1928,"line_end":1928,"column_start":5,"column_end":74}},{"value":"/ byte string, along with all breaks between the words. Concatenating","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115779,"byte_end":115850,"line_start":1929,"line_end":1929,"column_start":5,"column_end":76}},{"value":"/ all elements yielded by the iterator results in the original string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115855,"byte_end":115926,"line_start":1930,"line_end":1930,"column_start":5,"column_end":76}},{"value":"/ (modulo Unicode replacement codepoint substitutions if invalid UTF-8 is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":115931,"byte_end":116006,"line_start":1931,"line_end":1931,"column_start":5,"column_end":80}},{"value":"/ encountered).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116011,"byte_end":116028,"line_start":1932,"line_end":1932,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116033,"byte_end":116036,"line_start":1933,"line_end":1933,"column_start":5,"column_end":8}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116041,"byte_end":116109,"line_start":1934,"line_end":1934,"column_start":5,"column_end":73}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116114,"byte_end":116188,"line_start":1935,"line_end":1935,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116193,"byte_end":116264,"line_start":1936,"line_end":1936,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116269,"byte_end":116272,"line_start":1937,"line_end":1937,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116277,"byte_end":116291,"line_start":1938,"line_end":1938,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116296,"byte_end":116299,"line_start":1939,"line_end":1939,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the byte offsets of each individual","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116304,"byte_end":116373,"line_start":1940,"line_end":1940,"column_start":5,"column_end":74}},{"value":"/ word:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116378,"byte_end":116387,"line_start":1941,"line_end":1941,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116392,"byte_end":116395,"line_start":1942,"line_end":1942,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116400,"byte_end":116407,"line_start":1943,"line_end":1943,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116412,"byte_end":116436,"line_start":1944,"line_end":1944,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116441,"byte_end":116444,"line_start":1945,"line_end":1945,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"can't jump 32.3 feet\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116449,"byte_end":116486,"line_start":1946,"line_end":1946,"column_start":5,"column_end":42}},{"value":"/ let words: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116491,"byte_end":116533,"line_start":1947,"line_end":1947,"column_start":5,"column_end":47}},{"value":"/     bs.words_with_break_indices().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116538,"byte_end":116586,"line_start":1948,"line_end":1948,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(words, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116591,"byte_end":116618,"line_start":1949,"line_end":1949,"column_start":5,"column_end":32}},{"value":"/     (0, 5, \"can't\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116623,"byte_end":116647,"line_start":1950,"line_end":1950,"column_start":5,"column_end":29}},{"value":"/     (5, 6, \" \"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116652,"byte_end":116672,"line_start":1951,"line_end":1951,"column_start":5,"column_end":25}},{"value":"/     (6, 10, \"jump\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116677,"byte_end":116701,"line_start":1952,"line_end":1952,"column_start":5,"column_end":29}},{"value":"/     (10, 11, \" \"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116706,"byte_end":116728,"line_start":1953,"line_end":1953,"column_start":5,"column_end":27}},{"value":"/     (11, 15, \"32.3\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116733,"byte_end":116758,"line_start":1954,"line_end":1954,"column_start":5,"column_end":30}},{"value":"/     (15, 16, \" \"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116763,"byte_end":116785,"line_start":1955,"line_end":1955,"column_start":5,"column_end":27}},{"value":"/     (16, 20, \"feet\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116790,"byte_end":116815,"line_start":1956,"line_end":1956,"column_start":5,"column_end":30}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116820,"byte_end":116827,"line_start":1957,"line_end":1957,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116832,"byte_end":116839,"line_start":1958,"line_end":1958,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116844,"byte_end":116871,"line_start":1959,"line_end":1959,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":116876,"byte_end":116885,"line_start":1960,"line_end":1960,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118026,"byte_end":118035,"line_start":1993,"line_end":1993,"column_start":8,"column_end":17},"name":"sentences","qualname":"::ext_slice::ByteSlice::sentences","value":"pub fn sentences(&Self) -> Sentences","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the sentences in this byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the sentences in this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117015,"byte_end":117078,"line_start":1965,"line_end":1965,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117083,"byte_end":117086,"line_start":1966,"line_end":1966,"column_start":5,"column_end":8}},{"value":"/ Typically, a sentence will include its trailing punctuation and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117091,"byte_end":117158,"line_start":1967,"line_end":1967,"column_start":5,"column_end":72}},{"value":"/ whitespace. Concatenating all elements yielded by the iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117163,"byte_end":117229,"line_start":1968,"line_end":1968,"column_start":5,"column_end":71}},{"value":"/ results in the original string (modulo Unicode replacement codepoint","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117234,"byte_end":117306,"line_start":1969,"line_end":1969,"column_start":5,"column_end":77}},{"value":"/ substitutions if invalid UTF-8 is encountered).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117311,"byte_end":117362,"line_start":1970,"line_end":1970,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117367,"byte_end":117370,"line_start":1971,"line_end":1971,"column_start":5,"column_end":8}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117375,"byte_end":117447,"line_start":1972,"line_end":1972,"column_start":5,"column_end":77}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117452,"byte_end":117526,"line_start":1973,"line_end":1973,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117531,"byte_end":117602,"line_start":1974,"line_end":1974,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117607,"byte_end":117610,"line_start":1975,"line_end":1975,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117615,"byte_end":117629,"line_start":1976,"line_end":1976,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117634,"byte_end":117637,"line_start":1977,"line_end":1977,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117642,"byte_end":117658,"line_start":1978,"line_end":1978,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117663,"byte_end":117666,"line_start":1979,"line_end":1979,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117671,"byte_end":117678,"line_start":1980,"line_end":1980,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117683,"byte_end":117707,"line_start":1981,"line_end":1981,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117712,"byte_end":117715,"line_start":1982,"line_end":1982,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"I want this. Not that. Right now.\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117720,"byte_end":117770,"line_start":1983,"line_end":1983,"column_start":5,"column_end":55}},{"value":"/ let sentences: Vec<&str> = bs.sentences().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117775,"byte_end":117831,"line_start":1984,"line_end":1984,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(sentences, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117836,"byte_end":117867,"line_start":1985,"line_end":1985,"column_start":5,"column_end":36}},{"value":"/     \"I want this. \",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117872,"byte_end":117896,"line_start":1986,"line_end":1986,"column_start":5,"column_end":29}},{"value":"/     \"Not that. \",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117901,"byte_end":117922,"line_start":1987,"line_end":1987,"column_start":5,"column_end":26}},{"value":"/     \"Right now.\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117927,"byte_end":117948,"line_start":1988,"line_end":1988,"column_start":5,"column_end":26}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117953,"byte_end":117960,"line_start":1989,"line_end":1989,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117965,"byte_end":117972,"line_start":1990,"line_end":1990,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":117977,"byte_end":118004,"line_start":1991,"line_end":1991,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118009,"byte_end":118018,"line_start":1992,"line_end":1992,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119250,"byte_end":119266,"line_start":2027,"line_end":2027,"column_start":8,"column_end":24},"name":"sentence_indices","qualname":"::ext_slice::ByteSlice::sentence_indices","value":"pub fn sentence_indices(&Self) -> SentenceIndices","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns an iterator over the sentences in this byte string along with\n their starting and ending byte index positions.","sig":null,"attributes":[{"value":"/ Returns an iterator over the sentences in this byte string along with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118109,"byte_end":118182,"line_start":1997,"line_end":1997,"column_start":5,"column_end":78}},{"value":"/ their starting and ending byte index positions.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118187,"byte_end":118238,"line_start":1998,"line_end":1998,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118243,"byte_end":118246,"line_start":1999,"line_end":1999,"column_start":5,"column_end":8}},{"value":"/ Typically, a sentence will include its trailing punctuation and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118251,"byte_end":118318,"line_start":2000,"line_end":2000,"column_start":5,"column_end":72}},{"value":"/ whitespace. Concatenating all elements yielded by the iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118323,"byte_end":118389,"line_start":2001,"line_end":2001,"column_start":5,"column_end":71}},{"value":"/ results in the original string (modulo Unicode replacement codepoint","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118394,"byte_end":118466,"line_start":2002,"line_end":2002,"column_start":5,"column_end":77}},{"value":"/ substitutions if invalid UTF-8 is encountered).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118471,"byte_end":118522,"line_start":2003,"line_end":2003,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118527,"byte_end":118530,"line_start":2004,"line_end":2004,"column_start":5,"column_end":8}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118535,"byte_end":118607,"line_start":2005,"line_end":2005,"column_start":5,"column_end":77}},{"value":"/ yields `&str` elements. When invalid UTF-8 is encountered, replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118612,"byte_end":118686,"line_start":2006,"line_end":2006,"column_start":5,"column_end":79}},{"value":"/ codepoints are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118691,"byte_end":118762,"line_start":2007,"line_end":2007,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118767,"byte_end":118770,"line_start":2008,"line_end":2008,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118775,"byte_end":118789,"line_start":2009,"line_end":2009,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118794,"byte_end":118797,"line_start":2010,"line_end":2010,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118802,"byte_end":118818,"line_start":2011,"line_end":2011,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118823,"byte_end":118826,"line_start":2012,"line_end":2012,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118831,"byte_end":118838,"line_start":2013,"line_end":2013,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118843,"byte_end":118867,"line_start":2014,"line_end":2014,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118872,"byte_end":118875,"line_start":2015,"line_end":2015,"column_start":5,"column_end":8}},{"value":"/ let bs = b\"I want this. Not that. Right now.\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118880,"byte_end":118930,"line_start":2016,"line_end":2016,"column_start":5,"column_end":55}},{"value":"/ let sentences: Vec<(usize, usize, &str)> =","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118935,"byte_end":118981,"line_start":2017,"line_end":2017,"column_start":5,"column_end":51}},{"value":"/     bs.sentence_indices().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":118986,"byte_end":119026,"line_start":2018,"line_end":2018,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(sentences, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119031,"byte_end":119062,"line_start":2019,"line_end":2019,"column_start":5,"column_end":36}},{"value":"/     (0, 13, \"I want this. \"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119067,"byte_end":119100,"line_start":2020,"line_end":2020,"column_start":5,"column_end":38}},{"value":"/     (13, 23, \"Not that. \"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119105,"byte_end":119136,"line_start":2021,"line_end":2021,"column_start":5,"column_end":36}},{"value":"/     (23, 33, \"Right now.\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119141,"byte_end":119172,"line_start":2022,"line_end":2022,"column_start":5,"column_end":36}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119177,"byte_end":119184,"line_start":2023,"line_end":2023,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119189,"byte_end":119196,"line_start":2024,"line_end":2024,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119201,"byte_end":119228,"line_start":2025,"line_end":2025,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119233,"byte_end":119242,"line_start":2026,"line_end":2026,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119956,"byte_end":119961,"line_start":2058,"line_end":2058,"column_start":8,"column_end":13},"name":"lines","qualname":"::ext_slice::ByteSlice::lines","value":"pub fn lines(&Self) -> Lines","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119352,"byte_end":119414,"line_start":2031,"line_end":2031,"column_start":5,"column_end":67}},{"value":"/ terminators.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119419,"byte_end":119435,"line_start":2032,"line_end":2032,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119440,"byte_end":119443,"line_start":2033,"line_end":2033,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119448,"byte_end":119522,"line_start":2034,"line_end":2034,"column_start":5,"column_end":79}},{"value":"/ `\\n`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119527,"byte_end":119536,"line_start":2035,"line_end":2035,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119541,"byte_end":119544,"line_start":2036,"line_end":2036,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119549,"byte_end":119563,"line_start":2037,"line_end":2037,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119568,"byte_end":119571,"line_start":2038,"line_end":2038,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119576,"byte_end":119592,"line_start":2039,"line_end":2039,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119597,"byte_end":119600,"line_start":2040,"line_end":2040,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119605,"byte_end":119612,"line_start":2041,"line_end":2041,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119617,"byte_end":119646,"line_start":2042,"line_end":2042,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119651,"byte_end":119654,"line_start":2043,"line_end":2043,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119659,"byte_end":119674,"line_start":2044,"line_end":2044,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119679,"byte_end":119686,"line_start":2045,"line_end":2045,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119691,"byte_end":119694,"line_start":2046,"line_end":2046,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119699,"byte_end":119708,"line_start":2047,"line_end":2047,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119713,"byte_end":119720,"line_start":2048,"line_end":2048,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119725,"byte_end":119728,"line_start":2049,"line_end":2049,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119733,"byte_end":119736,"line_start":2050,"line_end":2050,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119741,"byte_end":119751,"line_start":2051,"line_end":2051,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119756,"byte_end":119804,"line_start":2052,"line_end":2052,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119809,"byte_end":119836,"line_start":2053,"line_end":2053,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\"), B(\"\"), B(\"bar\"), B(\"baz\"), B(\"\"), B(\"\"), B(\"quux\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119841,"byte_end":119910,"line_start":2054,"line_end":2054,"column_start":5,"column_end":74}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119915,"byte_end":119922,"line_start":2055,"line_end":2055,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119927,"byte_end":119934,"line_start":2056,"line_end":2056,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":119939,"byte_end":119948,"line_start":2057,"line_end":2057,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121121,"byte_end":121142,"line_start":2102,"line_end":2102,"column_start":8,"column_end":29},"name":"lines_with_terminator","qualname":"::ext_slice::ByteSlice::lines_with_terminator","value":"pub fn lines_with_terminator(&Self) -> LinesWithTerminator","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their\n terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120027,"byte_end":120091,"line_start":2062,"line_end":2062,"column_start":5,"column_end":69}},{"value":"/ terminators.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120096,"byte_end":120112,"line_start":2063,"line_end":2063,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120117,"byte_end":120120,"line_start":2064,"line_end":2064,"column_start":5,"column_end":8}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120125,"byte_end":120199,"line_start":2065,"line_end":2065,"column_start":5,"column_end":79}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120204,"byte_end":120278,"line_start":2066,"line_end":2066,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120283,"byte_end":120286,"line_start":2067,"line_end":2067,"column_start":5,"column_end":8}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120291,"byte_end":120365,"line_start":2068,"line_end":2068,"column_start":5,"column_end":79}},{"value":"/ byte string. For example, the last line in a byte string may not end","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120370,"byte_end":120442,"line_start":2069,"line_end":2069,"column_start":5,"column_end":77}},{"value":"/ with a line terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120447,"byte_end":120474,"line_start":2070,"line_end":2070,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120479,"byte_end":120482,"line_start":2071,"line_end":2071,"column_start":5,"column_end":8}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120487,"byte_end":120559,"line_start":2072,"line_end":2072,"column_start":5,"column_end":77}},{"value":"/ yield the original byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120564,"byte_end":120599,"line_start":2073,"line_end":2073,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120604,"byte_end":120607,"line_start":2074,"line_end":2074,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120612,"byte_end":120626,"line_start":2075,"line_end":2075,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120631,"byte_end":120634,"line_start":2076,"line_end":2076,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120639,"byte_end":120655,"line_start":2077,"line_end":2077,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120660,"byte_end":120663,"line_start":2078,"line_end":2078,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120668,"byte_end":120675,"line_start":2079,"line_end":2079,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120680,"byte_end":120709,"line_start":2080,"line_end":2080,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120714,"byte_end":120717,"line_start":2081,"line_end":2081,"column_start":5,"column_end":8}},{"value":"/ let s = b\"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120722,"byte_end":120737,"line_start":2082,"line_end":2082,"column_start":5,"column_end":20}},{"value":"/ foo","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120742,"byte_end":120749,"line_start":2083,"line_end":2083,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120754,"byte_end":120757,"line_start":2084,"line_end":2084,"column_start":5,"column_end":8}},{"value":"/ bar\\r","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120762,"byte_end":120771,"line_start":2085,"line_end":2085,"column_start":5,"column_end":14}},{"value":"/ baz","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120776,"byte_end":120783,"line_start":2086,"line_end":2086,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120788,"byte_end":120791,"line_start":2087,"line_end":2087,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120796,"byte_end":120799,"line_start":2088,"line_end":2088,"column_start":5,"column_end":8}},{"value":"/ quux\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120804,"byte_end":120814,"line_start":2089,"line_end":2089,"column_start":5,"column_end":15}},{"value":"/ let lines: Vec<&[u8]> = s.lines_with_terminator().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120819,"byte_end":120883,"line_start":2090,"line_end":2090,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(lines, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120888,"byte_end":120915,"line_start":2091,"line_end":2091,"column_start":5,"column_end":32}},{"value":"/     B(\"foo\\n\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120920,"byte_end":120939,"line_start":2092,"line_end":2092,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120944,"byte_end":120960,"line_start":2093,"line_end":2093,"column_start":5,"column_end":21}},{"value":"/     B(\"bar\\r\\n\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120965,"byte_end":120986,"line_start":2094,"line_end":2094,"column_start":5,"column_end":26}},{"value":"/     B(\"baz\\n\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":120991,"byte_end":121010,"line_start":2095,"line_end":2095,"column_start":5,"column_end":24}},{"value":"/     B(\"\\n\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121015,"byte_end":121031,"line_start":2096,"line_end":2096,"column_start":5,"column_end":21}},{"value":"/     B(\"\\n\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121036,"byte_end":121052,"line_start":2097,"line_end":2097,"column_start":5,"column_end":21}},{"value":"/     B(\"quux\"),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121057,"byte_end":121075,"line_start":2098,"line_end":2098,"column_start":5,"column_end":23}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121080,"byte_end":121087,"line_start":2099,"line_end":2099,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121092,"byte_end":121099,"line_start":2100,"line_end":2100,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121104,"byte_end":121113,"line_start":2101,"line_end":2101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121701,"byte_end":121705,"line_start":2124,"line_end":2124,"column_start":8,"column_end":12},"name":"trim","qualname":"::ext_slice::ByteSlice::trim","value":"pub fn trim(&Self) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing whitespace\n removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing whitespace","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121236,"byte_end":121303,"line_start":2106,"line_end":2106,"column_start":5,"column_end":72}},{"value":"/ removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121308,"byte_end":121320,"line_start":2107,"line_end":2107,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121325,"byte_end":121328,"line_start":2108,"line_end":2108,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121333,"byte_end":121402,"line_start":2109,"line_end":2109,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121407,"byte_end":121428,"line_start":2110,"line_end":2110,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121433,"byte_end":121436,"line_start":2111,"line_end":2111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121441,"byte_end":121455,"line_start":2112,"line_end":2112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121460,"byte_end":121463,"line_start":2113,"line_end":2113,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121468,"byte_end":121484,"line_start":2114,"line_end":2114,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121489,"byte_end":121492,"line_start":2115,"line_end":2115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121497,"byte_end":121504,"line_start":2116,"line_end":2116,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121509,"byte_end":121538,"line_start":2117,"line_end":2117,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121543,"byte_end":121546,"line_start":2118,"line_end":2118,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121551,"byte_end":121590,"line_start":2119,"line_end":2119,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim(), B(\"foo\\tbar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121595,"byte_end":121635,"line_start":2120,"line_end":2120,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121640,"byte_end":121647,"line_start":2121,"line_end":2121,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121652,"byte_end":121679,"line_start":2122,"line_end":2122,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121684,"byte_end":121693,"line_start":2123,"line_end":2123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122234,"byte_end":122244,"line_start":2145,"line_end":2145,"column_start":8,"column_end":18},"name":"trim_start","qualname":"::ext_slice::ByteSlice::trim_start","value":"pub fn trim_start(&Self) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading whitespace removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading whitespace removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121772,"byte_end":121835,"line_start":2128,"line_end":2128,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121840,"byte_end":121843,"line_start":2129,"line_end":2129,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121848,"byte_end":121917,"line_start":2130,"line_end":2130,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121922,"byte_end":121943,"line_start":2131,"line_end":2131,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121948,"byte_end":121951,"line_start":2132,"line_end":2132,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121956,"byte_end":121970,"line_start":2133,"line_end":2133,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121975,"byte_end":121978,"line_start":2134,"line_end":2134,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":121983,"byte_end":121999,"line_start":2135,"line_end":2135,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122004,"byte_end":122007,"line_start":2136,"line_end":2136,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122012,"byte_end":122019,"line_start":2137,"line_end":2137,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122024,"byte_end":122053,"line_start":2138,"line_end":2138,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122058,"byte_end":122061,"line_start":2139,"line_end":2139,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122066,"byte_end":122105,"line_start":2140,"line_end":2140,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim_start(), B(\"foo\\tbar\\t\\u{2003}\\n\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122110,"byte_end":122168,"line_start":2141,"line_end":2141,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122173,"byte_end":122180,"line_start":2142,"line_end":2142,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122185,"byte_end":122212,"line_start":2143,"line_end":2143,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122217,"byte_end":122226,"line_start":2144,"line_end":2144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122815,"byte_end":122823,"line_start":2167,"line_end":2167,"column_start":8,"column_end":16},"name":"trim_end","qualname":"::ext_slice::ByteSlice::trim_end","value":"pub fn trim_end(&Self) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing whitespace removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing whitespace removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122365,"byte_end":122429,"line_start":2150,"line_end":2150,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122434,"byte_end":122437,"line_start":2151,"line_end":2151,"column_start":5,"column_end":8}},{"value":"/ Whitespace is defined according to the terms of the `White_Space`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122442,"byte_end":122511,"line_start":2152,"line_end":2152,"column_start":5,"column_end":74}},{"value":"/ Unicode property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122516,"byte_end":122537,"line_start":2153,"line_end":2153,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122542,"byte_end":122545,"line_start":2154,"line_end":2154,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122550,"byte_end":122564,"line_start":2155,"line_end":2155,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122569,"byte_end":122572,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122577,"byte_end":122593,"line_start":2157,"line_end":2157,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122598,"byte_end":122601,"line_start":2158,"line_end":2158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122606,"byte_end":122613,"line_start":2159,"line_end":2159,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122618,"byte_end":122647,"line_start":2160,"line_end":2160,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122652,"byte_end":122655,"line_start":2161,"line_end":2161,"column_start":5,"column_end":8}},{"value":"/ let s = B(\" foo\\tbar\\t\\u{2003}\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122660,"byte_end":122699,"line_start":2162,"line_end":2162,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(s.trim_end(), B(\" foo\\tbar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122704,"byte_end":122749,"line_start":2163,"line_end":2163,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122754,"byte_end":122761,"line_start":2164,"line_end":2164,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122766,"byte_end":122793,"line_start":2165,"line_end":2165,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122798,"byte_end":122807,"line_start":2166,"line_end":2166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123308,"byte_end":123317,"line_start":2186,"line_end":2186,"column_start":8,"column_end":17},"name":"trim_with","qualname":"::ext_slice::ByteSlice::trim_with","value":"pub fn trim_with<F: FnMut(char) -> bool>(&Self, F) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading and trailing characters\n satisfying the given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading and trailing characters","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":122940,"byte_end":123007,"line_start":2172,"line_end":2172,"column_start":5,"column_end":72}},{"value":"/ satisfying the given predicate removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123012,"byte_end":123055,"line_start":2173,"line_end":2173,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123060,"byte_end":123063,"line_start":2174,"line_end":2174,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123068,"byte_end":123082,"line_start":2175,"line_end":2175,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123087,"byte_end":123090,"line_start":2176,"line_end":2176,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123095,"byte_end":123111,"line_start":2177,"line_end":2177,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123116,"byte_end":123119,"line_start":2178,"line_end":2178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123124,"byte_end":123131,"line_start":2179,"line_end":2179,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123136,"byte_end":123165,"line_start":2180,"line_end":2180,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123170,"byte_end":123173,"line_start":2181,"line_end":2181,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123178,"byte_end":123207,"line_start":2182,"line_end":2182,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_with(|c| c.is_numeric()), B(\"foo5bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123212,"byte_end":123274,"line_start":2183,"line_end":2183,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123279,"byte_end":123286,"line_start":2184,"line_end":2184,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123291,"byte_end":123300,"line_start":2185,"line_end":2185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123813,"byte_end":123828,"line_start":2204,"line_end":2204,"column_start":8,"column_end":23},"name":"trim_start_with","qualname":"::ext_slice::ByteSlice::trim_start_with","value":"pub fn trim_start_with<F: FnMut(char) -> bool>(&Self, F) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return a byte string slice with leading characters satisfying the given\n predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with leading characters satisfying the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123449,"byte_end":123524,"line_start":2190,"line_end":2190,"column_start":5,"column_end":80}},{"value":"/ predicate removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123529,"byte_end":123551,"line_start":2191,"line_end":2191,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123556,"byte_end":123559,"line_start":2192,"line_end":2192,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123564,"byte_end":123578,"line_start":2193,"line_end":2193,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123583,"byte_end":123586,"line_start":2194,"line_end":2194,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123591,"byte_end":123607,"line_start":2195,"line_end":2195,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123612,"byte_end":123615,"line_start":2196,"line_end":2196,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123620,"byte_end":123627,"line_start":2197,"line_end":2197,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123632,"byte_end":123661,"line_start":2198,"line_end":2198,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123666,"byte_end":123669,"line_start":2199,"line_end":2199,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123674,"byte_end":123703,"line_start":2200,"line_end":2200,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_start_with(|c| c.is_numeric()), B(\"foo5bar789\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123708,"byte_end":123779,"line_start":2201,"line_end":2201,"column_start":5,"column_end":76}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123784,"byte_end":123791,"line_start":2202,"line_end":2202,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":123796,"byte_end":123805,"line_start":2203,"line_end":2203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124415,"byte_end":124428,"line_start":2227,"line_end":2227,"column_start":8,"column_end":21},"name":"trim_end_with","qualname":"::ext_slice::ByteSlice::trim_end_with","value":"pub fn trim_end_with<F: FnMut(char) -> bool>(&Self, F) -> &[u8]","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Return a byte string slice with trailing characters satisfying the\n given predicate removed.","sig":null,"attributes":[{"value":"/ Return a byte string slice with trailing characters satisfying the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124052,"byte_end":124122,"line_start":2213,"line_end":2213,"column_start":5,"column_end":75}},{"value":"/ given predicate removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124127,"byte_end":124155,"line_start":2214,"line_end":2214,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124160,"byte_end":124163,"line_start":2215,"line_end":2215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124168,"byte_end":124182,"line_start":2216,"line_end":2216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124187,"byte_end":124190,"line_start":2217,"line_end":2217,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124195,"byte_end":124211,"line_start":2218,"line_end":2218,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124216,"byte_end":124219,"line_start":2219,"line_end":2219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124224,"byte_end":124231,"line_start":2220,"line_end":2220,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124236,"byte_end":124265,"line_start":2221,"line_end":2221,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124270,"byte_end":124273,"line_start":2222,"line_end":2222,"column_start":5,"column_end":8}},{"value":"/ let s = b\"123foo5bar789\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124278,"byte_end":124307,"line_start":2223,"line_end":2223,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s.trim_end_with(|c| c.is_numeric()), B(\"123foo5bar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124312,"byte_end":124381,"line_start":2224,"line_end":2224,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124386,"byte_end":124393,"line_start":2225,"line_end":2225,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124398,"byte_end":124407,"line_start":2226,"line_end":2226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126211,"byte_end":126223,"line_start":2283,"line_end":2283,"column_start":8,"column_end":20},"name":"to_lowercase","qualname":"::ext_slice::ByteSlice::to_lowercase","value":"pub fn to_lowercase(&Self) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the lowercase equivalent of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the lowercase equivalent of this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124658,"byte_end":124729,"line_start":2236,"line_end":2236,"column_start":5,"column_end":76}},{"value":"/ byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124734,"byte_end":124750,"line_start":2237,"line_end":2237,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124755,"byte_end":124758,"line_start":2238,"line_end":2238,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is defined according to the `Lowercase` Unicode","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124763,"byte_end":124838,"line_start":2239,"line_end":2239,"column_start":5,"column_end":80}},{"value":"/ property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124843,"byte_end":124856,"line_start":2240,"line_end":2240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124861,"byte_end":124864,"line_start":2241,"line_end":2241,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no lowercase variant,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124869,"byte_end":124942,"line_start":2242,"line_end":2242,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":124947,"byte_end":125000,"line_start":2243,"line_end":2243,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125005,"byte_end":125008,"line_start":2244,"line_end":2244,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125013,"byte_end":125087,"line_start":2245,"line_end":2245,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125092,"byte_end":125164,"line_start":2246,"line_end":2246,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125169,"byte_end":125242,"line_start":2247,"line_end":2247,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125247,"byte_end":125268,"line_start":2248,"line_end":2248,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125273,"byte_end":125276,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125281,"byte_end":125355,"line_start":2250,"line_end":2250,"column_start":5,"column_end":79}},{"value":"/ [`to_lowercase_into`](#method.to_lowercase_into) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125360,"byte_end":125421,"line_start":2251,"line_end":2251,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125426,"byte_end":125429,"line_start":2252,"line_end":2252,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125434,"byte_end":125448,"line_start":2253,"line_end":2253,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125453,"byte_end":125456,"line_start":2254,"line_end":2254,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125461,"byte_end":125477,"line_start":2255,"line_end":2255,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125482,"byte_end":125485,"line_start":2256,"line_end":2256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125490,"byte_end":125497,"line_start":2257,"line_end":2257,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125502,"byte_end":125531,"line_start":2258,"line_end":2258,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125536,"byte_end":125539,"line_start":2259,"line_end":2259,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125544,"byte_end":125570,"line_start":2260,"line_end":2260,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello β\".as_bytes(), s.to_lowercase().as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125575,"byte_end":125642,"line_start":2261,"line_end":2261,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125647,"byte_end":125654,"line_start":2262,"line_end":2262,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125659,"byte_end":125662,"line_start":2263,"line_end":2263,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125667,"byte_end":125708,"line_start":2264,"line_end":2264,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125713,"byte_end":125716,"line_start":2265,"line_end":2265,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125721,"byte_end":125728,"line_start":2266,"line_end":2266,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125733,"byte_end":125762,"line_start":2267,"line_end":2267,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125767,"byte_end":125770,"line_start":2268,"line_end":2268,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125775,"byte_end":125805,"line_start":2269,"line_end":2269,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(\"农历新年\".as_bytes(), s.to_lowercase().as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125810,"byte_end":125881,"line_start":2270,"line_end":2270,"column_start":5,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125886,"byte_end":125893,"line_start":2271,"line_end":2271,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125898,"byte_end":125901,"line_start":2272,"line_end":2272,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125906,"byte_end":125938,"line_start":2273,"line_end":2273,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125943,"byte_end":125946,"line_start":2274,"line_end":2274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125951,"byte_end":125958,"line_start":2275,"line_end":2275,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125963,"byte_end":125992,"line_start":2276,"line_end":2276,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":125997,"byte_end":126000,"line_start":2277,"line_end":2277,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126005,"byte_end":126045,"line_start":2278,"line_end":2278,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(B(b\"foo\\xFFbar\\xE2\\x98baz\"), s.to_lowercase().as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126050,"byte_end":126123,"line_start":2279,"line_end":2279,"column_start":5,"column_end":78}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126128,"byte_end":126135,"line_start":2280,"line_end":2280,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126140,"byte_end":126189,"line_start":2281,"line_end":2281,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126194,"byte_end":126203,"line_start":2282,"line_end":2282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":128124,"byte_end":128141,"line_start":2345,"line_end":2345,"column_start":8,"column_end":25},"name":"to_lowercase_into","qualname":"::ext_slice::ByteSlice::to_lowercase_into","value":"pub fn to_lowercase_into(&Self, &mut Vec<u8>)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Writes the lowercase equivalent of this byte string into the given\n buffer. The buffer is not cleared before written to.","sig":null,"attributes":[{"value":"/ Writes the lowercase equivalent of this byte string into the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126339,"byte_end":126409,"line_start":2289,"line_end":2289,"column_start":5,"column_end":75}},{"value":"/ buffer. The buffer is not cleared before written to.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126414,"byte_end":126470,"line_start":2290,"line_end":2290,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126475,"byte_end":126478,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is defined according to the `Lowercase`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126483,"byte_end":126550,"line_start":2292,"line_end":2292,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126555,"byte_end":126576,"line_start":2293,"line_end":2293,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126581,"byte_end":126584,"line_start":2294,"line_end":2294,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no lowercase variant,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126589,"byte_end":126662,"line_start":2295,"line_end":2295,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126667,"byte_end":126720,"line_start":2296,"line_end":2296,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126725,"byte_end":126728,"line_start":2297,"line_end":2297,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126733,"byte_end":126807,"line_start":2298,"line_end":2298,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126812,"byte_end":126884,"line_start":2299,"line_end":2299,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126889,"byte_end":126962,"line_start":2300,"line_end":2300,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126967,"byte_end":126988,"line_start":2301,"line_end":2301,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":126993,"byte_end":126996,"line_start":2302,"line_end":2302,"column_start":5,"column_end":8}},{"value":"/ If you don't need to amortize allocation and instead prefer","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127001,"byte_end":127064,"line_start":2303,"line_end":2303,"column_start":5,"column_end":68}},{"value":"/ convenience, then use [`to_lowercase`](#method.to_lowercase) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127069,"byte_end":127142,"line_start":2304,"line_end":2304,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127147,"byte_end":127150,"line_start":2305,"line_end":2305,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127155,"byte_end":127169,"line_start":2306,"line_end":2306,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127174,"byte_end":127177,"line_start":2307,"line_end":2307,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127182,"byte_end":127198,"line_start":2308,"line_end":2308,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127203,"byte_end":127206,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127211,"byte_end":127218,"line_start":2310,"line_end":2310,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127223,"byte_end":127252,"line_start":2311,"line_end":2311,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127257,"byte_end":127260,"line_start":2312,"line_end":2312,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127265,"byte_end":127291,"line_start":2313,"line_end":2313,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127296,"byte_end":127299,"line_start":2314,"line_end":2314,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127304,"byte_end":127329,"line_start":2315,"line_end":2315,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127334,"byte_end":127368,"line_start":2316,"line_end":2316,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(\"hello β\".as_bytes(), buf.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127373,"byte_end":127427,"line_start":2317,"line_end":2317,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127432,"byte_end":127439,"line_start":2318,"line_end":2318,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127444,"byte_end":127447,"line_start":2319,"line_end":2319,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127452,"byte_end":127493,"line_start":2320,"line_end":2320,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127498,"byte_end":127501,"line_start":2321,"line_end":2321,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127506,"byte_end":127513,"line_start":2322,"line_end":2322,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127518,"byte_end":127547,"line_start":2323,"line_end":2323,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127552,"byte_end":127555,"line_start":2324,"line_end":2324,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127560,"byte_end":127590,"line_start":2325,"line_end":2325,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127595,"byte_end":127598,"line_start":2326,"line_end":2326,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127603,"byte_end":127628,"line_start":2327,"line_end":2327,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127633,"byte_end":127667,"line_start":2328,"line_end":2328,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(\"农历新年\".as_bytes(), buf.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127672,"byte_end":127730,"line_start":2329,"line_end":2329,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127735,"byte_end":127742,"line_start":2330,"line_end":2330,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127747,"byte_end":127750,"line_start":2331,"line_end":2331,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127755,"byte_end":127787,"line_start":2332,"line_end":2332,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127792,"byte_end":127795,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127800,"byte_end":127807,"line_start":2334,"line_end":2334,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127812,"byte_end":127841,"line_start":2335,"line_end":2335,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127846,"byte_end":127849,"line_start":2336,"line_end":2336,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127854,"byte_end":127894,"line_start":2337,"line_end":2337,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127899,"byte_end":127902,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127907,"byte_end":127932,"line_start":2339,"line_end":2339,"column_start":5,"column_end":30}},{"value":"/ s.to_lowercase_into(&mut buf);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127937,"byte_end":127971,"line_start":2340,"line_end":2340,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(B(b\"foo\\xFFbar\\xE2\\x98baz\"), buf.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":127976,"byte_end":128036,"line_start":2341,"line_end":2341,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":128041,"byte_end":128048,"line_start":2342,"line_end":2342,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":128053,"byte_end":128102,"line_start":2343,"line_end":2343,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":128107,"byte_end":128116,"line_start":2344,"line_end":2344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130089,"byte_end":130107,"line_start":2400,"line_end":2400,"column_start":8,"column_end":26},"name":"to_ascii_lowercase","qualname":"::ext_slice::ByteSlice::to_ascii_lowercase","value":"pub fn to_ascii_lowercase(&Self) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII lowercase equivalent of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":128979,"byte_end":129051,"line_start":2367,"line_end":2367,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129056,"byte_end":129077,"line_start":2368,"line_end":2368,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129082,"byte_end":129085,"line_start":2369,"line_end":2369,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129090,"byte_end":129163,"line_start":2370,"line_end":2370,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129168,"byte_end":129243,"line_start":2371,"line_end":2371,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129248,"byte_end":129315,"line_start":2372,"line_end":2372,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129320,"byte_end":129369,"line_start":2373,"line_end":2373,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129374,"byte_end":129377,"line_start":2374,"line_end":2374,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129382,"byte_end":129456,"line_start":2375,"line_end":2375,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_lowercase`](#method.make_ascii_lowercase) to perform","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129461,"byte_end":129530,"line_start":2376,"line_end":2376,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129535,"byte_end":129563,"line_start":2377,"line_end":2377,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129568,"byte_end":129571,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129576,"byte_end":129590,"line_start":2379,"line_end":2379,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129595,"byte_end":129598,"line_start":2380,"line_end":2380,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129603,"byte_end":129619,"line_start":2381,"line_end":2381,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129624,"byte_end":129627,"line_start":2382,"line_end":2382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129632,"byte_end":129639,"line_start":2383,"line_end":2383,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129644,"byte_end":129673,"line_start":2384,"line_end":2384,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129678,"byte_end":129681,"line_start":2385,"line_end":2385,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"HELLO Β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129686,"byte_end":129712,"line_start":2386,"line_end":2386,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(\"hello Β\".as_bytes(), s.to_ascii_lowercase().as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129717,"byte_end":129790,"line_start":2387,"line_end":2387,"column_start":5,"column_end":77}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129795,"byte_end":129802,"line_start":2388,"line_end":2388,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129807,"byte_end":129810,"line_start":2389,"line_end":2389,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129815,"byte_end":129847,"line_start":2390,"line_end":2390,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129852,"byte_end":129855,"line_start":2391,"line_end":2391,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129860,"byte_end":129867,"line_start":2392,"line_end":2392,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129872,"byte_end":129901,"line_start":2393,"line_end":2393,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129906,"byte_end":129909,"line_start":2394,"line_end":2394,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129914,"byte_end":129954,"line_start":2395,"line_end":2395,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_lowercase(), B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":129959,"byte_end":130027,"line_start":2396,"line_end":2396,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130032,"byte_end":130039,"line_start":2397,"line_end":2397,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130044,"byte_end":130067,"line_start":2398,"line_end":2398,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130072,"byte_end":130081,"line_start":2399,"line_end":2399,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131162,"byte_end":131182,"line_start":2435,"line_end":2435,"column_start":8,"column_end":28},"name":"make_ascii_lowercase","qualname":"::ext_slice::ByteSlice::make_ascii_lowercase","value":"pub fn make_ascii_lowercase(&mut Self)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Convert this byte string to its lowercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its lowercase ASCII equivalent in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130184,"byte_end":130256,"line_start":2404,"line_end":2404,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130261,"byte_end":130264,"line_start":2405,"line_end":2405,"column_start":5,"column_end":8}},{"value":"/ In this case, lowercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130269,"byte_end":130342,"line_start":2406,"line_end":2406,"column_start":5,"column_end":78}},{"value":"/ letters `A-Z` are converted to `a-z`. All other bytes remain unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130347,"byte_end":130422,"line_start":2407,"line_end":2407,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130427,"byte_end":130430,"line_start":2408,"line_end":2408,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130435,"byte_end":130480,"line_start":2409,"line_end":2409,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130485,"byte_end":130535,"line_start":2410,"line_end":2410,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_lowercase`](#method.to_ascii_lowercase) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130540,"byte_end":130603,"line_start":2411,"line_end":2411,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130608,"byte_end":130611,"line_start":2412,"line_end":2412,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130616,"byte_end":130630,"line_start":2413,"line_end":2413,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130635,"byte_end":130638,"line_start":2414,"line_end":2414,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130643,"byte_end":130659,"line_start":2415,"line_end":2415,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130664,"byte_end":130667,"line_start":2416,"line_end":2416,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130672,"byte_end":130679,"line_start":2417,"line_end":2417,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130684,"byte_end":130708,"line_start":2418,"line_end":2418,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130713,"byte_end":130716,"line_start":2419,"line_end":2419,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"HELLO Β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130721,"byte_end":130765,"line_start":2420,"line_end":2420,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130770,"byte_end":130799,"line_start":2421,"line_end":2421,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, \"hello Β\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130804,"byte_end":130845,"line_start":2422,"line_end":2422,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130850,"byte_end":130857,"line_start":2423,"line_end":2423,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130862,"byte_end":130865,"line_start":2424,"line_end":2424,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130870,"byte_end":130902,"line_start":2425,"line_end":2425,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130907,"byte_end":130910,"line_start":2426,"line_end":2426,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130915,"byte_end":130922,"line_start":2427,"line_end":2427,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130927,"byte_end":130965,"line_start":2428,"line_end":2428,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130970,"byte_end":130973,"line_start":2429,"line_end":2429,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"FOO\\xFFBAR\\xE2\\x98BAZ\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":130978,"byte_end":131042,"line_start":2430,"line_end":2430,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_lowercase();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131047,"byte_end":131076,"line_start":2431,"line_end":2431,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"foo\\xFFbar\\xE2\\x98baz\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131081,"byte_end":131128,"line_start":2432,"line_end":2432,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131133,"byte_end":131140,"line_start":2433,"line_end":2433,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131145,"byte_end":131154,"line_start":2434,"line_end":2434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132763,"byte_end":132775,"line_start":2486,"line_end":2486,"column_start":8,"column_end":20},"name":"to_uppercase","qualname":"::ext_slice::ByteSlice::to_uppercase","value":"pub fn to_uppercase(&Self) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the uppercase equivalent of this\n byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the uppercase equivalent of this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131259,"byte_end":131330,"line_start":2439,"line_end":2439,"column_start":5,"column_end":76}},{"value":"/ byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131335,"byte_end":131351,"line_start":2440,"line_end":2440,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131356,"byte_end":131359,"line_start":2441,"line_end":2441,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is defined according to the `Uppercase`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131364,"byte_end":131431,"line_start":2442,"line_end":2442,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131436,"byte_end":131457,"line_start":2443,"line_end":2443,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131462,"byte_end":131465,"line_start":2444,"line_end":2444,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no uppercase variant,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131470,"byte_end":131543,"line_start":2445,"line_end":2445,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131548,"byte_end":131601,"line_start":2446,"line_end":2446,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131606,"byte_end":131609,"line_start":2447,"line_end":2447,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131614,"byte_end":131688,"line_start":2448,"line_end":2448,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131693,"byte_end":131765,"line_start":2449,"line_end":2449,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131770,"byte_end":131843,"line_start":2450,"line_end":2450,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131848,"byte_end":131869,"line_start":2451,"line_end":2451,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131874,"byte_end":131877,"line_start":2452,"line_end":2452,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131882,"byte_end":131956,"line_start":2453,"line_end":2453,"column_start":5,"column_end":79}},{"value":"/ [`to_uppercase_into`](#method.to_uppercase_into) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":131961,"byte_end":132022,"line_start":2454,"line_end":2454,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132027,"byte_end":132030,"line_start":2455,"line_end":2455,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132035,"byte_end":132049,"line_start":2456,"line_end":2456,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132054,"byte_end":132057,"line_start":2457,"line_end":2457,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132062,"byte_end":132078,"line_start":2458,"line_end":2458,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132083,"byte_end":132086,"line_start":2459,"line_end":2459,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132091,"byte_end":132098,"line_start":2460,"line_end":2460,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132103,"byte_end":132132,"line_start":2461,"line_end":2461,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132137,"byte_end":132140,"line_start":2462,"line_end":2462,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132145,"byte_end":132171,"line_start":2463,"line_end":2463,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_uppercase(), B(\"HELLO Β\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132176,"byte_end":132224,"line_start":2464,"line_end":2464,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132229,"byte_end":132236,"line_start":2465,"line_end":2465,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132241,"byte_end":132244,"line_start":2466,"line_end":2466,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132249,"byte_end":132290,"line_start":2467,"line_end":2467,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132295,"byte_end":132298,"line_start":2468,"line_end":2468,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132303,"byte_end":132310,"line_start":2469,"line_end":2469,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132315,"byte_end":132344,"line_start":2470,"line_end":2470,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132349,"byte_end":132352,"line_start":2471,"line_end":2471,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132357,"byte_end":132387,"line_start":2472,"line_end":2472,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s.to_uppercase(), B(\"农历新年\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132392,"byte_end":132444,"line_start":2473,"line_end":2473,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132449,"byte_end":132456,"line_start":2474,"line_end":2474,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132461,"byte_end":132464,"line_start":2475,"line_end":2475,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132469,"byte_end":132501,"line_start":2476,"line_end":2476,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132506,"byte_end":132509,"line_start":2477,"line_end":2477,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132514,"byte_end":132521,"line_start":2478,"line_end":2478,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132526,"byte_end":132555,"line_start":2479,"line_end":2479,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132560,"byte_end":132563,"line_start":2480,"line_end":2480,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132568,"byte_end":132608,"line_start":2481,"line_end":2481,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132613,"byte_end":132675,"line_start":2482,"line_end":2482,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132680,"byte_end":132687,"line_start":2483,"line_end":2483,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132692,"byte_end":132741,"line_start":2484,"line_end":2484,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132746,"byte_end":132755,"line_start":2485,"line_end":2485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134627,"byte_end":134644,"line_start":2548,"line_end":2548,"column_start":8,"column_end":25},"name":"to_uppercase_into","qualname":"::ext_slice::ByteSlice::to_uppercase_into","value":"pub fn to_uppercase_into(&Self, &mut Vec<u8>)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Writes the uppercase equivalent of this byte string into the given\n buffer. The buffer is not cleared before written to.","sig":null,"attributes":[{"value":"/ Writes the uppercase equivalent of this byte string into the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132891,"byte_end":132961,"line_start":2492,"line_end":2492,"column_start":5,"column_end":75}},{"value":"/ buffer. The buffer is not cleared before written to.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":132966,"byte_end":133022,"line_start":2493,"line_end":2493,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133027,"byte_end":133030,"line_start":2494,"line_end":2494,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is defined according to the `Uppercase`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133035,"byte_end":133102,"line_start":2495,"line_end":2495,"column_start":5,"column_end":72}},{"value":"/ Unicode property.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133107,"byte_end":133128,"line_start":2496,"line_end":2496,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133133,"byte_end":133136,"line_start":2497,"line_end":2497,"column_start":5,"column_end":8}},{"value":"/ If invalid UTF-8 is seen, or if a character has no uppercase variant,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133141,"byte_end":133214,"line_start":2498,"line_end":2498,"column_start":5,"column_end":78}},{"value":"/ then it is written to the given buffer unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133219,"byte_end":133272,"line_start":2499,"line_end":2499,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133277,"byte_end":133280,"line_start":2500,"line_end":2500,"column_start":5,"column_end":8}},{"value":"/ Note that some characters in this byte string may expand into multiple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133285,"byte_end":133359,"line_start":2501,"line_end":2501,"column_start":5,"column_end":79}},{"value":"/ characters when changing the case, so the number of bytes written to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133364,"byte_end":133436,"line_start":2502,"line_end":2502,"column_start":5,"column_end":77}},{"value":"/ the given byte string may not be equivalent to the number of bytes in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133441,"byte_end":133514,"line_start":2503,"line_end":2503,"column_start":5,"column_end":78}},{"value":"/ this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133519,"byte_end":133540,"line_start":2504,"line_end":2504,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133545,"byte_end":133548,"line_start":2505,"line_end":2505,"column_start":5,"column_end":8}},{"value":"/ If you don't need to amortize allocation and instead prefer","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133553,"byte_end":133616,"line_start":2506,"line_end":2506,"column_start":5,"column_end":68}},{"value":"/ convenience, then use [`to_uppercase`](#method.to_uppercase) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133621,"byte_end":133694,"line_start":2507,"line_end":2507,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133699,"byte_end":133702,"line_start":2508,"line_end":2508,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133707,"byte_end":133721,"line_start":2509,"line_end":2509,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133726,"byte_end":133729,"line_start":2510,"line_end":2510,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133734,"byte_end":133750,"line_start":2511,"line_end":2511,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133755,"byte_end":133758,"line_start":2512,"line_end":2512,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133763,"byte_end":133770,"line_start":2513,"line_end":2513,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133775,"byte_end":133804,"line_start":2514,"line_end":2514,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133809,"byte_end":133812,"line_start":2515,"line_end":2515,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133817,"byte_end":133843,"line_start":2516,"line_end":2516,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133848,"byte_end":133851,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133856,"byte_end":133881,"line_start":2518,"line_end":2518,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133886,"byte_end":133920,"line_start":2519,"line_end":2519,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(\"HELLO Β\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133925,"byte_end":133960,"line_start":2520,"line_end":2520,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133965,"byte_end":133972,"line_start":2521,"line_end":2521,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133977,"byte_end":133980,"line_start":2522,"line_end":2522,"column_start":5,"column_end":8}},{"value":"/ Scripts without case are not changed:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":133985,"byte_end":134026,"line_start":2523,"line_end":2523,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134031,"byte_end":134034,"line_start":2524,"line_end":2524,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134039,"byte_end":134046,"line_start":2525,"line_end":2525,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134051,"byte_end":134080,"line_start":2526,"line_end":2526,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134085,"byte_end":134088,"line_start":2527,"line_end":2527,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"农历新年\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134093,"byte_end":134123,"line_start":2528,"line_end":2528,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134128,"byte_end":134131,"line_start":2529,"line_end":2529,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134136,"byte_end":134161,"line_start":2530,"line_end":2530,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134166,"byte_end":134200,"line_start":2531,"line_end":2531,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(\"农历新年\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134205,"byte_end":134244,"line_start":2532,"line_end":2532,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134249,"byte_end":134256,"line_start":2533,"line_end":2533,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134261,"byte_end":134264,"line_start":2534,"line_end":2534,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134269,"byte_end":134301,"line_start":2535,"line_end":2535,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134306,"byte_end":134309,"line_start":2536,"line_end":2536,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134314,"byte_end":134321,"line_start":2537,"line_end":2537,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134326,"byte_end":134355,"line_start":2538,"line_end":2538,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134360,"byte_end":134363,"line_start":2539,"line_end":2539,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134368,"byte_end":134408,"line_start":2540,"line_end":2540,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134413,"byte_end":134416,"line_start":2541,"line_end":2541,"column_start":5,"column_end":8}},{"value":"/ let mut buf = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134421,"byte_end":134446,"line_start":2542,"line_end":2542,"column_start":5,"column_end":30}},{"value":"/ s.to_uppercase_into(&mut buf);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134451,"byte_end":134485,"line_start":2543,"line_end":2543,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(buf, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134490,"byte_end":134539,"line_start":2544,"line_end":2544,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134544,"byte_end":134551,"line_start":2545,"line_end":2545,"column_start":5,"column_end":12}},{"value":"cfg(all(feature = \"std\", feature = \"unicode\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134556,"byte_end":134605,"line_start":2546,"line_end":2546,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":134610,"byte_end":134619,"line_start":2547,"line_end":2547,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136503,"byte_end":136521,"line_start":2600,"line_end":2600,"column_start":8,"column_end":26},"name":"to_ascii_uppercase","qualname":"::ext_slice::ByteSlice::to_ascii_uppercase","value":"pub fn to_ascii_uppercase(&Self) -> Vec<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of\n this byte string.","sig":null,"attributes":[{"value":"/ Returns a new `Vec<u8>` containing the ASCII uppercase equivalent of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135412,"byte_end":135484,"line_start":2567,"line_end":2567,"column_start":5,"column_end":77}},{"value":"/ this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135489,"byte_end":135510,"line_start":2568,"line_end":2568,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135515,"byte_end":135518,"line_start":2569,"line_end":2569,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135523,"byte_end":135596,"line_start":2570,"line_end":2570,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135601,"byte_end":135676,"line_start":2571,"line_end":2571,"column_start":5,"column_end":80}},{"value":"/ In particular, the length of the byte string returned is always","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135681,"byte_end":135748,"line_start":2572,"line_end":2572,"column_start":5,"column_end":72}},{"value":"/ equivalent to the length of this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135753,"byte_end":135802,"line_start":2573,"line_end":2573,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135807,"byte_end":135810,"line_start":2574,"line_end":2574,"column_start":5,"column_end":8}},{"value":"/ If you'd like to reuse an allocation for performance reasons, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135815,"byte_end":135889,"line_start":2575,"line_end":2575,"column_start":5,"column_end":79}},{"value":"/ [`make_ascii_uppercase`](#method.make_ascii_uppercase) to perform","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135894,"byte_end":135963,"line_start":2576,"line_end":2576,"column_start":5,"column_end":74}},{"value":"/ the conversion in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":135968,"byte_end":135996,"line_start":2577,"line_end":2577,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136001,"byte_end":136004,"line_start":2578,"line_end":2578,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136009,"byte_end":136023,"line_start":2579,"line_end":2579,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136028,"byte_end":136031,"line_start":2580,"line_end":2580,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136036,"byte_end":136052,"line_start":2581,"line_end":2581,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136057,"byte_end":136060,"line_start":2582,"line_end":2582,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136065,"byte_end":136072,"line_start":2583,"line_end":2583,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136077,"byte_end":136106,"line_start":2584,"line_end":2584,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136111,"byte_end":136114,"line_start":2585,"line_end":2585,"column_start":5,"column_end":8}},{"value":"/ let s = B(\"hello β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136119,"byte_end":136145,"line_start":2586,"line_end":2586,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(\"HELLO β\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136150,"byte_end":136204,"line_start":2587,"line_end":2587,"column_start":5,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136209,"byte_end":136216,"line_start":2588,"line_end":2588,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136221,"byte_end":136224,"line_start":2589,"line_end":2589,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136229,"byte_end":136261,"line_start":2590,"line_end":2590,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136266,"byte_end":136269,"line_start":2591,"line_end":2591,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136274,"byte_end":136281,"line_start":2592,"line_end":2592,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136286,"byte_end":136315,"line_start":2593,"line_end":2593,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136320,"byte_end":136323,"line_start":2594,"line_end":2594,"column_start":5,"column_end":8}},{"value":"/ let s = B(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136328,"byte_end":136368,"line_start":2595,"line_end":2595,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.to_ascii_uppercase(), B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136373,"byte_end":136441,"line_start":2596,"line_end":2596,"column_start":5,"column_end":73}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136446,"byte_end":136453,"line_start":2597,"line_end":2597,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136458,"byte_end":136481,"line_start":2598,"line_end":2598,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136486,"byte_end":136495,"line_start":2599,"line_end":2599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137573,"byte_end":137593,"line_start":2635,"line_end":2635,"column_start":8,"column_end":28},"name":"make_ascii_uppercase","qualname":"::ext_slice::ByteSlice::make_ascii_uppercase","value":"pub fn make_ascii_uppercase(&mut Self)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Convert this byte string to its uppercase ASCII equivalent in place.","sig":null,"attributes":[{"value":"/ Convert this byte string to its uppercase ASCII equivalent in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136598,"byte_end":136670,"line_start":2604,"line_end":2604,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136675,"byte_end":136678,"line_start":2605,"line_end":2605,"column_start":5,"column_end":8}},{"value":"/ In this case, uppercase is only defined in ASCII letters. Namely, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136683,"byte_end":136756,"line_start":2606,"line_end":2606,"column_start":5,"column_end":78}},{"value":"/ letters `a-z` are converted to `A-Z`. All other bytes remain unchanged.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136761,"byte_end":136836,"line_start":2607,"line_end":2607,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136841,"byte_end":136844,"line_start":2608,"line_end":2608,"column_start":5,"column_end":8}},{"value":"/ If you don't need to do the conversion in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136849,"byte_end":136894,"line_start":2609,"line_end":2609,"column_start":5,"column_end":50}},{"value":"/ place and instead prefer convenience, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136899,"byte_end":136949,"line_start":2610,"line_end":2610,"column_start":5,"column_end":55}},{"value":"/ [`to_ascii_uppercase`](#method.to_ascii_uppercase) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":136954,"byte_end":137017,"line_start":2611,"line_end":2611,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137022,"byte_end":137025,"line_start":2612,"line_end":2612,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137030,"byte_end":137044,"line_start":2613,"line_end":2613,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137049,"byte_end":137052,"line_start":2614,"line_end":2614,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137057,"byte_end":137073,"line_start":2615,"line_end":2615,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137078,"byte_end":137081,"line_start":2616,"line_end":2616,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137086,"byte_end":137093,"line_start":2617,"line_end":2617,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137098,"byte_end":137127,"line_start":2618,"line_end":2618,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137132,"byte_end":137135,"line_start":2619,"line_end":2619,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello β\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137140,"byte_end":137184,"line_start":2620,"line_end":2620,"column_start":5,"column_end":48}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137189,"byte_end":137218,"line_start":2621,"line_end":2621,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(\"HELLO β\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137223,"byte_end":137256,"line_start":2622,"line_end":2622,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137261,"byte_end":137268,"line_start":2623,"line_end":2623,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137273,"byte_end":137276,"line_start":2624,"line_end":2624,"column_start":5,"column_end":8}},{"value":"/ Invalid UTF-8 remains as is:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137281,"byte_end":137313,"line_start":2625,"line_end":2625,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137318,"byte_end":137321,"line_start":2626,"line_end":2626,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137326,"byte_end":137333,"line_start":2627,"line_end":2627,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137338,"byte_end":137376,"line_start":2628,"line_end":2628,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137381,"byte_end":137384,"line_start":2629,"line_end":2629,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from_slice(b\"foo\\xFFbar\\xE2\\x98baz\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137389,"byte_end":137453,"line_start":2630,"line_end":2630,"column_start":5,"column_end":69}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137458,"byte_end":137487,"line_start":2631,"line_end":2631,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(s, B(b\"FOO\\xFFBAR\\xE2\\x98BAZ\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137492,"byte_end":137539,"line_start":2632,"line_end":2632,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137544,"byte_end":137551,"line_start":2633,"line_end":2633,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137556,"byte_end":137565,"line_start":2634,"line_end":2634,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138460,"byte_end":138473,"line_start":2662,"line_end":2662,"column_start":8,"column_end":21},"name":"reverse_bytes","qualname":"::ext_slice::ByteSlice::reverse_bytes","value":"pub fn reverse_bytes(&mut Self)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Reverse the bytes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the bytes in this string, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137670,"byte_end":137717,"line_start":2639,"line_end":2639,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137722,"byte_end":137725,"line_start":2640,"line_end":2640,"column_start":5,"column_end":8}},{"value":"/ This is not necessarily a well formed operation! For example, if this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137730,"byte_end":137803,"line_start":2641,"line_end":2641,"column_start":5,"column_end":78}},{"value":"/ byte string contains valid UTF-8 that isn't ASCII, then reversing the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137808,"byte_end":137881,"line_start":2642,"line_end":2642,"column_start":5,"column_end":78}},{"value":"/ string will likely result in invalid UTF-8 and otherwise non-sensical","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137886,"byte_end":137959,"line_start":2643,"line_end":2643,"column_start":5,"column_end":78}},{"value":"/ content.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137964,"byte_end":137976,"line_start":2644,"line_end":2644,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137981,"byte_end":137984,"line_start":2645,"line_end":2645,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `[u8]::reverse` method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":137989,"byte_end":138060,"line_start":2646,"line_end":2646,"column_start":5,"column_end":76}},{"value":"/ This method is provided to permit callers to explicitly differentiate","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138065,"byte_end":138138,"line_start":2647,"line_end":2647,"column_start":5,"column_end":78}},{"value":"/ between reversing bytes, codepoints and graphemes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138143,"byte_end":138197,"line_start":2648,"line_end":2648,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138202,"byte_end":138205,"line_start":2649,"line_end":2649,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138210,"byte_end":138224,"line_start":2650,"line_end":2650,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138229,"byte_end":138232,"line_start":2651,"line_end":2651,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138237,"byte_end":138253,"line_start":2652,"line_end":2652,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138258,"byte_end":138261,"line_start":2653,"line_end":2653,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138266,"byte_end":138273,"line_start":2654,"line_end":2654,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138278,"byte_end":138302,"line_start":2655,"line_end":2655,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138307,"byte_end":138310,"line_start":2656,"line_end":2656,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"hello\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138315,"byte_end":138356,"line_start":2657,"line_end":2657,"column_start":5,"column_end":46}},{"value":"/ s.reverse_bytes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138361,"byte_end":138383,"line_start":2658,"line_end":2658,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"olleh\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138388,"byte_end":138426,"line_start":2659,"line_end":2659,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138431,"byte_end":138438,"line_start":2660,"line_end":2660,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138443,"byte_end":138452,"line_start":2661,"line_end":2661,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140878,"byte_end":140891,"line_start":2733,"line_end":2733,"column_start":8,"column_end":21},"name":"reverse_chars","qualname":"::ext_slice::ByteSlice::reverse_chars","value":"pub fn reverse_chars(&mut Self)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Reverse the codepoints in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the codepoints in this string, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138537,"byte_end":138589,"line_start":2666,"line_end":2666,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138594,"byte_end":138597,"line_start":2667,"line_end":2667,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by codepoint","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138602,"byte_end":138672,"line_start":2668,"line_end":2668,"column_start":5,"column_end":75}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138677,"byte_end":138718,"line_start":2669,"line_end":2669,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138723,"byte_end":138726,"line_start":2670,"line_end":2670,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138731,"byte_end":138805,"line_start":2671,"line_end":2671,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138810,"byte_end":138813,"line_start":2672,"line_end":2672,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138818,"byte_end":138825,"line_start":2673,"line_end":2673,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138830,"byte_end":138854,"line_start":2674,"line_end":2674,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138859,"byte_end":138862,"line_start":2675,"line_end":2675,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138867,"byte_end":138912,"line_start":2676,"line_end":2676,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138917,"byte_end":138920,"line_start":2677,"line_end":2677,"column_start":5,"column_end":8}},{"value":"/ let mut chars: Vec<char> = s.chars().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138925,"byte_end":138976,"line_start":2678,"line_end":2678,"column_start":5,"column_end":56}},{"value":"/ chars.reverse();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":138981,"byte_end":139001,"line_start":2679,"line_end":2679,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139006,"byte_end":139009,"line_start":2680,"line_end":2680,"column_start":5,"column_end":8}},{"value":"/ let reversed: String = chars.into_iter().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139014,"byte_end":139069,"line_start":2681,"line_end":2681,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139074,"byte_end":139112,"line_start":2682,"line_end":2682,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139117,"byte_end":139124,"line_start":2683,"line_end":2683,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139129,"byte_end":139132,"line_start":2684,"line_end":2684,"column_start":5,"column_end":8}},{"value":"/ Note that this is not necessarily a well formed operation. For example,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139137,"byte_end":139212,"line_start":2685,"line_end":2685,"column_start":5,"column_end":80}},{"value":"/ if this byte string contains grapheme clusters with more than one","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139217,"byte_end":139286,"line_start":2686,"line_end":2686,"column_start":5,"column_end":74}},{"value":"/ codepoint, then those grapheme clusters will not necessarily be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139291,"byte_end":139358,"line_start":2687,"line_end":2687,"column_start":5,"column_end":72}},{"value":"/ preserved. If you'd like to preserve grapheme clusters, then use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139363,"byte_end":139431,"line_start":2688,"line_end":2688,"column_start":5,"column_end":73}},{"value":"/ [`reverse_graphemes`](#method.reverse_graphemes) instead.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139436,"byte_end":139497,"line_start":2689,"line_end":2689,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139502,"byte_end":139505,"line_start":2690,"line_end":2690,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139510,"byte_end":139524,"line_start":2691,"line_end":2691,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139529,"byte_end":139532,"line_start":2692,"line_end":2692,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139537,"byte_end":139553,"line_start":2693,"line_end":2693,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139558,"byte_end":139561,"line_start":2694,"line_end":2694,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139566,"byte_end":139573,"line_start":2695,"line_end":2695,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139578,"byte_end":139602,"line_start":2696,"line_end":2696,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139607,"byte_end":139610,"line_start":2697,"line_end":2697,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139615,"byte_end":139660,"line_start":2698,"line_end":2698,"column_start":5,"column_end":48}},{"value":"/ s.reverse_chars();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139665,"byte_end":139687,"line_start":2699,"line_end":2699,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139692,"byte_end":139734,"line_start":2700,"line_end":2700,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139739,"byte_end":139746,"line_start":2701,"line_end":2701,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139751,"byte_end":139754,"line_start":2702,"line_end":2702,"column_start":5,"column_end":8}},{"value":"/ This example shows that not all reversals lead to a well formed string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139759,"byte_end":139834,"line_start":2703,"line_end":2703,"column_start":5,"column_end":80}},{"value":"/ For example, in this case, combining marks are used to put accents over","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139839,"byte_end":139914,"line_start":2704,"line_end":2704,"column_start":5,"column_end":80}},{"value":"/ some letters, and those accent marks must appear after the codepoints","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139919,"byte_end":139992,"line_start":2705,"line_end":2705,"column_start":5,"column_end":78}},{"value":"/ they modify.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":139997,"byte_end":140013,"line_start":2706,"line_end":2706,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140018,"byte_end":140021,"line_start":2707,"line_end":2707,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140026,"byte_end":140033,"line_start":2708,"line_end":2708,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140038,"byte_end":140067,"line_start":2709,"line_end":2709,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140072,"byte_end":140075,"line_start":2710,"line_end":2710,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140080,"byte_end":140126,"line_start":2711,"line_end":2711,"column_start":5,"column_end":49}},{"value":"/ s.reverse_chars();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140131,"byte_end":140153,"line_start":2712,"line_end":2712,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(b\"\\xCC\\x81emus\\xCC\\x81er\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140158,"byte_end":140206,"line_start":2713,"line_end":2713,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140211,"byte_end":140218,"line_start":2714,"line_end":2714,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140223,"byte_end":140226,"line_start":2715,"line_end":2715,"column_start":5,"column_end":8}},{"value":"/ A word of warning: the above example relies on the fact that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140231,"byte_end":140295,"line_start":2716,"line_end":2716,"column_start":5,"column_end":69}},{"value":"/ `résumé` is in decomposed normal form, which means there are separate","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140300,"byte_end":140377,"line_start":2717,"line_end":2717,"column_start":5,"column_end":80}},{"value":"/ codepoints for the accents above `e`. If it is instead in composed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140382,"byte_end":140452,"line_start":2718,"line_end":2718,"column_start":5,"column_end":75}},{"value":"/ normal form, then the example works:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140457,"byte_end":140497,"line_start":2719,"line_end":2719,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140502,"byte_end":140505,"line_start":2720,"line_end":2720,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140510,"byte_end":140517,"line_start":2721,"line_end":2721,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140522,"byte_end":140551,"line_start":2722,"line_end":2722,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140556,"byte_end":140559,"line_start":2723,"line_end":2723,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140564,"byte_end":140608,"line_start":2724,"line_end":2724,"column_start":5,"column_end":47}},{"value":"/ s.reverse_chars();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140613,"byte_end":140635,"line_start":2725,"line_end":2725,"column_start":5,"column_end":27}},{"value":"/ assert_eq!(s, B(\"émusér\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140640,"byte_end":140673,"line_start":2726,"line_end":2726,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140678,"byte_end":140685,"line_start":2727,"line_end":2727,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140690,"byte_end":140693,"line_start":2728,"line_end":2728,"column_start":5,"column_end":8}},{"value":"/ The point here is to be cautious and not assume that just because","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140698,"byte_end":140767,"line_start":2729,"line_end":2729,"column_start":5,"column_end":74}},{"value":"/ `reverse_chars` works in one case, that it therefore works in all","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140772,"byte_end":140841,"line_start":2730,"line_end":2730,"column_start":5,"column_end":74}},{"value":"/ cases.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140846,"byte_end":140856,"line_start":2731,"line_end":2731,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":140861,"byte_end":140870,"line_start":2732,"line_end":2732,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142447,"byte_end":142464,"line_start":2791,"line_end":2791,"column_start":8,"column_end":25},"name":"reverse_graphemes","qualname":"::ext_slice::ByteSlice::reverse_graphemes","value":"pub fn reverse_graphemes(&mut Self)","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Reverse the graphemes in this string, in place.","sig":null,"attributes":[{"value":"/ Reverse the graphemes in this string, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141252,"byte_end":141303,"line_start":2748,"line_end":2748,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141308,"byte_end":141311,"line_start":2749,"line_end":2749,"column_start":5,"column_end":8}},{"value":"/ If this byte string is valid UTF-8, then its reversal by grapheme","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141316,"byte_end":141385,"line_start":2750,"line_end":2750,"column_start":5,"column_end":74}},{"value":"/ is also guaranteed to be valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141390,"byte_end":141431,"line_start":2751,"line_end":2751,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141436,"byte_end":141439,"line_start":2752,"line_end":2752,"column_start":5,"column_end":8}},{"value":"/ This operation is equivalent to the following, but without allocating:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141444,"byte_end":141518,"line_start":2753,"line_end":2753,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141523,"byte_end":141526,"line_start":2754,"line_end":2754,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141531,"byte_end":141538,"line_start":2755,"line_end":2755,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141543,"byte_end":141567,"line_start":2756,"line_end":2756,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141572,"byte_end":141575,"line_start":2757,"line_end":2757,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141580,"byte_end":141625,"line_start":2758,"line_end":2758,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141630,"byte_end":141633,"line_start":2759,"line_end":2759,"column_start":5,"column_end":8}},{"value":"/ let mut graphemes: Vec<&str> = s.graphemes().collect();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141638,"byte_end":141697,"line_start":2760,"line_end":2760,"column_start":5,"column_end":64}},{"value":"/ graphemes.reverse();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141702,"byte_end":141726,"line_start":2761,"line_end":2761,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141731,"byte_end":141734,"line_start":2762,"line_end":2762,"column_start":5,"column_end":8}},{"value":"/ let reversed = graphemes.concat();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141739,"byte_end":141777,"line_start":2763,"line_end":2763,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(reversed, \"rab☃oof\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141782,"byte_end":141820,"line_start":2764,"line_end":2764,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141825,"byte_end":141832,"line_start":2765,"line_end":2765,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141837,"byte_end":141840,"line_start":2766,"line_end":2766,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141845,"byte_end":141859,"line_start":2767,"line_end":2767,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141864,"byte_end":141867,"line_start":2768,"line_end":2768,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141872,"byte_end":141888,"line_start":2769,"line_end":2769,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141893,"byte_end":141896,"line_start":2770,"line_end":2770,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141901,"byte_end":141908,"line_start":2771,"line_end":2771,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141913,"byte_end":141937,"line_start":2772,"line_end":2772,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141942,"byte_end":141945,"line_start":2773,"line_end":2773,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"foo☃bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":141950,"byte_end":141995,"line_start":2774,"line_end":2774,"column_start":5,"column_end":48}},{"value":"/ s.reverse_graphemes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142000,"byte_end":142026,"line_start":2775,"line_end":2775,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"rab☃oof\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142031,"byte_end":142073,"line_start":2776,"line_end":2776,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142078,"byte_end":142085,"line_start":2777,"line_end":2777,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142090,"byte_end":142093,"line_start":2778,"line_end":2778,"column_start":5,"column_end":8}},{"value":"/ This example shows how this correctly handles grapheme clusters,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142098,"byte_end":142166,"line_start":2779,"line_end":2779,"column_start":5,"column_end":73}},{"value":"/ unlike `reverse_chars`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142171,"byte_end":142198,"line_start":2780,"line_end":2780,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142203,"byte_end":142206,"line_start":2781,"line_end":2781,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142211,"byte_end":142218,"line_start":2782,"line_end":2782,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142223,"byte_end":142247,"line_start":2783,"line_end":2783,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142252,"byte_end":142255,"line_start":2784,"line_end":2784,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"résumé\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142260,"byte_end":142304,"line_start":2785,"line_end":2785,"column_start":5,"column_end":47}},{"value":"/ s.reverse_graphemes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142309,"byte_end":142335,"line_start":2786,"line_end":2786,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"émusér\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142340,"byte_end":142381,"line_start":2787,"line_end":2787,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142386,"byte_end":142393,"line_start":2788,"line_end":2788,"column_start":5,"column_end":12}},{"value":"cfg(feature = \"unicode\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142398,"byte_end":142425,"line_start":2789,"line_end":2789,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142430,"byte_end":142439,"line_start":2790,"line_end":2790,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143393,"byte_end":143401,"line_start":2826,"line_end":2826,"column_start":8,"column_end":16},"name":"is_ascii","qualname":"::ext_slice::ByteSlice::is_ascii","value":"pub fn is_ascii(&Self) -> bool","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns true if and only if every byte in this byte string is ASCII.","sig":null,"attributes":[{"value":"/ Returns true if and only if every byte in this byte string is ASCII.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142867,"byte_end":142939,"line_start":2808,"line_end":2808,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142944,"byte_end":142947,"line_start":2809,"line_end":2809,"column_start":5,"column_end":8}},{"value":"/ ASCII is an encoding that defines 128 codepoints. A byte corresponds to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":142952,"byte_end":143027,"line_start":2810,"line_end":2810,"column_start":5,"column_end":80}},{"value":"/ an ASCII codepoint if and only if it is in the inclusive range","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143032,"byte_end":143098,"line_start":2811,"line_end":2811,"column_start":5,"column_end":71}},{"value":"/ `[0, 127]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143103,"byte_end":143118,"line_start":2812,"line_end":2812,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143123,"byte_end":143126,"line_start":2813,"line_end":2813,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143131,"byte_end":143145,"line_start":2814,"line_end":2814,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143150,"byte_end":143153,"line_start":2815,"line_end":2815,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143158,"byte_end":143174,"line_start":2816,"line_end":2816,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143179,"byte_end":143182,"line_start":2817,"line_end":2817,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143187,"byte_end":143194,"line_start":2818,"line_end":2818,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143199,"byte_end":143228,"line_start":2819,"line_end":2819,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143233,"byte_end":143236,"line_start":2820,"line_end":2820,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_ascii());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143241,"byte_end":143274,"line_start":2821,"line_end":2821,"column_start":5,"column_end":38}},{"value":"/ assert!(!B(\"☃βツ\").is_ascii());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143279,"byte_end":143318,"line_start":2822,"line_end":2822,"column_start":5,"column_end":39}},{"value":"/ assert!(!B(b\"\\xFF\").is_ascii());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143323,"byte_end":143359,"line_start":2823,"line_end":2823,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143364,"byte_end":143371,"line_start":2824,"line_end":2824,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143376,"byte_end":143385,"line_start":2825,"line_end":2825,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144278,"byte_end":144285,"line_start":2854,"line_end":2854,"column_start":8,"column_end":15},"name":"is_utf8","qualname":"::ext_slice::ByteSlice::is_utf8","value":"pub fn is_utf8(&Self) -> bool","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns true if and only if the entire byte string is valid UTF-8.","sig":null,"attributes":[{"value":"/ Returns true if and only if the entire byte string is valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143508,"byte_end":143578,"line_start":2830,"line_end":2830,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143583,"byte_end":143586,"line_start":2831,"line_end":2831,"column_start":5,"column_end":8}},{"value":"/ If you need location information about where a byte string's first","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143591,"byte_end":143661,"line_start":2832,"line_end":2832,"column_start":5,"column_end":75}},{"value":"/ invalid UTF-8 byte is, then use the [`to_str`](#method.to_str) method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143666,"byte_end":143740,"line_start":2833,"line_end":2833,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143745,"byte_end":143748,"line_start":2834,"line_end":2834,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143753,"byte_end":143767,"line_start":2835,"line_end":2835,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143772,"byte_end":143775,"line_start":2836,"line_end":2836,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143780,"byte_end":143796,"line_start":2837,"line_end":2837,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143801,"byte_end":143804,"line_start":2838,"line_end":2838,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143809,"byte_end":143816,"line_start":2839,"line_end":2839,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143821,"byte_end":143850,"line_start":2840,"line_end":2840,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143855,"byte_end":143858,"line_start":2841,"line_end":2841,"column_start":5,"column_end":8}},{"value":"/ assert!(B(\"abc\").is_utf8());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143863,"byte_end":143895,"line_start":2842,"line_end":2842,"column_start":5,"column_end":37}},{"value":"/ assert!(B(\"☃βツ\").is_utf8());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143900,"byte_end":143937,"line_start":2843,"line_end":2843,"column_start":5,"column_end":37}},{"value":"/ // invalid bytes","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143942,"byte_end":143962,"line_start":2844,"line_end":2844,"column_start":5,"column_end":25}},{"value":"/ assert!(!B(b\"abc\\xFF\").is_utf8());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":143967,"byte_end":144005,"line_start":2845,"line_end":2845,"column_start":5,"column_end":43}},{"value":"/ // surrogate encoding","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144010,"byte_end":144035,"line_start":2846,"line_end":2846,"column_start":5,"column_end":30}},{"value":"/ assert!(!B(b\"\\xED\\xA0\\x80\").is_utf8());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144040,"byte_end":144083,"line_start":2847,"line_end":2847,"column_start":5,"column_end":48}},{"value":"/ // incomplete sequence","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144088,"byte_end":144114,"line_start":2848,"line_end":2848,"column_start":5,"column_end":31}},{"value":"/ assert!(!B(b\"\\xF0\\x9D\\x9Ca\").is_utf8());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144119,"byte_end":144163,"line_start":2849,"line_end":2849,"column_start":5,"column_end":49}},{"value":"/ // overlong sequence","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144168,"byte_end":144192,"line_start":2850,"line_end":2850,"column_start":5,"column_end":29}},{"value":"/ assert!(!B(b\"\\xF0\\x82\\x82\\xAC\").is_utf8());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144197,"byte_end":144244,"line_start":2851,"line_end":2851,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144249,"byte_end":144256,"line_start":2852,"line_end":2852,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144261,"byte_end":144270,"line_start":2853,"line_end":2853,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144875,"byte_end":144884,"line_start":2875,"line_end":2875,"column_start":8,"column_end":17},"name":"last_byte","qualname":"::ext_slice::ByteSlice::last_byte","value":"pub fn last_byte(&Self) -> Option<u8>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the last byte in this byte string, if it's non-empty. If this\n byte string is empty, this returns `None`.","sig":null,"attributes":[{"value":"/ Returns the last byte in this byte string, if it's non-empty. If this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144362,"byte_end":144435,"line_start":2858,"line_end":2858,"column_start":5,"column_end":78}},{"value":"/ byte string is empty, this returns `None`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144440,"byte_end":144486,"line_start":2859,"line_end":2859,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144491,"byte_end":144494,"line_start":2860,"line_end":2860,"column_start":5,"column_end":8}},{"value":"/ Note that this is like the generic `[u8]::last`, except this returns","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144499,"byte_end":144571,"line_start":2861,"line_end":2861,"column_start":5,"column_end":77}},{"value":"/ the byte by value instead of a reference to the byte.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144576,"byte_end":144633,"line_start":2862,"line_end":2862,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144638,"byte_end":144641,"line_start":2863,"line_end":2863,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144646,"byte_end":144660,"line_start":2864,"line_end":2864,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144665,"byte_end":144668,"line_start":2865,"line_end":2865,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144673,"byte_end":144689,"line_start":2866,"line_end":2866,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144694,"byte_end":144697,"line_start":2867,"line_end":2867,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144702,"byte_end":144709,"line_start":2868,"line_end":2868,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144714,"byte_end":144738,"line_start":2869,"line_end":2869,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144743,"byte_end":144746,"line_start":2870,"line_end":2870,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(b'z'), b\"baz\".last_byte());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144751,"byte_end":144798,"line_start":2871,"line_end":2871,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(None, b\"\".last_byte());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144803,"byte_end":144841,"line_start":2872,"line_end":2872,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144846,"byte_end":144853,"line_start":2873,"line_end":2873,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":144858,"byte_end":144867,"line_start":2874,"line_end":2874,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145565,"byte_end":145584,"line_start":2896,"line_end":2896,"column_start":8,"column_end":27},"name":"find_non_ascii_byte","qualname":"::ext_slice::ByteSlice::find_non_ascii_byte","value":"pub fn find_non_ascii_byte(&Self) -> Option<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Returns the index of the first non-ASCII byte in this byte string (if\n any such indices exist). Specifically, it returns the index of the\n first byte with a value greater than or equal to `0x80`.","sig":null,"attributes":[{"value":"/ Returns the index of the first non-ASCII byte in this byte string (if","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145017,"byte_end":145090,"line_start":2880,"line_end":2880,"column_start":5,"column_end":78}},{"value":"/ any such indices exist). Specifically, it returns the index of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145095,"byte_end":145165,"line_start":2881,"line_end":2881,"column_start":5,"column_end":75}},{"value":"/ first byte with a value greater than or equal to `0x80`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145170,"byte_end":145230,"line_start":2882,"line_end":2882,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145235,"byte_end":145238,"line_start":2883,"line_end":2883,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145243,"byte_end":145257,"line_start":2884,"line_end":2884,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145262,"byte_end":145265,"line_start":2885,"line_end":2885,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145270,"byte_end":145286,"line_start":2886,"line_end":2886,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145291,"byte_end":145294,"line_start":2887,"line_end":2887,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145299,"byte_end":145306,"line_start":2888,"line_end":2888,"column_start":5,"column_end":12}},{"value":"/ use bstr::{ByteSlice, B};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145311,"byte_end":145340,"line_start":2889,"line_end":2889,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145345,"byte_end":145348,"line_start":2890,"line_end":2890,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Some(3), b\"abc\\xff\".find_non_ascii_byte());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145353,"byte_end":145411,"line_start":2891,"line_end":2891,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(None, b\"abcde\".find_non_ascii_byte());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145416,"byte_end":145469,"line_start":2892,"line_end":2892,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(Some(0), B(\"😀\").find_non_ascii_byte());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145474,"byte_end":145531,"line_start":2893,"line_end":2893,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145536,"byte_end":145543,"line_start":2894,"line_end":2894,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145548,"byte_end":145557,"line_start":2895,"line_end":2895,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146724,"byte_end":146739,"line_start":2931,"line_end":2931,"column_start":8,"column_end":23},"name":"copy_within_str","qualname":"::ext_slice::ByteSlice::copy_within_str","value":"pub fn copy_within_str<R>(&mut Self, R, usize) where\nR: ops::RangeBounds<usize>","parent":{"krate":0,"index":186},"children":[],"decl_id":null,"docs":" Copies elements from one part of the slice to another part of itself,\n where the parts may be overlapping.","sig":null,"attributes":[{"value":"/ Copies elements from one part of the slice to another part of itself,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145800,"byte_end":145873,"line_start":2905,"line_end":2905,"column_start":5,"column_end":78}},{"value":"/ where the parts may be overlapping.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145878,"byte_end":145917,"line_start":2906,"line_end":2906,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145922,"byte_end":145925,"line_start":2907,"line_end":2907,"column_start":5,"column_end":8}},{"value":"/ `src` is the range within this byte string to copy from, while `dest`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":145930,"byte_end":146003,"line_start":2908,"line_end":2908,"column_start":5,"column_end":78}},{"value":"/ is the starting index of the range within this byte string to copy to.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146008,"byte_end":146082,"line_start":2909,"line_end":2909,"column_start":5,"column_end":79}},{"value":"/ The length indicated by `src` must be less than or equal to the number","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146087,"byte_end":146161,"line_start":2910,"line_end":2910,"column_start":5,"column_end":79}},{"value":"/ of bytes from `dest` to the end of the byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146166,"byte_end":146221,"line_start":2911,"line_end":2911,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146226,"byte_end":146229,"line_start":2912,"line_end":2912,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146234,"byte_end":146246,"line_start":2913,"line_end":2913,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146251,"byte_end":146254,"line_start":2914,"line_end":2914,"column_start":5,"column_end":8}},{"value":"/ Panics if either range is out of bounds, or if `src` is too big to fit","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146259,"byte_end":146333,"line_start":2915,"line_end":2915,"column_start":5,"column_end":79}},{"value":"/ into `dest`, or if the end of `src` is before the start.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146338,"byte_end":146398,"line_start":2916,"line_end":2916,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146403,"byte_end":146406,"line_start":2917,"line_end":2917,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146411,"byte_end":146425,"line_start":2918,"line_end":2918,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146430,"byte_end":146433,"line_start":2919,"line_end":2919,"column_start":5,"column_end":8}},{"value":"/ Copying four bytes within a byte string:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146438,"byte_end":146482,"line_start":2920,"line_end":2920,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146487,"byte_end":146490,"line_start":2921,"line_end":2921,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146495,"byte_end":146502,"line_start":2922,"line_end":2922,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146507,"byte_end":146536,"line_start":2923,"line_end":2923,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146541,"byte_end":146544,"line_start":2924,"line_end":2924,"column_start":5,"column_end":8}},{"value":"/ let mut buf = *b\"Hello, World!\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146549,"byte_end":146585,"line_start":2925,"line_end":2925,"column_start":5,"column_end":41}},{"value":"/ let s = &mut buf;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146590,"byte_end":146611,"line_start":2926,"line_end":2926,"column_start":5,"column_end":26}},{"value":"/ s.copy_within_str(1..5, 8);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146616,"byte_end":146647,"line_start":2927,"line_end":2927,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(s, B(\"Hello, Wello!\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146652,"byte_end":146690,"line_start":2928,"line_end":2928,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146695,"byte_end":146702,"line_start":2929,"line_end":2929,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":146707,"byte_end":146716,"line_start":2930,"line_end":2930,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1089},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149214,"byte_end":149220,"line_start":2989,"line_end":2989,"column_start":12,"column_end":18},"name":"Finder","qualname":"::ext_slice::Finder","value":"Finder {  }","parent":null,"children":[{"krate":0,"index":1091}],"decl_id":null,"docs":" A single substring searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring searcher fixed to a particular needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148297,"byte_end":148358,"line_start":2972,"line_end":2972,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148359,"byte_end":148362,"line_start":2973,"line_end":2973,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148363,"byte_end":148437,"line_start":2974,"line_end":2974,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148438,"byte_end":148511,"line_start":2975,"line_end":2975,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148512,"byte_end":148586,"line_start":2976,"line_end":2976,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148587,"byte_end":148663,"line_start":2977,"line_end":2977,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148664,"byte_end":148742,"line_start":2978,"line_end":2978,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::find`](trait.ByteSlice.html#method.find)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148743,"byte_end":148800,"line_start":2979,"line_end":2979,"column_start":1,"column_end":58}},{"value":"/ or","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148801,"byte_end":148807,"line_start":2980,"line_end":2980,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::find_iter`](trait.ByteSlice.html#method.find_iter)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148808,"byte_end":148875,"line_start":2981,"line_end":2981,"column_start":1,"column_end":68}},{"value":"/ is good enough, but `Finder` is useful when you can meaningfully observe","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148876,"byte_end":148952,"line_start":2982,"line_end":2982,"column_start":1,"column_end":77}},{"value":"/ searcher construction time in a profile.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148953,"byte_end":148997,"line_start":2983,"line_end":2983,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":148998,"byte_end":149001,"line_start":2984,"line_end":2984,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149002,"byte_end":149075,"line_start":2985,"line_end":2985,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `Finder` that is not connected to the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149076,"byte_end":149150,"line_start":2986,"line_end":2986,"column_start":1,"column_end":75}},{"value":"/ lifetime of its needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149151,"byte_end":149178,"line_start":2987,"line_end":2987,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149353,"byte_end":149356,"line_start":2996,"line_end":2996,"column_start":12,"column_end":15},"name":"new","qualname":"<Finder>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'a B) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Create a new finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new finder for the given needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149282,"byte_end":149327,"line_start":2994,"line_end":2994,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149332,"byte_end":149341,"line_start":2995,"line_end":2995,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149829,"byte_end":149839,"line_start":3009,"line_end":3009,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<Finder>::into_owned","value":"pub fn into_owned(Self) -> Finder","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149486,"byte_end":149556,"line_start":3000,"line_end":3000,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149561,"byte_end":149584,"line_start":3001,"line_end":3001,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149589,"byte_end":149592,"line_start":3002,"line_end":3002,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149597,"byte_end":149669,"line_start":3003,"line_end":3003,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149674,"byte_end":149701,"line_start":3004,"line_end":3004,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149706,"byte_end":149709,"line_start":3005,"line_end":3005,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149714,"byte_end":149775,"line_start":3006,"line_end":3006,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149780,"byte_end":149803,"line_start":3007,"line_end":3007,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149808,"byte_end":149817,"line_start":3008,"line_end":3008,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150323,"byte_end":150329,"line_start":3020,"line_end":3020,"column_start":12,"column_end":18},"name":"needle","qualname":"<Finder>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149934,"byte_end":149987,"line_start":3013,"line_end":3013,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149992,"byte_end":149995,"line_start":3014,"line_end":3014,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150000,"byte_end":150073,"line_start":3015,"line_end":3015,"column_start":5,"column_end":78}},{"value":"/ of the finder, and may be shorter than the `'a` lifetime. Namely, a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150078,"byte_end":150149,"line_start":3016,"line_end":3016,"column_start":5,"column_end":76}},{"value":"/ finder's needle can be either borrowed or owned, so the lifetime of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150154,"byte_end":150229,"line_start":3017,"line_end":3017,"column_start":5,"column_end":80}},{"value":"/ needle returned must necessarily be the shorter of the two.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150234,"byte_end":150297,"line_start":3018,"line_end":3018,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150302,"byte_end":150311,"line_start":3019,"line_end":3019,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151359,"byte_end":151363,"line_start":3052,"line_end":3052,"column_start":12,"column_end":16},"name":"find","qualname":"<Finder>::find","value":"pub fn find<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the first occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the first occurrence of this needle in the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150390,"byte_end":150463,"line_start":3024,"line_end":3024,"column_start":5,"column_end":78}},{"value":"/ haystack.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150468,"byte_end":150481,"line_start":3025,"line_end":3025,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150486,"byte_end":150489,"line_start":3026,"line_end":3026,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150494,"byte_end":150563,"line_start":3027,"line_end":3027,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150568,"byte_end":150638,"line_start":3028,"line_end":3028,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150643,"byte_end":150646,"line_start":3029,"line_end":3029,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150651,"byte_end":150667,"line_start":3030,"line_end":3030,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150672,"byte_end":150675,"line_start":3031,"line_end":3031,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150680,"byte_end":150752,"line_start":3032,"line_end":3032,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150757,"byte_end":150829,"line_start":3033,"line_end":3033,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150834,"byte_end":150881,"line_start":3034,"line_end":3034,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150886,"byte_end":150889,"line_start":3035,"line_end":3035,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150894,"byte_end":150963,"line_start":3036,"line_end":3036,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150968,"byte_end":150983,"line_start":3037,"line_end":3037,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150988,"byte_end":150991,"line_start":3038,"line_end":3038,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":150996,"byte_end":151010,"line_start":3039,"line_end":3039,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151015,"byte_end":151018,"line_start":3040,"line_end":3040,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151023,"byte_end":151039,"line_start":3041,"line_end":3041,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151044,"byte_end":151047,"line_start":3042,"line_end":3042,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151052,"byte_end":151059,"line_start":3043,"line_end":3043,"column_start":5,"column_end":12}},{"value":"/ use bstr::Finder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151064,"byte_end":151085,"line_start":3044,"line_end":3044,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151090,"byte_end":151093,"line_start":3045,"line_end":3045,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151098,"byte_end":151131,"line_start":3046,"line_end":3046,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), Finder::new(\"foo\").find(haystack));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151136,"byte_end":151195,"line_start":3047,"line_end":3047,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(Some(4), Finder::new(\"bar\").find(haystack));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151200,"byte_end":151259,"line_start":3048,"line_end":3048,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(None, Finder::new(\"quux\").find(haystack));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151264,"byte_end":151321,"line_start":3049,"line_end":3049,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151326,"byte_end":151333,"line_start":3050,"line_end":3050,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151338,"byte_end":151347,"line_start":3051,"line_end":3051,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1098},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152417,"byte_end":152430,"line_start":3074,"line_end":3074,"column_start":12,"column_end":25},"name":"FinderReverse","qualname":"::ext_slice::FinderReverse","value":"FinderReverse {  }","parent":null,"children":[{"krate":0,"index":1100}],"decl_id":null,"docs":" A single substring reverse searcher fixed to a particular needle.","sig":null,"attributes":[{"value":"/ A single substring reverse searcher fixed to a particular needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151474,"byte_end":151543,"line_start":3057,"line_end":3057,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151544,"byte_end":151547,"line_start":3058,"line_end":3058,"column_start":1,"column_end":4}},{"value":"/ The purpose of this type is to permit callers to construct a substring","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151548,"byte_end":151622,"line_start":3059,"line_end":3059,"column_start":1,"column_end":75}},{"value":"/ searcher that can be used to search haystacks without the overhead of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151623,"byte_end":151696,"line_start":3060,"line_end":3060,"column_start":1,"column_end":74}},{"value":"/ constructing the searcher in the first place. This is a somewhat niche","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151697,"byte_end":151771,"line_start":3061,"line_end":3061,"column_start":1,"column_end":75}},{"value":"/ concern when it's necessary to re-use the same needle to search multiple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151772,"byte_end":151848,"line_start":3062,"line_end":3062,"column_start":1,"column_end":77}},{"value":"/ different haystacks with as little overhead as possible. In general, using","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151849,"byte_end":151927,"line_start":3063,"line_end":3063,"column_start":1,"column_end":79}},{"value":"/ [`ByteSlice::rfind`](trait.ByteSlice.html#method.rfind)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151928,"byte_end":151987,"line_start":3064,"line_end":3064,"column_start":1,"column_end":60}},{"value":"/ or","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151988,"byte_end":151994,"line_start":3065,"line_end":3065,"column_start":1,"column_end":7}},{"value":"/ [`ByteSlice::rfind_iter`](trait.ByteSlice.html#method.rfind_iter)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":151995,"byte_end":152064,"line_start":3066,"line_end":3066,"column_start":1,"column_end":70}},{"value":"/ is good enough, but `FinderReverse` is useful when you can meaningfully","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152065,"byte_end":152140,"line_start":3067,"line_end":3067,"column_start":1,"column_end":76}},{"value":"/ observe searcher construction time in a profile.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152141,"byte_end":152193,"line_start":3068,"line_end":3068,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152194,"byte_end":152197,"line_start":3069,"line_end":3069,"column_start":1,"column_end":4}},{"value":"/ When the `std` feature is enabled, then this type has an `into_owned`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152198,"byte_end":152271,"line_start":3070,"line_end":3070,"column_start":1,"column_end":74}},{"value":"/ version which permits building a `FinderReverse` that is not connected to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152272,"byte_end":152349,"line_start":3071,"line_end":3071,"column_start":1,"column_end":78}},{"value":"/ the lifetime of its needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152350,"byte_end":152381,"line_start":3072,"line_end":3072,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152578,"byte_end":152581,"line_start":3081,"line_end":3081,"column_start":12,"column_end":15},"name":"new","qualname":"<FinderReverse>::new","value":"pub fn new<B: ?Sized + AsRef<[u8]>>(&'a B) -> FinderReverse","parent":null,"children":[],"decl_id":null,"docs":" Create a new reverse finder for the given needle.\n","sig":null,"attributes":[{"value":"/ Create a new reverse finder for the given needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152499,"byte_end":152552,"line_start":3079,"line_end":3079,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152557,"byte_end":152566,"line_start":3080,"line_end":3080,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153068,"byte_end":153078,"line_start":3094,"line_end":3094,"column_start":12,"column_end":22},"name":"into_owned","qualname":"<FinderReverse>::into_owned","value":"pub fn into_owned(Self) -> FinderReverse","parent":null,"children":[],"decl_id":null,"docs":" Convert this finder into its owned variant, such that it no longer\n borrows the needle.","sig":null,"attributes":[{"value":"/ Convert this finder into its owned variant, such that it no longer","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152725,"byte_end":152795,"line_start":3085,"line_end":3085,"column_start":5,"column_end":75}},{"value":"/ borrows the needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152800,"byte_end":152823,"line_start":3086,"line_end":3086,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152828,"byte_end":152831,"line_start":3087,"line_end":3087,"column_start":5,"column_end":8}},{"value":"/ If this is already an owned finder, then this is a no-op. Otherwise,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152836,"byte_end":152908,"line_start":3088,"line_end":3088,"column_start":5,"column_end":77}},{"value":"/ this copies the needle.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152913,"byte_end":152940,"line_start":3089,"line_end":3089,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152945,"byte_end":152948,"line_start":3090,"line_end":3090,"column_start":5,"column_end":8}},{"value":"/ This is only available when the `std` feature is enabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152953,"byte_end":153014,"line_start":3091,"line_end":3091,"column_start":5,"column_end":66}},{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153019,"byte_end":153042,"line_start":3092,"line_end":3092,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153047,"byte_end":153056,"line_start":3093,"line_end":3093,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153577,"byte_end":153583,"line_start":3105,"line_end":3105,"column_start":12,"column_end":18},"name":"needle","qualname":"<FinderReverse>::needle","value":"pub fn needle(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the needle that this finder searches for.","sig":null,"attributes":[{"value":"/ Returns the needle that this finder searches for.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153187,"byte_end":153240,"line_start":3098,"line_end":3098,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153245,"byte_end":153248,"line_start":3099,"line_end":3099,"column_start":5,"column_end":8}},{"value":"/ Note that the lifetime of the needle returned is tied to the lifetime","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153253,"byte_end":153326,"line_start":3100,"line_end":3100,"column_start":5,"column_end":78}},{"value":"/ of this finder, and may be shorter than the `'a` lifetime. Namely,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153331,"byte_end":153401,"line_start":3101,"line_end":3101,"column_start":5,"column_end":75}},{"value":"/ a finder's needle can be either borrowed or owned, so the lifetime of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153406,"byte_end":153479,"line_start":3102,"line_end":3102,"column_start":5,"column_end":78}},{"value":"/ the needle returned must necessarily be the shorter of the two.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153484,"byte_end":153551,"line_start":3103,"line_end":3103,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153556,"byte_end":153565,"line_start":3104,"line_end":3104,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154643,"byte_end":154648,"line_start":3137,"line_end":3137,"column_start":12,"column_end":17},"name":"rfind","qualname":"<FinderReverse>::rfind","value":"pub fn rfind<B: AsRef<[u8]>>(&Self, B) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the index of the last occurrence of this needle in the given\n haystack.","sig":null,"attributes":[{"value":"/ Returns the index of the last occurrence of this needle in the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153644,"byte_end":153716,"line_start":3109,"line_end":3109,"column_start":5,"column_end":77}},{"value":"/ haystack.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153721,"byte_end":153734,"line_start":3110,"line_end":3110,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153739,"byte_end":153742,"line_start":3111,"line_end":3111,"column_start":5,"column_end":8}},{"value":"/ The haystack may be any type that can be cheaply converted into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153747,"byte_end":153816,"line_start":3112,"line_end":3112,"column_start":5,"column_end":74}},{"value":"/ `&[u8]`. This includes, but is not limited to, `&str` and `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153821,"byte_end":153891,"line_start":3113,"line_end":3113,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153896,"byte_end":153899,"line_start":3114,"line_end":3114,"column_start":5,"column_end":8}},{"value":"/ # Complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153904,"byte_end":153920,"line_start":3115,"line_end":3115,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153925,"byte_end":153928,"line_start":3116,"line_end":3116,"column_start":5,"column_end":8}},{"value":"/ This routine is guaranteed to have worst case linear time complexity","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":153933,"byte_end":154005,"line_start":3117,"line_end":3117,"column_start":5,"column_end":77}},{"value":"/ with respect to both the needle and the haystack. That is, this runs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154010,"byte_end":154082,"line_start":3118,"line_end":3118,"column_start":5,"column_end":77}},{"value":"/ in `O(needle.len() + haystack.len())` time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154087,"byte_end":154134,"line_start":3119,"line_end":3119,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154139,"byte_end":154142,"line_start":3120,"line_end":3120,"column_start":5,"column_end":8}},{"value":"/ This routine is also guaranteed to have worst case constant space","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154147,"byte_end":154216,"line_start":3121,"line_end":3121,"column_start":5,"column_end":74}},{"value":"/ complexity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154221,"byte_end":154236,"line_start":3122,"line_end":3122,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154241,"byte_end":154244,"line_start":3123,"line_end":3123,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154249,"byte_end":154263,"line_start":3124,"line_end":3124,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154268,"byte_end":154271,"line_start":3125,"line_end":3125,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154276,"byte_end":154292,"line_start":3126,"line_end":3126,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154297,"byte_end":154300,"line_start":3127,"line_end":3127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154305,"byte_end":154312,"line_start":3128,"line_end":3128,"column_start":5,"column_end":12}},{"value":"/ use bstr::FinderReverse;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154317,"byte_end":154345,"line_start":3129,"line_end":3129,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154350,"byte_end":154353,"line_start":3130,"line_end":3130,"column_start":5,"column_end":8}},{"value":"/ let haystack = \"foo bar baz\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154358,"byte_end":154391,"line_start":3131,"line_end":3131,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(Some(0), FinderReverse::new(\"foo\").rfind(haystack));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154396,"byte_end":154463,"line_start":3132,"line_end":3132,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(Some(4), FinderReverse::new(\"bar\").rfind(haystack));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154468,"byte_end":154535,"line_start":3133,"line_end":3133,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(None, FinderReverse::new(\"quux\").rfind(haystack));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154540,"byte_end":154605,"line_start":3134,"line_end":3134,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154610,"byte_end":154617,"line_start":3135,"line_end":3135,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154622,"byte_end":154631,"line_start":3136,"line_end":3136,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1107},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":155031,"byte_end":155035,"line_start":3149,"line_end":3149,"column_start":12,"column_end":16},"name":"Find","qualname":"::ext_slice::Find","value":"Find {  }","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154760,"byte_end":154815,"line_start":3142,"line_end":3142,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154816,"byte_end":154819,"line_start":3143,"line_end":3143,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154820,"byte_end":154884,"line_start":3144,"line_end":3144,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154885,"byte_end":154888,"line_start":3145,"line_end":3145,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154889,"byte_end":154968,"line_start":3146,"line_end":3146,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":154969,"byte_end":155002,"line_start":3147,"line_end":3147,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1116},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156229,"byte_end":156240,"line_start":3193,"line_end":3193,"column_start":12,"column_end":23},"name":"FindReverse","qualname":"::ext_slice::FindReverse","value":"FindReverse {  }","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"decl_id":null,"docs":" An iterator over non-overlapping substring matches in reverse.","sig":null,"attributes":[{"value":"/ An iterator over non-overlapping substring matches in reverse.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":155947,"byte_end":156013,"line_start":3186,"line_end":3186,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156014,"byte_end":156017,"line_start":3187,"line_end":3187,"column_start":1,"column_end":4}},{"value":"/ Matches are reported by the byte offset at which they begin.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156018,"byte_end":156082,"line_start":3188,"line_end":3188,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156083,"byte_end":156086,"line_start":3189,"line_end":3189,"column_start":1,"column_end":4}},{"value":"/ `'a` is the shorter of two lifetimes: the byte string being searched or the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156087,"byte_end":156166,"line_start":3190,"line_end":3190,"column_start":1,"column_end":80}},{"value":"/ byte string being looked for.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156167,"byte_end":156200,"line_start":3191,"line_end":3191,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1125},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157704,"byte_end":157709,"line_start":3249,"line_end":3249,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::ext_slice::Bytes","value":"Bytes {  }","parent":null,"children":[{"krate":0,"index":1127}],"decl_id":null,"docs":" An iterator over the bytes in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over the bytes in a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157555,"byte_end":157603,"line_start":3245,"line_end":3245,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157604,"byte_end":157607,"line_start":3246,"line_end":3246,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being traversed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157608,"byte_end":157668,"line_start":3247,"line_end":3247,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158003,"byte_end":158011,"line_start":3258,"line_end":3258,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Bytes>::as_slice","value":"pub fn as_slice(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Views the remaining underlying data as a subslice of the original data.\n This has the same lifetime as the original slice,\n and so the iterator can continue to be used while this exists.\n","sig":null,"attributes":[{"value":"/ Views the remaining underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157773,"byte_end":157848,"line_start":3254,"line_end":3254,"column_start":5,"column_end":80}},{"value":"/ This has the same lifetime as the original slice,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157853,"byte_end":157906,"line_start":3255,"line_end":3255,"column_start":5,"column_end":58}},{"value":"/ and so the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157911,"byte_end":157977,"line_start":3256,"line_end":3256,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157982,"byte_end":157991,"line_start":3257,"line_end":3257,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1134},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158933,"byte_end":158939,"line_start":3300,"line_end":3300,"column_start":12,"column_end":18},"name":"Fields","qualname":"::ext_slice::Fields","value":"Fields {  }","parent":null,"children":[{"krate":0,"index":1136}],"decl_id":null,"docs":" An iterator over the fields in a byte string, separated by whitespace.","sig":null,"attributes":[{"value":"/ An iterator over the fields in a byte string, separated by whitespace.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158638,"byte_end":158712,"line_start":3293,"line_end":3293,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158713,"byte_end":158716,"line_start":3294,"line_end":3294,"column_start":1,"column_end":4}},{"value":"/ This iterator splits on contiguous runs of whitespace, such that the fields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158717,"byte_end":158796,"line_start":3295,"line_end":3295,"column_start":1,"column_end":80}},{"value":"/ in `foo\\t\\t\\n  \\nbar` are `foo` and `bar`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158797,"byte_end":158843,"line_start":3296,"line_end":3296,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158844,"byte_end":158847,"line_start":3297,"line_end":3297,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158848,"byte_end":158904,"line_start":3298,"line_end":3298,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1140},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159741,"byte_end":159751,"line_start":3329,"line_end":3329,"column_start":12,"column_end":22},"name":"FieldsWith","qualname":"::ext_slice::FieldsWith","value":"FieldsWith {  }","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1144},{"krate":0,"index":1145}],"decl_id":null,"docs":" An iterator over fields in the byte string, separated by a predicate over\n codepoints.","sig":null,"attributes":[{"value":"/ An iterator over fields in the byte string, separated by a predicate over","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159285,"byte_end":159362,"line_start":3319,"line_end":3319,"column_start":1,"column_end":78}},{"value":"/ codepoints.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159363,"byte_end":159378,"line_start":3320,"line_end":3320,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159379,"byte_end":159382,"line_start":3321,"line_end":3321,"column_start":1,"column_end":4}},{"value":"/ This iterator splits a byte string based on its predicate function such","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159383,"byte_end":159458,"line_start":3322,"line_end":3322,"column_start":1,"column_end":76}},{"value":"/ that the elements returned are separated by contiguous runs of codepoints","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159459,"byte_end":159536,"line_start":3323,"line_end":3323,"column_start":1,"column_end":78}},{"value":"/ for which the predicate returns true.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159537,"byte_end":159578,"line_start":3324,"line_end":3324,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159579,"byte_end":159582,"line_start":3325,"line_end":3325,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159583,"byte_end":159661,"line_start":3326,"line_end":3326,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159662,"byte_end":159712,"line_start":3327,"line_end":3327,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1150},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":160878,"byte_end":160883,"line_start":3373,"line_end":3373,"column_start":12,"column_end":17},"name":"Split","qualname":"::ext_slice::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":160717,"byte_end":160788,"line_start":3369,"line_end":3369,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":160789,"byte_end":160792,"line_start":3370,"line_end":3370,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":160793,"byte_end":160849,"line_start":3371,"line_end":3371,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":162706,"byte_end":162718,"line_start":3429,"line_end":3429,"column_start":12,"column_end":24},"name":"SplitReverse","qualname":"::ext_slice::SplitReverse","value":"SplitReverse {  }","parent":null,"children":[{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162}],"decl_id":null,"docs":" An iterator over substrings in a byte string, split by a separator, in\n reverse.","sig":null,"attributes":[{"value":"/ An iterator over substrings in a byte string, split by a separator, in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":162456,"byte_end":162530,"line_start":3423,"line_end":3423,"column_start":1,"column_end":75}},{"value":"/ reverse.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":162531,"byte_end":162543,"line_start":3424,"line_end":3424,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":162544,"byte_end":162547,"line_start":3425,"line_end":3425,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":162548,"byte_end":162626,"line_start":3426,"line_end":3426,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":162627,"byte_end":162677,"line_start":3427,"line_end":3427,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1166},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164590,"byte_end":164596,"line_start":3486,"line_end":3486,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::ext_slice::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164340,"byte_end":164412,"line_start":3480,"line_end":3480,"column_start":1,"column_end":73}},{"value":"/ separator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164413,"byte_end":164427,"line_start":3481,"line_end":3481,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164428,"byte_end":164431,"line_start":3482,"line_end":3482,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164432,"byte_end":164510,"line_start":3483,"line_end":3483,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164511,"byte_end":164561,"line_start":3484,"line_end":3484,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1174},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165556,"byte_end":165569,"line_start":3525,"line_end":3525,"column_start":12,"column_end":25},"name":"SplitNReverse","qualname":"::ext_slice::SplitNReverse","value":"SplitNReverse {  }","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178}],"decl_id":null,"docs":" An iterator over at most `n` substrings in a byte string, split by a\n separator, in reverse.","sig":null,"attributes":[{"value":"/ An iterator over at most `n` substrings in a byte string, split by a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165294,"byte_end":165366,"line_start":3519,"line_end":3519,"column_start":1,"column_end":73}},{"value":"/ separator, in reverse.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165367,"byte_end":165393,"line_start":3520,"line_end":3520,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165394,"byte_end":165397,"line_start":3521,"line_end":3521,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being split, while `F` is the type","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165398,"byte_end":165476,"line_start":3522,"line_end":3522,"column_start":1,"column_end":79}},{"value":"/ of the predicate, i.e., `FnMut(char) -> bool`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165477,"byte_end":165527,"line_start":3523,"line_end":3523,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":404},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166550,"byte_end":166555,"line_start":3564,"line_end":3564,"column_start":12,"column_end":17},"name":"Lines","qualname":"::ext_slice::Lines","value":"Lines {  }","parent":null,"children":[{"krate":0,"index":406}],"decl_id":null,"docs":" An iterator over all lines in a byte string, without their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, without their terminators.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166305,"byte_end":166380,"line_start":3558,"line_end":3558,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166381,"byte_end":166384,"line_start":3559,"line_end":3559,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminators recognized are `\\r\\n` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166385,"byte_end":166459,"line_start":3560,"line_end":3560,"column_start":1,"column_end":75}},{"value":"/ `\\n`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166460,"byte_end":166469,"line_start":3561,"line_end":3561,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166470,"byte_end":166473,"line_start":3562,"line_end":3562,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166474,"byte_end":166538,"line_start":3563,"line_end":3563,"column_start":1,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167728,"byte_end":167747,"line_start":3603,"line_end":3603,"column_start":12,"column_end":31},"name":"LinesWithTerminator","qualname":"::ext_slice::LinesWithTerminator","value":"LinesWithTerminator {  }","parent":null,"children":[{"krate":0,"index":416}],"decl_id":null,"docs":" An iterator over all lines in a byte string, including their terminators.","sig":null,"attributes":[{"value":"/ An iterator over all lines in a byte string, including their terminators.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167123,"byte_end":167200,"line_start":3590,"line_end":3590,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167201,"byte_end":167204,"line_start":3591,"line_end":3591,"column_start":1,"column_end":4}},{"value":"/ For this iterator, the only line terminator recognized is `\\n`. (Since","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167205,"byte_end":167279,"line_start":3592,"line_end":3592,"column_start":1,"column_end":75}},{"value":"/ line terminators are included, this also handles `\\r\\n` line endings.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167280,"byte_end":167354,"line_start":3593,"line_end":3593,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167355,"byte_end":167358,"line_start":3594,"line_end":3594,"column_start":1,"column_end":4}},{"value":"/ Line terminators are only included if they are present in the original","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167359,"byte_end":167433,"line_start":3595,"line_end":3595,"column_start":1,"column_end":75}},{"value":"/ byte string. For example, the last line in a byte string may not end with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167434,"byte_end":167511,"line_start":3596,"line_end":3596,"column_start":1,"column_end":78}},{"value":"/ a line terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167512,"byte_end":167534,"line_start":3597,"line_end":3597,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167535,"byte_end":167538,"line_start":3598,"line_end":3598,"column_start":1,"column_end":4}},{"value":"/ Concatenating all elements yielded by this iterator is guaranteed to yield","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167539,"byte_end":167617,"line_start":3599,"line_end":3599,"column_start":1,"column_end":79}},{"value":"/ the original byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167618,"byte_end":167647,"line_start":3600,"line_end":3600,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167648,"byte_end":167651,"line_start":3601,"line_end":3601,"column_start":1,"column_end":4}},{"value":"/ `'a` is the lifetime of the byte string being iterated over.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167652,"byte_end":167716,"line_start":3602,"line_end":3602,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170669,"byte_end":170675,"line_start":34,"line_end":34,"column_start":8,"column_end":14},"name":"concat","qualname":"::ext_vec::concat","value":"pub fn concat<T, I>(I) -> Vec<u8> where T: AsRef<[u8]>, I: IntoIterator<Item =\nT>","parent":null,"children":[],"decl_id":null,"docs":" Concatenate the elements given by the iterator together into a single\n `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Concatenate the elements given by the iterator together into a single","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170230,"byte_end":170303,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170304,"byte_end":170318,"line_start":18,"line_end":18,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170319,"byte_end":170322,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ The elements may be any type that can be cheaply converted into an `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170323,"byte_end":170402,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ This includes, but is not limited to, `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170403,"byte_end":170480,"line_start":21,"line_end":21,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170481,"byte_end":170484,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170485,"byte_end":170499,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170500,"byte_end":170503,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170504,"byte_end":170520,"line_start":25,"line_end":25,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170521,"byte_end":170524,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170525,"byte_end":170532,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170533,"byte_end":170546,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170547,"byte_end":170550,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::concat(&[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170551,"byte_end":170600,"line_start":30,"line_end":30,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(s, \"foobarbaz\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170601,"byte_end":170643,"line_start":31,"line_end":31,"column_start":1,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170644,"byte_end":170651,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170652,"byte_end":170661,"line_start":33,"line_end":33,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":446},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171352,"byte_end":171356,"line_start":64,"line_end":64,"column_start":8,"column_end":12},"name":"join","qualname":"::ext_vec::join","value":"pub fn join<B, T, I>(B, I) -> Vec<u8> where B: AsRef<[u8]>, T: AsRef<[u8]>,\nI: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Join the elements given by the iterator with the given separator into a\n single `Vec<u8>`.","sig":null,"attributes":[{"value":"/ Join the elements given by the iterator with the given separator into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170872,"byte_end":170947,"line_start":46,"line_end":46,"column_start":1,"column_end":76}},{"value":"/ single `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170948,"byte_end":170969,"line_start":47,"line_end":47,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170970,"byte_end":170973,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Both the separator and the elements may be any type that can be cheaply","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":170974,"byte_end":171049,"line_start":49,"line_end":49,"column_start":1,"column_end":76}},{"value":"/ converted into an `&[u8]`. This includes, but is not limited to,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171050,"byte_end":171118,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ `&str`, `&BStr` and `&[u8]` itself.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171119,"byte_end":171158,"line_start":51,"line_end":51,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171159,"byte_end":171162,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171163,"byte_end":171177,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171178,"byte_end":171181,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171182,"byte_end":171198,"line_start":55,"line_end":55,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171199,"byte_end":171202,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171203,"byte_end":171210,"line_start":57,"line_end":57,"column_start":1,"column_end":8}},{"value":"/ use bstr;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171211,"byte_end":171224,"line_start":58,"line_end":58,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171225,"byte_end":171228,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ let s = bstr::join(\",\", &[\"foo\", \"bar\", \"baz\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171229,"byte_end":171281,"line_start":60,"line_end":60,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(s, \"foo,bar,baz\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171282,"byte_end":171326,"line_start":61,"line_end":61,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171327,"byte_end":171334,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171335,"byte_end":171344,"line_start":63,"line_end":63,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":454},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172149,"byte_end":172155,"line_start":104,"line_end":104,"column_start":11,"column_end":17},"name":"Sealed","qualname":"::ext_vec::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Ensure that callers cannot implement `ByteSlice` by making an\n umplementable trait its super trait.\n","sig":null,"attributes":[{"value":"/ Ensure that callers cannot implement `ByteSlice` by making an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172032,"byte_end":172097,"line_start":102,"line_end":102,"column_start":1,"column_end":66}},{"value":"/ umplementable trait its super trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172098,"byte_end":172138,"line_start":103,"line_end":103,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":456},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172575,"byte_end":172582,"line_start":119,"line_end":119,"column_start":11,"column_end":18},"name":"ByteVec","qualname":"::ext_vec::ByteVec","value":"ByteVec: Sealed","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":465},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481},{"krate":0,"index":484},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":499}],"decl_id":null,"docs":" A trait that extends `Vec<u8>` with string oriented methods.","sig":null,"attributes":[{"value":"/ A trait that extends `Vec<u8>` with string oriented methods.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172187,"byte_end":172251,"line_start":107,"line_end":107,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172252,"byte_end":172255,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ Note that when using the constructor methods, such as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172256,"byte_end":172313,"line_start":109,"line_end":109,"column_start":1,"column_end":58}},{"value":"/ `ByteVec::from_slice`, one should actually call them using the concrete","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172314,"byte_end":172389,"line_start":110,"line_end":110,"column_start":1,"column_end":76}},{"value":"/ type. For example:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172390,"byte_end":172412,"line_start":111,"line_end":111,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172413,"byte_end":172416,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172417,"byte_end":172424,"line_start":113,"line_end":113,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172425,"byte_end":172452,"line_start":114,"line_end":114,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172453,"byte_end":172456,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ let s = Vec::from_slice(b\"abc\"); // NOT ByteVec::from_slice(\"...\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172457,"byte_end":172527,"line_start":116,"line_end":116,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172528,"byte_end":172556,"line_start":117,"line_end":117,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172557,"byte_end":172564,"line_start":118,"line_end":118,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":457},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172815,"byte_end":172821,"line_start":124,"line_end":124,"column_start":8,"column_end":14},"name":"as_vec","qualname":"::ext_vec::ByteVec::as_vec","value":"pub fn as_vec(&Self) -> &Vec<u8>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type. This is\n always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type. This is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172597,"byte_end":172666,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172671,"byte_end":172743,"line_start":121,"line_end":121,"column_start":5,"column_end":77}},{"value":"/ for making the extension trait work.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172748,"byte_end":172788,"line_start":122,"line_end":122,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173074,"byte_end":173084,"line_start":130,"line_end":130,"column_start":8,"column_end":18},"name":"as_vec_mut","qualname":"::ext_vec::ByteVec::as_vec_mut","value":"pub fn as_vec_mut(&mut Self) -> &mut Vec<u8>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" A method for accessing the raw vector bytes of this type, mutably. This\n is always a no-op and callers shouldn't care about it. This only exists\n for making the extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for accessing the raw vector bytes of this type, mutably. This","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172847,"byte_end":172922,"line_start":126,"line_end":126,"column_start":5,"column_end":80}},{"value":"/ is always a no-op and callers shouldn't care about it. This only exists","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172927,"byte_end":173002,"line_start":127,"line_end":127,"column_start":5,"column_end":80}},{"value":"/ for making the extension trait work.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173007,"byte_end":173047,"line_start":128,"line_end":128,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":459},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173327,"byte_end":173335,"line_start":136,"line_end":136,"column_start":8,"column_end":16},"name":"into_vec","qualname":"::ext_vec::ByteVec::into_vec","value":"pub fn into_vec(Self) -> Vec<u8> where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" A method for consuming ownership of this vector. This is always a no-op\n and callers shouldn't care about it. This only exists for making the\n extension trait work.\n","sig":null,"attributes":[{"value":"/ A method for consuming ownership of this vector. This is always a no-op","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173118,"byte_end":173193,"line_start":132,"line_end":132,"column_start":5,"column_end":80}},{"value":"/ and callers shouldn't care about it. This only exists for making the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173198,"byte_end":173270,"line_start":133,"line_end":133,"column_start":5,"column_end":77}},{"value":"/ extension trait work.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173275,"byte_end":173300,"line_start":134,"line_end":134,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173674,"byte_end":173684,"line_start":153,"line_end":153,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::ext_vec::ByteVec::from_slice","value":"pub fn from_slice<B: AsRef<[u8]>>(B) -> Vec<u8>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Create a new owned byte string from the given byte slice.","sig":null,"attributes":[{"value":"/ Create a new owned byte string from the given byte slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173389,"byte_end":173450,"line_start":140,"line_end":140,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173455,"byte_end":173458,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173463,"byte_end":173477,"line_start":142,"line_end":142,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173482,"byte_end":173485,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173490,"byte_end":173506,"line_start":144,"line_end":144,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173511,"byte_end":173514,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173519,"byte_end":173526,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173531,"byte_end":173558,"line_start":147,"line_end":147,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173563,"byte_end":173566,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let s = Vec::from_slice(b\"abc\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173571,"byte_end":173607,"line_start":149,"line_end":149,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(s, B(\"abc\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173612,"byte_end":173640,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173645,"byte_end":173652,"line_start":151,"line_end":151,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173657,"byte_end":173666,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174311,"byte_end":174325,"line_start":176,"line_end":176,"column_start":8,"column_end":22},"name":"from_os_string","qualname":"::ext_vec::ByteVec::from_os_string","value":"pub fn from_os_string(OsString) -> Result<Vec<u8>, OsString>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned OS string.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned OS string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173767,"byte_end":173820,"line_start":157,"line_end":157,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173825,"byte_end":173828,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173833,"byte_end":173905,"line_start":159,"line_end":159,"column_start":5,"column_end":77}},{"value":"/ this returns the original OS string if it is not valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173910,"byte_end":173975,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173980,"byte_end":173983,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":173988,"byte_end":174002,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174007,"byte_end":174010,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174015,"byte_end":174031,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174036,"byte_end":174039,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174044,"byte_end":174051,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsString;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174056,"byte_end":174083,"line_start":167,"line_end":167,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174088,"byte_end":174091,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174096,"byte_end":174123,"line_start":169,"line_end":169,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174128,"byte_end":174131,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsString::from(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174136,"byte_end":174175,"line_start":171,"line_end":171,"column_start":5,"column_end":44}},{"value":"/ let bs = Vec::from_os_string(os_str).expect(\"valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174180,"byte_end":174243,"line_start":172,"line_end":172,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174248,"byte_end":174277,"line_start":173,"line_end":173,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174282,"byte_end":174289,"line_start":174,"line_end":174,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174294,"byte_end":174303,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":465},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175472,"byte_end":175489,"line_start":215,"line_end":215,"column_start":8,"column_end":25},"name":"from_os_str_lossy","qualname":"::ext_vec::ByteVec::from_os_str_lossy","value":"pub fn from_os_str_lossy<'a>(&'a OsStr) -> Cow","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from an OS string slice.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from an OS string slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174782,"byte_end":174843,"line_start":194,"line_end":194,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174848,"byte_end":174851,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174856,"byte_end":174931,"line_start":196,"line_end":196,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given OS string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":174936,"byte_end":175008,"line_start":197,"line_end":197,"column_start":5,"column_end":77}},{"value":"/ slice is not valid UTF-8, then it is lossily decoded into valid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175013,"byte_end":175086,"line_start":198,"line_end":198,"column_start":5,"column_end":78}},{"value":"/ (with invalid bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175091,"byte_end":175162,"line_start":199,"line_end":199,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175167,"byte_end":175170,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175175,"byte_end":175189,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175194,"byte_end":175197,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175202,"byte_end":175218,"line_start":203,"line_end":203,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175223,"byte_end":175226,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175231,"byte_end":175238,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175243,"byte_end":175267,"line_start":206,"line_end":206,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175272,"byte_end":175275,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175280,"byte_end":175307,"line_start":208,"line_end":208,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175312,"byte_end":175315,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let os_str = OsStr::new(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175320,"byte_end":175355,"line_start":210,"line_end":210,"column_start":5,"column_end":40}},{"value":"/ let bs = Vec::from_os_str_lossy(os_str);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175360,"byte_end":175404,"line_start":211,"line_end":211,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175409,"byte_end":175438,"line_start":212,"line_end":212,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175443,"byte_end":175450,"line_start":213,"line_end":213,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":175455,"byte_end":175464,"line_start":214,"line_end":214,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176598,"byte_end":176611,"line_start":255,"line_end":255,"column_start":8,"column_end":21},"name":"from_path_buf","qualname":"::ext_vec::ByteVec::from_path_buf","value":"pub fn from_path_buf(PathBuf) -> Result<Vec<u8>, PathBuf>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Create a new byte string from an owned file path.","sig":null,"attributes":[{"value":"/ Create a new byte string from an owned file path.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176057,"byte_end":176110,"line_start":236,"line_end":236,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176115,"byte_end":176118,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176123,"byte_end":176195,"line_start":238,"line_end":238,"column_start":5,"column_end":77}},{"value":"/ this returns the original path if it is not valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176200,"byte_end":176260,"line_start":239,"line_end":239,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176265,"byte_end":176268,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176273,"byte_end":176287,"line_start":241,"line_end":241,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176292,"byte_end":176295,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176300,"byte_end":176316,"line_start":243,"line_end":243,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176321,"byte_end":176324,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176329,"byte_end":176336,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ use std::path::PathBuf;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176341,"byte_end":176368,"line_start":246,"line_end":246,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176373,"byte_end":176376,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176381,"byte_end":176408,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176413,"byte_end":176416,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ let path = PathBuf::from(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176421,"byte_end":176457,"line_start":250,"line_end":250,"column_start":5,"column_end":41}},{"value":"/ let bs = Vec::from_path_buf(path).expect(\"must be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176462,"byte_end":176530,"line_start":251,"line_end":251,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176535,"byte_end":176564,"line_start":252,"line_end":252,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176569,"byte_end":176576,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176581,"byte_end":176590,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":471},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177407,"byte_end":177422,"line_start":280,"line_end":280,"column_start":8,"column_end":23},"name":"from_path_lossy","qualname":"::ext_vec::ByteVec::from_path_lossy","value":"pub fn from_path_lossy<'a>(&'a Path) -> Cow","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Lossily create a new byte string from a file path.","sig":null,"attributes":[{"value":"/ Lossily create a new byte string from a file path.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176742,"byte_end":176796,"line_start":259,"line_end":259,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176801,"byte_end":176804,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds, is zero cost and always returns a slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176809,"byte_end":176884,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/ On non-Unix systems, this does a UTF-8 check. If the given path is not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176889,"byte_end":176963,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ valid UTF-8, then it is lossily decoded into valid UTF-8 (with invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":176968,"byte_end":177042,"line_start":263,"line_end":263,"column_start":5,"column_end":79}},{"value":"/ bytes replaced by the Unicode replacement codepoint).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177047,"byte_end":177104,"line_start":264,"line_end":264,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177109,"byte_end":177112,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177117,"byte_end":177131,"line_start":266,"line_end":266,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177136,"byte_end":177139,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177144,"byte_end":177160,"line_start":268,"line_end":268,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177165,"byte_end":177168,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177173,"byte_end":177180,"line_start":270,"line_end":270,"column_start":5,"column_end":12}},{"value":"/ use std::path::Path;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177185,"byte_end":177209,"line_start":271,"line_end":271,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177214,"byte_end":177217,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177222,"byte_end":177249,"line_start":273,"line_end":273,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177254,"byte_end":177257,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let path = Path::new(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177262,"byte_end":177294,"line_start":275,"line_end":275,"column_start":5,"column_end":37}},{"value":"/ let bs = Vec::from_path_lossy(path);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177299,"byte_end":177339,"line_start":276,"line_end":276,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(bs, B(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177344,"byte_end":177373,"line_start":277,"line_end":277,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177378,"byte_end":177385,"line_start":278,"line_end":278,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177390,"byte_end":177399,"line_start":279,"line_end":279,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":473},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178116,"byte_end":178125,"line_start":304,"line_end":304,"column_start":8,"column_end":17},"name":"push_byte","qualname":"::ext_vec::ByteVec::push_byte","value":"pub fn push_byte(&mut Self, u8)","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Appends the given byte to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given byte to the end of this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177522,"byte_end":177580,"line_start":284,"line_end":284,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177585,"byte_end":177588,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::push` method. This","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177593,"byte_end":177665,"line_start":286,"line_end":286,"column_start":5,"column_end":77}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177670,"byte_end":177738,"line_start":287,"line_end":287,"column_start":5,"column_end":73}},{"value":"/ between pushing bytes, codepoints and strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177743,"byte_end":177793,"line_start":288,"line_end":288,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177798,"byte_end":177801,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177806,"byte_end":177820,"line_start":290,"line_end":290,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177825,"byte_end":177828,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177833,"byte_end":177849,"line_start":292,"line_end":292,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177854,"byte_end":177857,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177862,"byte_end":177869,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177874,"byte_end":177896,"line_start":295,"line_end":295,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177901,"byte_end":177904,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177909,"byte_end":177948,"line_start":297,"line_end":297,"column_start":5,"column_end":44}},{"value":"/ s.push_byte(b'\\xE2');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177953,"byte_end":177978,"line_start":298,"line_end":298,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x98');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":177983,"byte_end":178008,"line_start":299,"line_end":299,"column_start":5,"column_end":30}},{"value":"/ s.push_byte(b'\\x83');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178013,"byte_end":178038,"line_start":300,"line_end":300,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(s, \"abc☃\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178043,"byte_end":178082,"line_start":301,"line_end":301,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178087,"byte_end":178094,"line_start":302,"line_end":302,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178099,"byte_end":178108,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178569,"byte_end":178578,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"push_char","qualname":"::ext_vec::ByteVec::push_char","value":"pub fn push_char(&mut Self, char)","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Appends the given `char` to the end of this byte string.","sig":null,"attributes":[{"value":"/ Appends the given `char` to the end of this byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178198,"byte_end":178258,"line_start":308,"line_end":308,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178263,"byte_end":178266,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178271,"byte_end":178285,"line_start":310,"line_end":310,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178290,"byte_end":178293,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178298,"byte_end":178314,"line_start":312,"line_end":312,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178319,"byte_end":178322,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178327,"byte_end":178334,"line_start":314,"line_end":314,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178339,"byte_end":178361,"line_start":315,"line_end":315,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178366,"byte_end":178369,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178374,"byte_end":178413,"line_start":317,"line_end":317,"column_start":5,"column_end":44}},{"value":"/ s.push_char('1');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178418,"byte_end":178439,"line_start":318,"line_end":318,"column_start":5,"column_end":26}},{"value":"/ s.push_char('2');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178444,"byte_end":178465,"line_start":319,"line_end":319,"column_start":5,"column_end":26}},{"value":"/ s.push_char('3');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178470,"byte_end":178491,"line_start":320,"line_end":320,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178496,"byte_end":178535,"line_start":321,"line_end":321,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178540,"byte_end":178547,"line_start":322,"line_end":322,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178552,"byte_end":178561,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179287,"byte_end":179295,"line_start":349,"line_end":349,"column_start":8,"column_end":16},"name":"push_str","qualname":"::ext_vec::ByteVec::push_str","value":"pub fn push_str<B: AsRef<[u8]>>(&mut Self, B)","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Appends the given slice to the end of this byte string. This accepts\n any type that be converted to a `&[u8]`. This includes, but is not\n limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","sig":null,"attributes":[{"value":"/ Appends the given slice to the end of this byte string. This accepts","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178811,"byte_end":178883,"line_start":333,"line_end":333,"column_start":5,"column_end":77}},{"value":"/ any type that be converted to a `&[u8]`. This includes, but is not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178888,"byte_end":178958,"line_start":334,"line_end":334,"column_start":5,"column_end":75}},{"value":"/ limited to, `&str`, `&BStr`, and of course, `&[u8]` itself.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":178963,"byte_end":179026,"line_start":335,"line_end":335,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179031,"byte_end":179034,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179039,"byte_end":179053,"line_start":337,"line_end":337,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179058,"byte_end":179061,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179066,"byte_end":179082,"line_start":339,"line_end":339,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179087,"byte_end":179090,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179095,"byte_end":179102,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179107,"byte_end":179129,"line_start":342,"line_end":342,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179134,"byte_end":179137,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ let mut s = <Vec<u8>>::from(\"abc\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179142,"byte_end":179181,"line_start":344,"line_end":344,"column_start":5,"column_end":44}},{"value":"/ s.push_str(b\"123\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179186,"byte_end":179209,"line_start":345,"line_end":345,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(s, \"abc123\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179214,"byte_end":179253,"line_start":346,"line_end":346,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179258,"byte_end":179265,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179270,"byte_end":179279,"line_start":348,"line_end":348,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180811,"byte_end":180822,"line_start":394,"line_end":394,"column_start":8,"column_end":19},"name":"into_string","qualname":"::ext_vec::ByteVec::into_string","value":"pub fn into_string(Self) -> Result<String, FromUtf8Error> where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Converts a `Vec<u8>` into a `String` if and only if this byte string is\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Converts a `Vec<u8>` into a `String` if and only if this byte string is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179407,"byte_end":179482,"line_start":353,"line_end":353,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179487,"byte_end":179503,"line_start":354,"line_end":354,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179508,"byte_end":179511,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ If it is not valid UTF-8, then a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179516,"byte_end":179552,"line_start":356,"line_end":356,"column_start":5,"column_end":41}},{"value":"/ [`FromUtf8Error`](struct.FromUtf8Error.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179557,"byte_end":179605,"line_start":357,"line_end":357,"column_start":5,"column_end":53}},{"value":"/ is returned. (This error can be used to examine why UTF-8 validation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179610,"byte_end":179682,"line_start":358,"line_end":358,"column_start":5,"column_end":77}},{"value":"/ failed, or to regain the original byte string.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179687,"byte_end":179738,"line_start":359,"line_end":359,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179743,"byte_end":179746,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179751,"byte_end":179765,"line_start":361,"line_end":361,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179770,"byte_end":179773,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179778,"byte_end":179794,"line_start":363,"line_end":363,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179799,"byte_end":179802,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179807,"byte_end":179814,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179819,"byte_end":179841,"line_start":366,"line_end":366,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179846,"byte_end":179849,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), Box<dyn std::error::Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179854,"byte_end":179916,"line_start":368,"line_end":368,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(\"hello\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179921,"byte_end":179956,"line_start":369,"line_end":369,"column_start":5,"column_end":40}},{"value":"/ let string = bytes.into_string()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":179961,"byte_end":179999,"line_start":370,"line_end":370,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180004,"byte_end":180007,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"hello\", string);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180012,"byte_end":180044,"line_start":372,"line_end":372,"column_start":5,"column_end":37}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180049,"byte_end":180083,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180088,"byte_end":180095,"line_start":374,"line_end":374,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180100,"byte_end":180103,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ If this byte string is not valid UTF-8, then an error will be returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180108,"byte_end":180183,"line_start":376,"line_end":376,"column_start":5,"column_end":80}},{"value":"/ That error can then be used to inspect the location at which invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180188,"byte_end":180260,"line_start":377,"line_end":377,"column_start":5,"column_end":77}},{"value":"/ UTF-8 was found, or to regain the original byte string:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180265,"byte_end":180324,"line_start":378,"line_end":378,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180329,"byte_end":180332,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180337,"byte_end":180344,"line_start":380,"line_end":380,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180349,"byte_end":180376,"line_start":381,"line_end":381,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180381,"byte_end":180384,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180389,"byte_end":180436,"line_start":383,"line_end":383,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180441,"byte_end":180488,"line_start":384,"line_end":384,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180493,"byte_end":180496,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180501,"byte_end":180551,"line_start":386,"line_end":386,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180556,"byte_end":180610,"line_start":387,"line_end":387,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180615,"byte_end":180618,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180623,"byte_end":180685,"line_start":389,"line_end":389,"column_start":5,"column_end":67}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180690,"byte_end":180732,"line_start":390,"line_end":390,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180737,"byte_end":180777,"line_start":391,"line_end":391,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180782,"byte_end":180789,"line_start":392,"line_end":392,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":180794,"byte_end":180803,"line_start":393,"line_end":393,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181732,"byte_end":181749,"line_start":424,"line_end":424,"column_start":8,"column_end":25},"name":"into_string_lossy","qualname":"::ext_vec::ByteVec::into_string_lossy","value":"pub fn into_string_lossy(Self) -> String where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Lossily converts a `Vec<u8>` into a `String`. If this byte string\n contains invalid UTF-8, then the invalid bytes are replaced with the\n Unicode replacement codepoint.","sig":null,"attributes":[{"value":"/ Lossily converts a `Vec<u8>` into a `String`. If this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181256,"byte_end":181325,"line_start":408,"line_end":408,"column_start":5,"column_end":74}},{"value":"/ contains invalid UTF-8, then the invalid bytes are replaced with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181330,"byte_end":181402,"line_start":409,"line_end":409,"column_start":5,"column_end":77}},{"value":"/ Unicode replacement codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181407,"byte_end":181441,"line_start":410,"line_end":410,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181446,"byte_end":181449,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181454,"byte_end":181468,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181473,"byte_end":181476,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181481,"byte_end":181497,"line_start":414,"line_end":414,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181502,"byte_end":181505,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181510,"byte_end":181517,"line_start":416,"line_end":416,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181522,"byte_end":181544,"line_start":417,"line_end":417,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181549,"byte_end":181552,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181557,"byte_end":181604,"line_start":419,"line_end":419,"column_start":5,"column_end":52}},{"value":"/ let string = bytes.into_string_lossy();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181609,"byte_end":181652,"line_start":420,"line_end":420,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(string, \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181657,"byte_end":181698,"line_start":421,"line_end":421,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181703,"byte_end":181710,"line_start":422,"line_end":422,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":181715,"byte_end":181724,"line_start":423,"line_end":423,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183146,"byte_end":183167,"line_start":465,"line_end":465,"column_start":15,"column_end":36},"name":"into_string_unchecked","qualname":"::ext_vec::ByteVec::into_string_unchecked","value":"pub unsafe fn into_string_unchecked(Self) -> String where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Unsafely convert this byte string into a `String`, without checking for\n valid UTF-8.","sig":null,"attributes":[{"value":"/ Unsafely convert this byte string into a `String`, without checking for","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182136,"byte_end":182211,"line_start":438,"line_end":438,"column_start":5,"column_end":80}},{"value":"/ valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182216,"byte_end":182232,"line_start":439,"line_end":439,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182237,"byte_end":182240,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182245,"byte_end":182257,"line_start":441,"line_end":441,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182262,"byte_end":182265,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ Callers *must* ensure that this byte string is valid UTF-8 before","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182270,"byte_end":182339,"line_start":443,"line_end":443,"column_start":5,"column_end":74}},{"value":"/ calling this method. Converting a byte string into a `String` that is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182344,"byte_end":182417,"line_start":444,"line_end":444,"column_start":5,"column_end":78}},{"value":"/ not valid UTF-8 is considered undefined behavior.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182422,"byte_end":182475,"line_start":445,"line_end":445,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182480,"byte_end":182483,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ This routine is useful in performance sensitive contexts where the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182488,"byte_end":182558,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"/ UTF-8 validity of the byte string is already known and it is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182563,"byte_end":182627,"line_start":448,"line_end":448,"column_start":5,"column_end":69}},{"value":"/ undesirable to pay the cost of an additional UTF-8 validation check","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182632,"byte_end":182703,"line_start":449,"line_end":449,"column_start":5,"column_end":76}},{"value":"/ that [`into_string`](#method.into_string) performs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182708,"byte_end":182763,"line_start":450,"line_end":450,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182768,"byte_end":182771,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182776,"byte_end":182790,"line_start":452,"line_end":452,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182795,"byte_end":182798,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182803,"byte_end":182819,"line_start":454,"line_end":454,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182824,"byte_end":182827,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182832,"byte_end":182839,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182844,"byte_end":182866,"line_start":457,"line_end":457,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182871,"byte_end":182874,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ // SAFETY: This is safe because string literals are guaranteed to be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182879,"byte_end":182951,"line_start":459,"line_end":459,"column_start":5,"column_end":77}},{"value":"/ // valid UTF-8 by the Rust compiler.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":182956,"byte_end":182996,"line_start":460,"line_end":460,"column_start":5,"column_end":45}},{"value":"/ let s = unsafe { Vec::from(\"☃βツ\").into_string_unchecked() };","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183001,"byte_end":183070,"line_start":461,"line_end":461,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(\"☃βツ\", s);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183075,"byte_end":183105,"line_start":462,"line_end":462,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183110,"byte_end":183117,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183122,"byte_end":183131,"line_start":464,"line_end":464,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183838,"byte_end":183852,"line_start":491,"line_end":491,"column_start":8,"column_end":22},"name":"into_os_string","qualname":"::ext_vec::ByteVec::into_os_string","value":"pub fn into_os_string(Self) -> Result<OsString, Vec<u8>> where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an OS string, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183285,"byte_end":183343,"line_start":472,"line_end":472,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183348,"byte_end":183351,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183356,"byte_end":183428,"line_start":474,"line_end":474,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183433,"byte_end":183500,"line_start":475,"line_end":475,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183505,"byte_end":183508,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183513,"byte_end":183527,"line_start":477,"line_end":477,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183532,"byte_end":183535,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183540,"byte_end":183556,"line_start":479,"line_end":479,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183561,"byte_end":183564,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183569,"byte_end":183576,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ use std::ffi::OsStr;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183581,"byte_end":183605,"line_start":482,"line_end":482,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183610,"byte_end":183613,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183618,"byte_end":183640,"line_start":484,"line_end":484,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183645,"byte_end":183648,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183653,"byte_end":183683,"line_start":486,"line_end":486,"column_start":5,"column_end":35}},{"value":"/ let os_str = bs.into_os_string().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183688,"byte_end":183757,"line_start":487,"line_end":487,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(os_str, OsStr::new(\"foo\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183762,"byte_end":183804,"line_start":488,"line_end":488,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183809,"byte_end":183816,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":183821,"byte_end":183830,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185220,"byte_end":185240,"line_start":537,"line_end":537,"column_start":8,"column_end":28},"name":"into_os_string_lossy","qualname":"::ext_vec::ByteVec::into_os_string_lossy","value":"pub fn into_os_string_lossy(Self) -> OsString where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an OS string, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an OS string, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184421,"byte_end":184487,"line_start":515,"line_end":515,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184492,"byte_end":184495,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184500,"byte_end":184572,"line_start":517,"line_end":517,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184577,"byte_end":184649,"line_start":518,"line_end":518,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184654,"byte_end":184715,"line_start":519,"line_end":519,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184720,"byte_end":184723,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184728,"byte_end":184801,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184806,"byte_end":184877,"line_start":522,"line_end":522,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184882,"byte_end":184914,"line_start":523,"line_end":523,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184919,"byte_end":184922,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184927,"byte_end":184941,"line_start":525,"line_end":525,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184946,"byte_end":184949,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184954,"byte_end":184970,"line_start":527,"line_end":527,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184975,"byte_end":184978,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184983,"byte_end":184990,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":184995,"byte_end":185017,"line_start":530,"line_end":530,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185022,"byte_end":185025,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185030,"byte_end":185074,"line_start":532,"line_end":532,"column_start":5,"column_end":49}},{"value":"/ let os_str = bs.into_os_string_lossy();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185079,"byte_end":185122,"line_start":533,"line_end":533,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(os_str.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185127,"byte_end":185186,"line_start":534,"line_end":534,"column_start":5,"column_end":64}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185191,"byte_end":185198,"line_start":535,"line_end":535,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185203,"byte_end":185212,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186174,"byte_end":186187,"line_start":575,"line_end":575,"column_start":8,"column_end":21},"name":"into_path_buf","qualname":"::ext_vec::ByteVec::into_path_buf","value":"pub fn into_path_buf(Self) -> Result<PathBuf, Vec<u8>> where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Converts this byte string into an owned file path, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185657,"byte_end":185721,"line_start":558,"line_end":558,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185726,"byte_end":185729,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185734,"byte_end":185806,"line_start":560,"line_end":560,"column_start":5,"column_end":77}},{"value":"/ this returns the original byte string if it is not valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185811,"byte_end":185878,"line_start":561,"line_end":561,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185883,"byte_end":185886,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185891,"byte_end":185905,"line_start":563,"line_end":563,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185910,"byte_end":185913,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185918,"byte_end":185934,"line_start":565,"line_end":565,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185939,"byte_end":185942,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185947,"byte_end":185954,"line_start":567,"line_end":567,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185959,"byte_end":185981,"line_start":568,"line_end":568,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185986,"byte_end":185989,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":185994,"byte_end":186024,"line_start":570,"line_end":570,"column_start":5,"column_end":35}},{"value":"/ let path = bs.into_path_buf().expect(\"should be valid UTF-8\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186029,"byte_end":186095,"line_start":571,"line_end":571,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(path.as_os_str(), \"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186100,"byte_end":186140,"line_start":572,"line_end":572,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186145,"byte_end":186152,"line_start":573,"line_end":573,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186157,"byte_end":186166,"line_start":574,"line_end":574,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187119,"byte_end":187138,"line_start":604,"line_end":604,"column_start":8,"column_end":27},"name":"into_path_buf_lossy","qualname":"::ext_vec::ByteVec::into_path_buf_lossy","value":"pub fn into_path_buf_lossy(Self) -> PathBuf where Self: Sized","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Lossily converts this byte string into an owned file path, in place.","sig":null,"attributes":[{"value":"/ Lossily converts this byte string into an owned file path, in place.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186319,"byte_end":186391,"line_start":582,"line_end":582,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186396,"byte_end":186399,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ On Unix, this always succeeds and is zero cost. On non-Unix systems,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186404,"byte_end":186476,"line_start":584,"line_end":584,"column_start":5,"column_end":77}},{"value":"/ this will perform a UTF-8 check and lossily convert this byte string","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186481,"byte_end":186553,"line_start":585,"line_end":585,"column_start":5,"column_end":77}},{"value":"/ into valid UTF-8 using the Unicode replacement codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186558,"byte_end":186619,"line_start":586,"line_end":586,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186624,"byte_end":186627,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ Note that this can prevent the correct roundtripping of file paths on","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186632,"byte_end":186705,"line_start":588,"line_end":588,"column_start":5,"column_end":78}},{"value":"/ non-Unix systems such as Windows, where file paths are an arbitrary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186710,"byte_end":186781,"line_start":589,"line_end":589,"column_start":5,"column_end":76}},{"value":"/ sequence of 16-bit integers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186786,"byte_end":186818,"line_start":590,"line_end":590,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186823,"byte_end":186826,"line_start":591,"line_end":591,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186831,"byte_end":186845,"line_start":592,"line_end":592,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186850,"byte_end":186853,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186858,"byte_end":186874,"line_start":594,"line_end":594,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186879,"byte_end":186882,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186887,"byte_end":186894,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186899,"byte_end":186921,"line_start":597,"line_end":597,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186926,"byte_end":186929,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ let bs = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186934,"byte_end":186978,"line_start":599,"line_end":599,"column_start":5,"column_end":49}},{"value":"/ let path = bs.into_path_buf_lossy();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":186983,"byte_end":187023,"line_start":600,"line_end":600,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(path.to_string_lossy(), \"foo\\u{FFFD}bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187028,"byte_end":187085,"line_start":601,"line_end":601,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187090,"byte_end":187097,"line_start":602,"line_end":602,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187102,"byte_end":187111,"line_start":603,"line_end":603,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188110,"byte_end":188118,"line_start":636,"line_end":636,"column_start":8,"column_end":16},"name":"pop_byte","qualname":"::ext_vec::ByteVec::pop_byte","value":"pub fn pop_byte(&mut Self) -> Option<u8>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Removes the last byte from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last byte from this `Vec<u8>` and returns it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187255,"byte_end":187316,"line_start":611,"line_end":611,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187321,"byte_end":187324,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187329,"byte_end":187387,"line_start":613,"line_end":613,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187392,"byte_end":187395,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ If the last codepoint in this byte string is not ASCII, then removing","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187400,"byte_end":187473,"line_start":615,"line_end":615,"column_start":5,"column_end":78}},{"value":"/ the last byte could make this byte string contain invalid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187478,"byte_end":187546,"line_start":616,"line_end":616,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187551,"byte_end":187554,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ Note that this is equivalent to the generic `Vec::pop` method. This","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187559,"byte_end":187630,"line_start":618,"line_end":618,"column_start":5,"column_end":76}},{"value":"/ method is provided to permit callers to explicitly differentiate","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187635,"byte_end":187703,"line_start":619,"line_end":619,"column_start":5,"column_end":73}},{"value":"/ between popping bytes and codepoints.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187708,"byte_end":187749,"line_start":620,"line_end":620,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187754,"byte_end":187757,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187762,"byte_end":187776,"line_start":622,"line_end":622,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187781,"byte_end":187784,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187789,"byte_end":187805,"line_start":624,"line_end":624,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187810,"byte_end":187813,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187818,"byte_end":187825,"line_start":626,"line_end":626,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187830,"byte_end":187852,"line_start":627,"line_end":627,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187857,"byte_end":187860,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187865,"byte_end":187898,"line_start":629,"line_end":629,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187903,"byte_end":187944,"line_start":630,"line_end":630,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187949,"byte_end":187990,"line_start":631,"line_end":631,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), Some(b'f'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":187995,"byte_end":188036,"line_start":632,"line_end":632,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(s.pop_byte(), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188041,"byte_end":188076,"line_start":633,"line_end":633,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188081,"byte_end":188088,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188093,"byte_end":188102,"line_start":635,"line_end":635,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189825,"byte_end":189833,"line_start":682,"line_end":682,"column_start":8,"column_end":16},"name":"pop_char","qualname":"::ext_vec::ByteVec::pop_char","value":"pub fn pop_char(&mut Self) -> Option<char>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Removes the last codepoint from this `Vec<u8>` and returns it.","sig":null,"attributes":[{"value":"/ Removes the last codepoint from this `Vec<u8>` and returns it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188189,"byte_end":188255,"line_start":640,"line_end":640,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188260,"byte_end":188263,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ If this byte string is empty, then `None` is returned. If the last","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188268,"byte_end":188338,"line_start":642,"line_end":642,"column_start":5,"column_end":75}},{"value":"/ bytes of this byte string do not correspond to a valid UTF-8 code unit","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188343,"byte_end":188417,"line_start":643,"line_end":643,"column_start":5,"column_end":79}},{"value":"/ sequence, then the Unicode replacement codepoint is yielded instead in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188422,"byte_end":188496,"line_start":644,"line_end":644,"column_start":5,"column_end":79}},{"value":"/ accordance with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188501,"byte_end":188524,"line_start":645,"line_end":645,"column_start":5,"column_end":28}},{"value":"/ [replacement codepoint substitution policy](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188529,"byte_end":188616,"line_start":646,"line_end":646,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188621,"byte_end":188624,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188629,"byte_end":188643,"line_start":648,"line_end":648,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188648,"byte_end":188651,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188656,"byte_end":188672,"line_start":650,"line_end":650,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188677,"byte_end":188680,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188685,"byte_end":188692,"line_start":652,"line_end":652,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188697,"byte_end":188719,"line_start":653,"line_end":653,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188724,"byte_end":188727,"line_start":654,"line_end":654,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188732,"byte_end":188765,"line_start":655,"line_end":655,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188770,"byte_end":188810,"line_start":656,"line_end":656,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188815,"byte_end":188855,"line_start":657,"line_end":657,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188860,"byte_end":188900,"line_start":658,"line_end":658,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188905,"byte_end":188940,"line_start":659,"line_end":659,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188945,"byte_end":188952,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188957,"byte_end":188960,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ This shows the replacement codepoint substitution policy. Note that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":188965,"byte_end":189036,"line_start":662,"line_end":662,"column_start":5,"column_end":76}},{"value":"/ the first pop yields a replacement codepoint but actually removes two","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189041,"byte_end":189114,"line_start":663,"line_end":663,"column_start":5,"column_end":78}},{"value":"/ bytes. This is in contrast with subsequent pops when encountering","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189119,"byte_end":189188,"line_start":664,"line_end":664,"column_start":5,"column_end":74}},{"value":"/ `\\xFF` since `\\xFF` is never a valid prefix for any valid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189193,"byte_end":189260,"line_start":665,"line_end":665,"column_start":5,"column_end":72}},{"value":"/ code unit sequence.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189265,"byte_end":189288,"line_start":666,"line_end":666,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189293,"byte_end":189296,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189301,"byte_end":189308,"line_start":668,"line_end":668,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189313,"byte_end":189335,"line_start":669,"line_end":669,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189340,"byte_end":189343,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"f\\xFF\\xFF\\xFFoo\\xE2\\x98\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189348,"byte_end":189408,"line_start":671,"line_end":671,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189413,"byte_end":189460,"line_start":672,"line_end":672,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189465,"byte_end":189505,"line_start":673,"line_end":673,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189510,"byte_end":189550,"line_start":674,"line_end":674,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189555,"byte_end":189602,"line_start":675,"line_end":675,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189607,"byte_end":189654,"line_start":676,"line_end":676,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('\\u{FFFD}'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189659,"byte_end":189706,"line_start":677,"line_end":677,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.pop_char(), Some('f'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189711,"byte_end":189751,"line_start":678,"line_end":678,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(s.pop_char(), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189756,"byte_end":189791,"line_start":679,"line_end":679,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189796,"byte_end":189803,"line_start":680,"line_end":680,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":189808,"byte_end":189817,"line_start":681,"line_end":681,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191085,"byte_end":191096,"line_start":726,"line_end":726,"column_start":8,"column_end":19},"name":"remove_char","qualname":"::ext_vec::ByteVec::remove_char","value":"pub fn remove_char(&mut Self, usize) -> char","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Removes a `char` from this `Vec<u8>` at the given byte position and\n returns it.","sig":null,"attributes":[{"value":"/ Removes a `char` from this `Vec<u8>` at the given byte position and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190109,"byte_end":190180,"line_start":692,"line_end":692,"column_start":5,"column_end":76}},{"value":"/ returns it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190185,"byte_end":190200,"line_start":693,"line_end":693,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190205,"byte_end":190208,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ If the bytes at the given position do not lead to a valid UTF-8 code","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190213,"byte_end":190285,"line_start":695,"line_end":695,"column_start":5,"column_end":77}},{"value":"/ unit sequence, then a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190290,"byte_end":190315,"line_start":696,"line_end":696,"column_start":5,"column_end":30}},{"value":"/ [replacement codepoint is returned instead](index.html#handling-of-invalid-utf8-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190320,"byte_end":190407,"line_start":697,"line_end":697,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190412,"byte_end":190415,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190420,"byte_end":190432,"line_start":699,"line_end":699,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190437,"byte_end":190440,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than or equal to this byte string's length.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190445,"byte_end":190517,"line_start":701,"line_end":701,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190522,"byte_end":190525,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190530,"byte_end":190544,"line_start":703,"line_end":703,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190549,"byte_end":190552,"line_start":704,"line_end":704,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190557,"byte_end":190573,"line_start":705,"line_end":705,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190578,"byte_end":190581,"line_start":706,"line_end":706,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190586,"byte_end":190593,"line_start":707,"line_end":707,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190598,"byte_end":190620,"line_start":708,"line_end":708,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190625,"byte_end":190628,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foo☃bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190633,"byte_end":190672,"line_start":710,"line_end":710,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(s.remove_char(3), '☃');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190677,"byte_end":190717,"line_start":711,"line_end":711,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190722,"byte_end":190751,"line_start":712,"line_end":712,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190756,"byte_end":190763,"line_start":713,"line_end":713,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190768,"byte_end":190771,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ This example shows how the Unicode replacement codepoint policy is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190776,"byte_end":190846,"line_start":715,"line_end":715,"column_start":5,"column_end":75}},{"value":"/ used:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190851,"byte_end":190860,"line_start":716,"line_end":716,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190865,"byte_end":190868,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190873,"byte_end":190880,"line_start":718,"line_end":718,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190885,"byte_end":190907,"line_start":719,"line_end":719,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190912,"byte_end":190915,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190920,"byte_end":190967,"line_start":721,"line_end":721,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(s.remove_char(3), '\\u{FFFD}');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":190972,"byte_end":191017,"line_start":722,"line_end":722,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(s, b\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191022,"byte_end":191051,"line_start":723,"line_end":723,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191056,"byte_end":191063,"line_start":724,"line_end":724,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191068,"byte_end":191077,"line_start":725,"line_end":725,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192000,"byte_end":192011,"line_start":760,"line_end":760,"column_start":8,"column_end":19},"name":"insert_char","qualname":"::ext_vec::ByteVec::insert_char","value":"pub fn insert_char(&mut Self, usize, char)","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Inserts the given codepoint into this `Vec<u8>` at a particular byte\n position.","sig":null,"attributes":[{"value":"/ Inserts the given codepoint into this `Vec<u8>` at a particular byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191411,"byte_end":191483,"line_start":738,"line_end":738,"column_start":5,"column_end":77}},{"value":"/ position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191488,"byte_end":191501,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191506,"byte_end":191509,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191514,"byte_end":191589,"line_start":741,"line_end":741,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191594,"byte_end":191637,"line_start":742,"line_end":742,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191642,"byte_end":191645,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191650,"byte_end":191662,"line_start":744,"line_end":744,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191667,"byte_end":191670,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191675,"byte_end":191734,"line_start":746,"line_end":746,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191739,"byte_end":191742,"line_start":747,"line_end":747,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191747,"byte_end":191761,"line_start":748,"line_end":748,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191766,"byte_end":191769,"line_start":749,"line_end":749,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191774,"byte_end":191790,"line_start":750,"line_end":750,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191795,"byte_end":191798,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191803,"byte_end":191810,"line_start":752,"line_end":752,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191815,"byte_end":191837,"line_start":753,"line_end":753,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191842,"byte_end":191845,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191850,"byte_end":191886,"line_start":755,"line_end":755,"column_start":5,"column_end":41}},{"value":"/ s.insert_char(3, '☃');","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191891,"byte_end":191919,"line_start":756,"line_end":756,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(s, \"foo☃bar\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191924,"byte_end":191966,"line_start":757,"line_end":757,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191971,"byte_end":191978,"line_start":758,"line_end":758,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":191983,"byte_end":191992,"line_start":759,"line_end":759,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192904,"byte_end":192914,"line_start":790,"line_end":790,"column_start":8,"column_end":18},"name":"insert_str","qualname":"::ext_vec::ByteVec::insert_str","value":"pub fn insert_str<B: AsRef<[u8]>>(&mut Self, usize, B)","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Inserts the given byte string into this byte string at a particular\n byte position.","sig":null,"attributes":[{"value":"/ Inserts the given byte string into this byte string at a particular","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192126,"byte_end":192197,"line_start":764,"line_end":764,"column_start":5,"column_end":76}},{"value":"/ byte position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192202,"byte_end":192220,"line_start":765,"line_end":765,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192225,"byte_end":192228,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/ This is an `O(n)` operation as it may copy a number of elements in this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192233,"byte_end":192308,"line_start":767,"line_end":767,"column_start":5,"column_end":80}},{"value":"/ byte string proportional to its length.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192313,"byte_end":192356,"line_start":768,"line_end":768,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192361,"byte_end":192364,"line_start":769,"line_end":769,"column_start":5,"column_end":8}},{"value":"/ The given byte string may be any type that can be cheaply converted","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192369,"byte_end":192440,"line_start":770,"line_end":770,"column_start":5,"column_end":76}},{"value":"/ into a `&[u8]`. This includes, but is not limited to, `&str` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192445,"byte_end":192513,"line_start":771,"line_end":771,"column_start":5,"column_end":73}},{"value":"/ `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192518,"byte_end":192530,"line_start":772,"line_end":772,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192535,"byte_end":192538,"line_start":773,"line_end":773,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192543,"byte_end":192555,"line_start":774,"line_end":774,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192560,"byte_end":192563,"line_start":775,"line_end":775,"column_start":5,"column_end":8}},{"value":"/ Panics if `at` is larger than the byte string's length.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192568,"byte_end":192627,"line_start":776,"line_end":776,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192632,"byte_end":192635,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192640,"byte_end":192654,"line_start":778,"line_end":778,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192659,"byte_end":192662,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192667,"byte_end":192683,"line_start":780,"line_end":780,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192688,"byte_end":192691,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192696,"byte_end":192703,"line_start":782,"line_end":782,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192708,"byte_end":192730,"line_start":783,"line_end":783,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192735,"byte_end":192738,"line_start":784,"line_end":784,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192743,"byte_end":192779,"line_start":785,"line_end":785,"column_start":5,"column_end":41}},{"value":"/ s.insert_str(3, \"☃☃☃\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192784,"byte_end":192817,"line_start":786,"line_end":786,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(s, \"foo☃☃☃bar\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192822,"byte_end":192870,"line_start":787,"line_end":787,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192875,"byte_end":192882,"line_start":788,"line_end":788,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":192887,"byte_end":192896,"line_start":789,"line_end":789,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194907,"byte_end":194920,"line_start":842,"line_end":842,"column_start":8,"column_end":21},"name":"replace_range","qualname":"::ext_vec::ByteVec::replace_range","value":"pub fn replace_range<R, B>(&mut Self, R, B) where R: ops::RangeBounds<usize>,\nB: AsRef<[u8]>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Removes the specified range in this byte string and replaces it with\n the given bytes. The given bytes do not need to have the same length\n as the range provided.","sig":null,"attributes":[{"value":"/ Removes the specified range in this byte string and replaces it with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194375,"byte_end":194447,"line_start":822,"line_end":822,"column_start":5,"column_end":77}},{"value":"/ the given bytes. The given bytes do not need to have the same length","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194452,"byte_end":194524,"line_start":823,"line_end":823,"column_start":5,"column_end":77}},{"value":"/ as the range provided.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194529,"byte_end":194555,"line_start":824,"line_end":824,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194560,"byte_end":194563,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194568,"byte_end":194580,"line_start":826,"line_end":826,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194585,"byte_end":194588,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is invalid.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194593,"byte_end":194634,"line_start":828,"line_end":828,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194639,"byte_end":194642,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194647,"byte_end":194661,"line_start":830,"line_end":830,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194666,"byte_end":194669,"line_start":831,"line_end":831,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194674,"byte_end":194690,"line_start":832,"line_end":832,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194695,"byte_end":194698,"line_start":833,"line_end":833,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194703,"byte_end":194710,"line_start":834,"line_end":834,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194715,"byte_end":194737,"line_start":835,"line_end":835,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194742,"byte_end":194745,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194750,"byte_end":194786,"line_start":837,"line_end":837,"column_start":5,"column_end":41}},{"value":"/ s.replace_range(2..4, \"xxxxx\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194791,"byte_end":194826,"line_start":838,"line_end":838,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s, \"foxxxxxar\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194831,"byte_end":194873,"line_start":839,"line_end":839,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194878,"byte_end":194885,"line_start":840,"line_end":840,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":194890,"byte_end":194899,"line_start":841,"line_end":841,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196085,"byte_end":196096,"line_start":880,"line_end":880,"column_start":8,"column_end":19},"name":"drain_bytes","qualname":"::ext_vec::ByteVec::drain_bytes","value":"pub fn drain_bytes<R>(&mut Self, R) -> DrainBytes where\nR: ops::RangeBounds<usize>","parent":{"krate":0,"index":456},"children":[],"decl_id":null,"docs":" Creates a draining iterator that removes the specified range in this\n `Vec<u8>` and yields each of the removed bytes.","sig":null,"attributes":[{"value":"/ Creates a draining iterator that removes the specified range in this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195132,"byte_end":195204,"line_start":850,"line_end":850,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` and yields each of the removed bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195209,"byte_end":195260,"line_start":851,"line_end":851,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195265,"byte_end":195268,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Note that the elements specified by the given range are removed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195273,"byte_end":195340,"line_start":853,"line_end":853,"column_start":5,"column_end":72}},{"value":"/ regardless of whether the returned iterator is fully exhausted.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195345,"byte_end":195412,"line_start":854,"line_end":854,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195417,"byte_end":195420,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Also note that is is unspecified how many bytes are removed from the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195425,"byte_end":195497,"line_start":856,"line_end":856,"column_start":5,"column_end":77}},{"value":"/ `Vec<u8>` if the `DrainBytes` iterator is leaked.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195502,"byte_end":195555,"line_start":857,"line_end":857,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195560,"byte_end":195563,"line_start":858,"line_end":858,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195568,"byte_end":195580,"line_start":859,"line_end":859,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195585,"byte_end":195588,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ Panics if the given range is not valid.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195593,"byte_end":195636,"line_start":861,"line_end":861,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195641,"byte_end":195644,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195649,"byte_end":195663,"line_start":863,"line_end":863,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195668,"byte_end":195671,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195676,"byte_end":195692,"line_start":865,"line_end":865,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195697,"byte_end":195700,"line_start":866,"line_end":866,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195705,"byte_end":195712,"line_start":867,"line_end":867,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195717,"byte_end":195739,"line_start":868,"line_end":868,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195744,"byte_end":195747,"line_start":869,"line_end":869,"column_start":5,"column_end":8}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195752,"byte_end":195788,"line_start":870,"line_end":870,"column_start":5,"column_end":41}},{"value":"/ {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195793,"byte_end":195798,"line_start":871,"line_end":871,"column_start":5,"column_end":10}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195803,"byte_end":195849,"line_start":872,"line_end":872,"column_start":5,"column_end":51}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195854,"byte_end":195901,"line_start":873,"line_end":873,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195906,"byte_end":195953,"line_start":874,"line_end":874,"column_start":5,"column_end":52}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":195958,"byte_end":195999,"line_start":875,"line_end":875,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196004,"byte_end":196009,"line_start":876,"line_end":876,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196014,"byte_end":196051,"line_start":877,"line_end":877,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196056,"byte_end":196063,"line_start":878,"line_end":878,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196068,"byte_end":196077,"line_start":879,"line_end":879,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1182},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196799,"byte_end":196809,"line_start":910,"line_end":910,"column_start":12,"column_end":22},"name":"DrainBytes","qualname":"::ext_vec::DrainBytes","value":"DrainBytes {  }","parent":null,"children":[{"krate":0,"index":1184}],"decl_id":null,"docs":" A draining byte oriented iterator for `Vec<u8>`.","sig":null,"attributes":[{"value":"/ A draining byte oriented iterator for `Vec<u8>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196254,"byte_end":196306,"line_start":888,"line_end":888,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196307,"byte_end":196310,"line_start":889,"line_end":889,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196311,"byte_end":196342,"line_start":890,"line_end":890,"column_start":1,"column_end":32}},{"value":"/ [`ByteVec::drain_bytes`](trait.ByteVec.html#method.drain_bytes).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196343,"byte_end":196411,"line_start":891,"line_end":891,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196412,"byte_end":196415,"line_start":892,"line_end":892,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196416,"byte_end":196430,"line_start":893,"line_end":893,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196431,"byte_end":196434,"line_start":894,"line_end":894,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196435,"byte_end":196451,"line_start":895,"line_end":895,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196452,"byte_end":196455,"line_start":896,"line_end":896,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196456,"byte_end":196463,"line_start":897,"line_end":897,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteVec;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196464,"byte_end":196486,"line_start":898,"line_end":898,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196487,"byte_end":196490,"line_start":899,"line_end":899,"column_start":1,"column_end":4}},{"value":"/ let mut s = Vec::from(\"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196491,"byte_end":196527,"line_start":900,"line_end":900,"column_start":1,"column_end":37}},{"value":"/ {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196528,"byte_end":196533,"line_start":901,"line_end":901,"column_start":1,"column_end":6}},{"value":"/     let mut drainer = s.drain_bytes(2..4);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196534,"byte_end":196580,"line_start":902,"line_end":902,"column_start":1,"column_end":47}},{"value":"/     assert_eq!(drainer.next(), Some(b'o'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196581,"byte_end":196628,"line_start":903,"line_end":903,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), Some(b'b'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196629,"byte_end":196676,"line_start":904,"line_end":904,"column_start":1,"column_end":48}},{"value":"/     assert_eq!(drainer.next(), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196677,"byte_end":196718,"line_start":905,"line_end":905,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196719,"byte_end":196724,"line_start":906,"line_end":906,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(s, \"foar\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196725,"byte_end":196762,"line_start":907,"line_end":907,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196763,"byte_end":196770,"line_start":908,"line_end":908,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":1188},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198054,"byte_end":198067,"line_start":963,"line_end":963,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::ext_vec::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":1189},{"krate":0,"index":1190}],"decl_id":null,"docs":" An error that may occur when converting a `Vec<u8>` to a `String`.","sig":null,"attributes":[{"value":"/ An error that may occur when converting a `Vec<u8>` to a `String`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197311,"byte_end":197381,"line_start":939,"line_end":939,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197382,"byte_end":197385,"line_start":940,"line_end":940,"column_start":1,"column_end":4}},{"value":"/ This error includes the original `Vec<u8>` that failed to convert to a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197386,"byte_end":197460,"line_start":941,"line_end":941,"column_start":1,"column_end":75}},{"value":"/ `String`. This permits callers to recover the allocation used even if it","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197461,"byte_end":197537,"line_start":942,"line_end":942,"column_start":1,"column_end":77}},{"value":"/ it not valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197538,"byte_end":197561,"line_start":943,"line_end":943,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197562,"byte_end":197565,"line_start":944,"line_end":944,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197566,"byte_end":197580,"line_start":945,"line_end":945,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197581,"byte_end":197584,"line_start":946,"line_end":946,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197585,"byte_end":197601,"line_start":947,"line_end":947,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197602,"byte_end":197605,"line_start":948,"line_end":948,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197606,"byte_end":197613,"line_start":949,"line_end":949,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197614,"byte_end":197641,"line_start":950,"line_end":950,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197642,"byte_end":197645,"line_start":951,"line_end":951,"column_start":1,"column_end":4}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197646,"byte_end":197693,"line_start":952,"line_end":952,"column_start":1,"column_end":48}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197694,"byte_end":197741,"line_start":953,"line_end":953,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197742,"byte_end":197745,"line_start":954,"line_end":954,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197746,"byte_end":197796,"line_start":955,"line_end":955,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197797,"byte_end":197851,"line_start":956,"line_end":956,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197852,"byte_end":197855,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197856,"byte_end":197918,"line_start":958,"line_end":958,"column_start":1,"column_end":63}},{"value":"/ let bytes = Vec::from(err.into_vec());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197919,"byte_end":197961,"line_start":959,"line_end":959,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(bytes, B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197962,"byte_end":198002,"line_start":960,"line_end":960,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198003,"byte_end":198010,"line_start":961,"line_end":961,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198614,"byte_end":198622,"line_start":986,"line_end":986,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<FromUtf8Error>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the original bytes as a slice that failed to convert to a\n `String`.","sig":null,"attributes":[{"value":"/ Return the original bytes as a slice that failed to convert to a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198141,"byte_end":198209,"line_start":969,"line_end":969,"column_start":5,"column_end":73}},{"value":"/ `String`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198214,"byte_end":198227,"line_start":970,"line_end":970,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198232,"byte_end":198235,"line_start":971,"line_end":971,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198240,"byte_end":198254,"line_start":972,"line_end":972,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198259,"byte_end":198262,"line_start":973,"line_end":973,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198267,"byte_end":198283,"line_start":974,"line_end":974,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198288,"byte_end":198291,"line_start":975,"line_end":975,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198296,"byte_end":198303,"line_start":976,"line_end":976,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198308,"byte_end":198335,"line_start":977,"line_end":977,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198340,"byte_end":198343,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198348,"byte_end":198395,"line_start":979,"line_end":979,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198400,"byte_end":198447,"line_start":980,"line_end":980,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198452,"byte_end":198455,"line_start":981,"line_end":981,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198460,"byte_end":198522,"line_start":982,"line_end":982,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(err.as_bytes(), B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198527,"byte_end":198576,"line_start":983,"line_end":983,"column_start":5,"column_end":54}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198581,"byte_end":198588,"line_start":984,"line_end":984,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198593,"byte_end":198602,"line_start":985,"line_end":985,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199199,"byte_end":199207,"line_start":1008,"line_end":1008,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<FromUtf8Error>::into_vec","value":"pub fn into_vec(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume this error and return the original byte string that failed to\n convert to a `String`.","sig":null,"attributes":[{"value":"/ Consume this error and return the original byte string that failed to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198675,"byte_end":198748,"line_start":990,"line_end":990,"column_start":5,"column_end":78}},{"value":"/ convert to a `String`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198753,"byte_end":198779,"line_start":991,"line_end":991,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198784,"byte_end":198787,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198792,"byte_end":198806,"line_start":993,"line_end":993,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198811,"byte_end":198814,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198819,"byte_end":198835,"line_start":995,"line_end":995,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198840,"byte_end":198843,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198848,"byte_end":198855,"line_start":997,"line_end":997,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198860,"byte_end":198887,"line_start":998,"line_end":998,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198892,"byte_end":198895,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198900,"byte_end":198947,"line_start":1000,"line_end":1000,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198952,"byte_end":198999,"line_start":1001,"line_end":1001,"column_start":5,"column_end":52}},{"value":"/ let original = err.into_vec();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199004,"byte_end":199038,"line_start":1002,"line_end":1002,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199043,"byte_end":199046,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ // At no point in this example is an allocation performed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199051,"byte_end":199113,"line_start":1004,"line_end":1004,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(original, B(b\"foo\\xFFbar\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199118,"byte_end":199161,"line_start":1005,"line_end":1005,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199166,"byte_end":199173,"line_start":1006,"line_end":1006,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199178,"byte_end":199187,"line_start":1007,"line_end":1007,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199790,"byte_end":199800,"line_start":1029,"line_end":1029,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"pub fn utf8_error(&Self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying UTF-8 error that occurred. This error provides\n information on the nature and location of the invalid UTF-8 detected.","sig":null,"attributes":[{"value":"/ Return the underlying UTF-8 error that occurred. This error provides","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199260,"byte_end":199332,"line_start":1012,"line_end":1012,"column_start":5,"column_end":77}},{"value":"/ information on the nature and location of the invalid UTF-8 detected.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199337,"byte_end":199410,"line_start":1013,"line_end":1013,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199415,"byte_end":199418,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199423,"byte_end":199437,"line_start":1015,"line_end":1015,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199442,"byte_end":199445,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199450,"byte_end":199466,"line_start":1017,"line_end":1017,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199471,"byte_end":199474,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199479,"byte_end":199486,"line_start":1019,"line_end":1019,"column_start":5,"column_end":12}},{"value":"/ use bstr::{B, ByteVec};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199491,"byte_end":199518,"line_start":1020,"line_end":1020,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199523,"byte_end":199526,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ let bytes = Vec::from_slice(b\"foo\\xFFbar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199531,"byte_end":199578,"line_start":1022,"line_end":1022,"column_start":5,"column_end":52}},{"value":"/ let err = bytes.into_string().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199583,"byte_end":199630,"line_start":1023,"line_end":1023,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199635,"byte_end":199638,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199643,"byte_end":199693,"line_start":1025,"line_end":1025,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(err.utf8_error().error_len(), Some(1));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199698,"byte_end":199752,"line_start":1026,"line_end":1026,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199757,"byte_end":199764,"line_start":1027,"line_end":1027,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199769,"byte_end":199778,"line_start":1028,"line_end":1028,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":759},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":776},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1490},{"krate":0,"index":778},{"krate":0,"index":782},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"decl_id":null,"docs":"Utilities for working with I/O using byte strings.","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19355,"byte_end":19378,"line_start":419,"line_end":419,"column_start":1,"column_end":24}},{"value":"*\nUtilities for working with I/O using byte strings.\n\nThis module currently only exports a single trait, `BufReadExt`, which provides\nfacilities for conveniently and efficiently working with lines as byte strings.\n\nMore APIs may be added in the future.\n*/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228062,"byte_end":228319,"line_start":1,"line_end":8,"column_start":1,"column_end":3}}]},{"kind":"Trait","id":{"krate":0,"index":763},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228566,"byte_end":228576,"line_start":18,"line_end":18,"column_start":11,"column_end":21},"name":"BufReadExt","qualname":"::io::BufReadExt","value":"BufReadExt: io::BufRead","parent":null,"children":[{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":769},{"krate":0,"index":772},{"krate":0,"index":774}],"decl_id":null,"docs":" An extention trait for\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)\n which provides convenience APIs for dealing with byte strings.\n","sig":null,"attributes":[{"value":"/ An extention trait for","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228384,"byte_end":228410,"line_start":15,"line_end":15,"column_start":1,"column_end":27}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228411,"byte_end":228488,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ which provides convenience APIs for dealing with byte strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228489,"byte_end":228555,"line_start":17,"line_end":17,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229683,"byte_end":229693,"line_start":52,"line_end":52,"column_start":8,"column_end":18},"name":"byte_lines","qualname":"::io::BufReadExt::byte_lines","value":"pub fn byte_lines(Self) -> ByteLines<Self> where Self: Sized","parent":{"krate":0,"index":763},"children":[],"decl_id":null,"docs":" Returns an iterator over the lines of this reader, where each line\n is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over the lines of this reader, where each line","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228596,"byte_end":228666,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ is represented as a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228671,"byte_end":228707,"line_start":20,"line_end":20,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228712,"byte_end":228715,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228720,"byte_end":228792,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228797,"byte_end":228871,"line_start":23,"line_end":23,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228876,"byte_end":228887,"line_start":24,"line_end":24,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228892,"byte_end":228895,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ On success, the next line in the iterator is returned. The line does","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228900,"byte_end":228972,"line_start":26,"line_end":26,"column_start":5,"column_end":77}},{"value":"/ *not* contain a trailing `\\n` or `\\r\\n`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228977,"byte_end":229021,"line_start":27,"line_end":27,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229026,"byte_end":229029,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229034,"byte_end":229048,"line_start":29,"line_end":29,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229053,"byte_end":229056,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229061,"byte_end":229077,"line_start":31,"line_end":31,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229082,"byte_end":229085,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229090,"byte_end":229097,"line_start":33,"line_end":33,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229102,"byte_end":229118,"line_start":34,"line_end":34,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229123,"byte_end":229126,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229131,"byte_end":229160,"line_start":36,"line_end":36,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229165,"byte_end":229168,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229173,"byte_end":229218,"line_start":38,"line_end":38,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229223,"byte_end":229282,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229287,"byte_end":229290,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229295,"byte_end":229322,"line_start":41,"line_end":41,"column_start":5,"column_end":32}},{"value":"/ for result in cursor.byte_lines() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229327,"byte_end":229366,"line_start":42,"line_end":42,"column_start":5,"column_end":44}},{"value":"/     let line = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229371,"byte_end":229398,"line_start":43,"line_end":43,"column_start":5,"column_end":32}},{"value":"/     lines.push(line);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229403,"byte_end":229428,"line_start":44,"line_end":44,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229433,"byte_end":229438,"line_start":45,"line_end":45,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229443,"byte_end":229474,"line_start":46,"line_end":46,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229479,"byte_end":229524,"line_start":47,"line_end":47,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229529,"byte_end":229574,"line_start":48,"line_end":48,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229579,"byte_end":229624,"line_start":49,"line_end":49,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229629,"byte_end":229663,"line_start":50,"line_end":50,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229668,"byte_end":229675,"line_start":51,"line_end":51,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231068,"byte_end":231080,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"byte_records","qualname":"::io::BufReadExt::byte_records","value":"pub fn byte_records(Self, u8) -> ByteRecords<Self> where Self: Sized","parent":{"krate":0,"index":763},"children":[],"decl_id":null,"docs":" Returns an iterator over byte-terminated records of this reader, where\n each record is represented as a byte string.","sig":null,"attributes":[{"value":"/ Returns an iterator over byte-terminated records of this reader, where","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229799,"byte_end":229873,"line_start":59,"line_end":59,"column_start":5,"column_end":79}},{"value":"/ each record is represented as a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229878,"byte_end":229926,"line_start":60,"line_end":60,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229931,"byte_end":229934,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `io::Result<Vec<u8>>`, where","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":229939,"byte_end":230011,"line_start":62,"line_end":62,"column_start":5,"column_end":77}},{"value":"/ an error is yielded if there was a problem reading from the underlying","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230016,"byte_end":230090,"line_start":63,"line_end":63,"column_start":5,"column_end":79}},{"value":"/ reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230095,"byte_end":230106,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230111,"byte_end":230114,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ On success, the next record in the iterator is returned. The record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230119,"byte_end":230190,"line_start":66,"line_end":66,"column_start":5,"column_end":76}},{"value":"/ does *not* contain its trailing terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230195,"byte_end":230242,"line_start":67,"line_end":67,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230247,"byte_end":230250,"line_start":68,"line_end":68,"column_start":5,"column_end":8}},{"value":"/ Note that calling `byte_records(b'\\n')` differs from `byte_lines()` in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230255,"byte_end":230329,"line_start":69,"line_end":69,"column_start":5,"column_end":79}},{"value":"/ that it has no special handling for `\\r`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230334,"byte_end":230379,"line_start":70,"line_end":70,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230384,"byte_end":230387,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230392,"byte_end":230406,"line_start":72,"line_end":72,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230411,"byte_end":230414,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230419,"byte_end":230435,"line_start":74,"line_end":74,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230440,"byte_end":230443,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230448,"byte_end":230455,"line_start":76,"line_end":76,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230460,"byte_end":230476,"line_start":77,"line_end":77,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230481,"byte_end":230484,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230489,"byte_end":230518,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230523,"byte_end":230526,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230531,"byte_end":230576,"line_start":81,"line_end":81,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230581,"byte_end":230642,"line_start":82,"line_end":82,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230647,"byte_end":230650,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230655,"byte_end":230684,"line_start":84,"line_end":84,"column_start":5,"column_end":34}},{"value":"/ for result in cursor.byte_records(b'\\x00') {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230689,"byte_end":230737,"line_start":85,"line_end":85,"column_start":5,"column_end":53}},{"value":"/     let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230742,"byte_end":230771,"line_start":86,"line_end":86,"column_start":5,"column_end":34}},{"value":"/     records.push(record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230776,"byte_end":230805,"line_start":87,"line_end":87,"column_start":5,"column_end":34}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230810,"byte_end":230815,"line_start":88,"line_end":88,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230820,"byte_end":230853,"line_start":89,"line_end":89,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], \"lorem\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230858,"byte_end":230905,"line_start":90,"line_end":90,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[1], \"ipsum\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230910,"byte_end":230957,"line_start":91,"line_end":91,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[2], \"dolor\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":230962,"byte_end":231009,"line_start":92,"line_end":92,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231014,"byte_end":231048,"line_start":93,"line_end":93,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231053,"byte_end":231060,"line_start":94,"line_end":94,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232565,"byte_end":232578,"line_start":138,"line_end":138,"column_start":8,"column_end":21},"name":"for_byte_line","qualname":"::io::BufReadExt::for_byte_line","value":"pub fn for_byte_line<F>(Self, F) -> io::Result<()> where Self: Sized,\nF: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":763},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231218,"byte_end":231287,"line_start":102,"line_end":102,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231292,"byte_end":231295,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231300,"byte_end":231375,"line_start":104,"line_end":104,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231380,"byte_end":231453,"line_start":105,"line_end":105,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231458,"byte_end":231526,"line_start":106,"line_end":106,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231531,"byte_end":231534,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231539,"byte_end":231611,"line_start":108,"line_end":108,"column_start":5,"column_end":77}},{"value":"/ the [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231616,"byte_end":231679,"line_start":109,"line_end":109,"column_start":5,"column_end":68}},{"value":"/ iterator. Namely, lines do _not_ contain trailing `\\n` or `\\r\\n` bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231684,"byte_end":231759,"line_start":110,"line_end":110,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231764,"byte_end":231767,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231772,"byte_end":231837,"line_start":112,"line_end":112,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231842,"byte_end":231908,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231913,"byte_end":231916,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231921,"byte_end":231935,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231940,"byte_end":231943,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231948,"byte_end":231964,"line_start":117,"line_end":117,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231969,"byte_end":231972,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231977,"byte_end":231984,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":231989,"byte_end":232005,"line_start":120,"line_end":120,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232010,"byte_end":232013,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232018,"byte_end":232047,"line_start":122,"line_end":122,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232052,"byte_end":232055,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232060,"byte_end":232105,"line_start":124,"line_end":124,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232110,"byte_end":232169,"line_start":125,"line_end":125,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232174,"byte_end":232177,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232182,"byte_end":232209,"line_start":127,"line_end":127,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line(|line| {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232214,"byte_end":232247,"line_start":128,"line_end":128,"column_start":5,"column_end":38}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232252,"byte_end":232286,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232291,"byte_end":232307,"line_start":130,"line_end":130,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232312,"byte_end":232320,"line_start":131,"line_end":131,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232325,"byte_end":232356,"line_start":132,"line_end":132,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232361,"byte_end":232406,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[1], \"ipsum\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232411,"byte_end":232456,"line_start":134,"line_end":134,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232461,"byte_end":232506,"line_start":135,"line_end":135,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232511,"byte_end":232545,"line_start":136,"line_end":136,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232550,"byte_end":232557,"line_start":137,"line_end":137,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234244,"byte_end":234259,"line_start":185,"line_end":185,"column_start":8,"column_end":23},"name":"for_byte_record","qualname":"::io::BufReadExt::for_byte_record","value":"pub fn for_byte_record<F>(Self, u8, F) -> io::Result<()> where Self: Sized,\nF: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":763},"children":[],"decl_id":null,"docs":" Executes the given closure on each byte-terminated record in the\n underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each byte-terminated record in the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232835,"byte_end":232903,"line_start":148,"line_end":148,"column_start":5,"column_end":73}},{"value":"/ underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232908,"byte_end":232930,"line_start":149,"line_end":149,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232935,"byte_end":232938,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":232943,"byte_end":233018,"line_start":151,"line_end":151,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233023,"byte_end":233096,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233101,"byte_end":233169,"line_start":153,"line_end":153,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233174,"byte_end":233177,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The closure given is called on exactly the same values as yielded by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233182,"byte_end":233254,"line_start":155,"line_end":155,"column_start":5,"column_end":77}},{"value":"/ the [`byte_records`](trait.BufReadExt.html#method.byte_records)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233259,"byte_end":233326,"line_start":156,"line_end":156,"column_start":5,"column_end":72}},{"value":"/ iterator. Namely, records do _not_ contain a trailing terminator byte.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233331,"byte_end":233405,"line_start":157,"line_end":157,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233410,"byte_end":233413,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over records as quickly as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233418,"byte_end":233485,"line_start":159,"line_end":159,"column_start":5,"column_end":72}},{"value":"/ possible. Namely, a single allocation is reused for each record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233490,"byte_end":233558,"line_start":160,"line_end":160,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233563,"byte_end":233566,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233571,"byte_end":233585,"line_start":162,"line_end":162,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233590,"byte_end":233593,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233598,"byte_end":233614,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233619,"byte_end":233622,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233627,"byte_end":233634,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233639,"byte_end":233655,"line_start":167,"line_end":167,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233660,"byte_end":233663,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233668,"byte_end":233697,"line_start":169,"line_end":169,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233702,"byte_end":233705,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233710,"byte_end":233755,"line_start":171,"line_end":171,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233760,"byte_end":233821,"line_start":172,"line_end":172,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233826,"byte_end":233829,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233834,"byte_end":233863,"line_start":174,"line_end":174,"column_start":5,"column_end":34}},{"value":"/ cursor.for_byte_record(b'\\x00', |record| {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233868,"byte_end":233914,"line_start":175,"line_end":175,"column_start":5,"column_end":51}},{"value":"/     records.push(record.to_vec());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233919,"byte_end":233957,"line_start":176,"line_end":176,"column_start":5,"column_end":43}},{"value":"/     Ok(true)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233962,"byte_end":233978,"line_start":177,"line_end":177,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233983,"byte_end":233991,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":233996,"byte_end":234029,"line_start":179,"line_end":179,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], \"lorem\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234034,"byte_end":234081,"line_start":180,"line_end":180,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[1], \"ipsum\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234086,"byte_end":234133,"line_start":181,"line_end":181,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(records[2], \"dolor\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234138,"byte_end":234185,"line_start":182,"line_end":182,"column_start":5,"column_end":52}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234190,"byte_end":234224,"line_start":183,"line_end":183,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234229,"byte_end":234236,"line_start":184,"line_end":184,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236029,"byte_end":236058,"line_start":239,"line_end":239,"column_start":8,"column_end":37},"name":"for_byte_line_with_terminator","qualname":"::io::BufReadExt::for_byte_line_with_terminator","value":"pub fn for_byte_line_with_terminator<F>(Self, F) -> io::Result<()> where\nSelf: Sized, F: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":763},"children":[],"decl_id":null,"docs":" Executes the given closure on each line in the underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each line in the underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234597,"byte_end":234666,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234671,"byte_end":234674,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234679,"byte_end":234754,"line_start":201,"line_end":201,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234759,"byte_end":234832,"line_start":202,"line_end":202,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234837,"byte_end":234905,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234910,"byte_end":234913,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234918,"byte_end":234928,"line_start":205,"line_end":205,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_line`](trait.BufReadExt.html#method.for_byte_line),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":234933,"byte_end":234999,"line_start":206,"line_end":206,"column_start":5,"column_end":71}},{"value":"/ the lines given to the closure *do* include the line terminator, if one","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235004,"byte_end":235079,"line_start":207,"line_end":207,"column_start":5,"column_end":80}},{"value":"/ exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235084,"byte_end":235095,"line_start":208,"line_end":208,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235100,"byte_end":235103,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over lines as quickly as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235108,"byte_end":235173,"line_start":210,"line_end":210,"column_start":5,"column_end":70}},{"value":"/ possible. Namely, a single allocation is reused for each line.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235178,"byte_end":235244,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235249,"byte_end":235252,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ This is identical to `for_byte_record_with_terminator` with a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235257,"byte_end":235322,"line_start":213,"line_end":213,"column_start":5,"column_end":70}},{"value":"/ terminator of `\\n`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235327,"byte_end":235350,"line_start":214,"line_end":214,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235355,"byte_end":235358,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235363,"byte_end":235377,"line_start":216,"line_end":216,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235382,"byte_end":235385,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235390,"byte_end":235406,"line_start":218,"line_end":218,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235411,"byte_end":235414,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235419,"byte_end":235426,"line_start":220,"line_end":220,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235431,"byte_end":235447,"line_start":221,"line_end":221,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235452,"byte_end":235455,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235460,"byte_end":235489,"line_start":223,"line_end":223,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235494,"byte_end":235497,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235502,"byte_end":235547,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\nipsum\\r\\ndolor\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235552,"byte_end":235611,"line_start":226,"line_end":226,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235616,"byte_end":235619,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ let mut lines = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235624,"byte_end":235651,"line_start":228,"line_end":228,"column_start":5,"column_end":32}},{"value":"/ cursor.for_byte_line_with_terminator(|line| {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235656,"byte_end":235705,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/     lines.push(line.to_vec());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235710,"byte_end":235744,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/     Ok(true)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235749,"byte_end":235765,"line_start":231,"line_end":231,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235770,"byte_end":235778,"line_start":232,"line_end":232,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(lines.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235783,"byte_end":235814,"line_start":233,"line_end":233,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(lines[0], \"lorem\\n\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235819,"byte_end":235866,"line_start":234,"line_end":234,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(lines[1], \"ipsum\\r\\n\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235871,"byte_end":235920,"line_start":235,"line_end":235,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(lines[2], \"dolor\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235925,"byte_end":235970,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":235975,"byte_end":236009,"line_start":237,"line_end":237,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236014,"byte_end":236021,"line_start":238,"line_end":238,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237678,"byte_end":237709,"line_start":289,"line_end":289,"column_start":8,"column_end":39},"name":"for_byte_record_with_terminator","qualname":"::io::BufReadExt::for_byte_record_with_terminator","value":"pub fn for_byte_record_with_terminator<F>(Self, u8, F) -> io::Result<()> where\nSelf: Sized, F: FnMut(&[u8]) -> io::Result<bool>","parent":{"krate":0,"index":763},"children":[],"decl_id":null,"docs":" Executes the given closure on each byte-terminated record in the\n underlying reader.","sig":null,"attributes":[{"value":"/ Executes the given closure on each byte-terminated record in the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236287,"byte_end":236355,"line_start":250,"line_end":250,"column_start":5,"column_end":73}},{"value":"/ underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236360,"byte_end":236382,"line_start":251,"line_end":251,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236387,"byte_end":236390,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ If the closure returns an error (or if the underlying reader returns an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236395,"byte_end":236470,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"/ error), then iteration is stopped and the error is returned. If false","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236475,"byte_end":236548,"line_start":254,"line_end":254,"column_start":5,"column_end":78}},{"value":"/ is returned, then iteration is stopped and no error is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236553,"byte_end":236621,"line_start":255,"line_end":255,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236626,"byte_end":236629,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ Unlike","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236634,"byte_end":236644,"line_start":257,"line_end":257,"column_start":5,"column_end":15}},{"value":"/ [`for_byte_record`](trait.BufReadExt.html#method.for_byte_record),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236649,"byte_end":236719,"line_start":258,"line_end":258,"column_start":5,"column_end":75}},{"value":"/ the lines given to the closure *do* include the record terminator, if","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236724,"byte_end":236797,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ one exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236802,"byte_end":236817,"line_start":260,"line_end":260,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236822,"byte_end":236825,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ This routine is useful for iterating over records as quickly as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236830,"byte_end":236897,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/ possible. Namely, a single allocation is reused for each record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236902,"byte_end":236970,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236975,"byte_end":236978,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":236983,"byte_end":236997,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237002,"byte_end":237005,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237010,"byte_end":237026,"line_start":267,"line_end":267,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237031,"byte_end":237034,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237039,"byte_end":237046,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237051,"byte_end":237067,"line_start":270,"line_end":270,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237072,"byte_end":237075,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ use bstr::B;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237080,"byte_end":237096,"line_start":272,"line_end":272,"column_start":5,"column_end":21}},{"value":"/ use bstr::io::BufReadExt;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237101,"byte_end":237130,"line_start":273,"line_end":273,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237135,"byte_end":237138,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # fn example() -> Result<(), io::Error> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237143,"byte_end":237188,"line_start":275,"line_end":275,"column_start":5,"column_end":50}},{"value":"/ let cursor = io::Cursor::new(b\"lorem\\x00ipsum\\x00dolor\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237193,"byte_end":237254,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237259,"byte_end":237262,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let mut records = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237267,"byte_end":237296,"line_start":278,"line_end":278,"column_start":5,"column_end":34}},{"value":"/ cursor.for_byte_record_with_terminator(b'\\x00', |record| {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237301,"byte_end":237363,"line_start":279,"line_end":279,"column_start":5,"column_end":67}},{"value":"/     records.push(record.to_vec());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237368,"byte_end":237406,"line_start":280,"line_end":280,"column_start":5,"column_end":43}},{"value":"/     Ok(true)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237411,"byte_end":237427,"line_start":281,"line_end":281,"column_start":5,"column_end":21}},{"value":"/ })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237432,"byte_end":237440,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ assert_eq!(records.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237445,"byte_end":237478,"line_start":283,"line_end":283,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(records[0], B(b\"lorem\\x00\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237483,"byte_end":237527,"line_start":284,"line_end":284,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(records[1], B(\"ipsum\\x00\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237532,"byte_end":237575,"line_start":285,"line_end":285,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(records[2], B(\"dolor\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237580,"byte_end":237619,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/ # Ok(()) }; example().unwrap()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237624,"byte_end":237658,"line_start":287,"line_end":287,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":237663,"byte_end":237670,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1480},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239936,"byte_end":239945,"line_start":355,"line_end":355,"column_start":12,"column_end":21},"name":"ByteLines","qualname":"::io::ByteLines","value":"ByteLines {  }","parent":null,"children":[{"krate":0,"index":1482}],"decl_id":null,"docs":" An iterator over lines from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over lines from an instance of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239593,"byte_end":239639,"line_start":346,"line_end":346,"column_start":1,"column_end":47}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239640,"byte_end":239718,"line_start":347,"line_end":347,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239719,"byte_end":239722,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239723,"byte_end":239776,"line_start":349,"line_end":349,"column_start":1,"column_end":54}},{"value":"/ [`byte_lines`](trait.BufReadExt.html#method.byte_lines)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239777,"byte_end":239836,"line_start":350,"line_end":350,"column_start":1,"column_end":60}},{"value":"/ method on the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239837,"byte_end":239854,"line_start":351,"line_end":351,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239855,"byte_end":239896,"line_start":352,"line_end":352,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239897,"byte_end":239907,"line_start":353,"line_end":353,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1486},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240508,"byte_end":240519,"line_start":372,"line_end":372,"column_start":12,"column_end":23},"name":"ByteRecords","qualname":"::io::ByteRecords","value":"ByteRecords {  }","parent":null,"children":[{"krate":0,"index":1488},{"krate":0,"index":1489}],"decl_id":null,"docs":" An iterator over records from an instance of\n [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","sig":null,"attributes":[{"value":"/ An iterator over records from an instance of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239966,"byte_end":240014,"line_start":359,"line_end":359,"column_start":1,"column_end":49}},{"value":"/ [`std::io::BufRead`](https://doc.rust-lang.org/std/io/trait.BufRead.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240015,"byte_end":240093,"line_start":360,"line_end":360,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240094,"byte_end":240097,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ A byte record is any sequence of bytes terminated by a particular byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240098,"byte_end":240172,"line_start":362,"line_end":362,"column_start":1,"column_end":75}},{"value":"/ chosen by the caller. For example, NUL separated byte strings are said to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240173,"byte_end":240250,"line_start":363,"line_end":363,"column_start":1,"column_end":78}},{"value":"/ be NUL-terminated byte records.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240251,"byte_end":240286,"line_start":364,"line_end":364,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240287,"byte_end":240290,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ This iterator is generally created by calling the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240291,"byte_end":240344,"line_start":366,"line_end":366,"column_start":1,"column_end":54}},{"value":"/ [`byte_records`](trait.BufReadExt.html#method.byte_records)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240345,"byte_end":240408,"line_start":367,"line_end":367,"column_start":1,"column_end":64}},{"value":"/ method on the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240409,"byte_end":240426,"line_start":368,"line_end":368,"column_start":1,"column_end":18}},{"value":"/ [`BufReadExt`](trait.BufReadExt.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240427,"byte_end":240468,"line_start":369,"line_end":369,"column_start":1,"column_end":42}},{"value":"/ trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240469,"byte_end":240479,"line_start":370,"line_end":370,"column_start":1,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1697},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309416,"byte_end":309425,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"Graphemes","qualname":"::unicode::grapheme::Graphemes","value":"Graphemes {  }","parent":null,"children":[{"krate":0,"index":1699}],"decl_id":null,"docs":" An iterator over grapheme clusters in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over grapheme clusters in a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308308,"byte_end":308364,"line_start":9,"line_end":9,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308365,"byte_end":308368,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308369,"byte_end":308414,"line_start":11,"line_end":11,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::graphemes`](trait.ByteSlice.html#method.graphemes).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308415,"byte_end":308483,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308484,"byte_end":308487,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Unicode defines a grapheme cluster as an *approximation* to a single user","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308488,"byte_end":308565,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ visible character. A grapheme cluster, or just \"grapheme,\" is made up of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308566,"byte_end":308642,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ one or more codepoints. For end user oriented tasks, one should generally","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308643,"byte_end":308720,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ prefer using graphemes instead of [`Chars`](struct.Chars.html), which","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308721,"byte_end":308794,"line_start":17,"line_end":17,"column_start":1,"column_end":74}},{"value":"/ always yields one codepoint at a time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308795,"byte_end":308837,"line_start":18,"line_end":18,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308838,"byte_end":308841,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Since graphemes are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308842,"byte_end":308921,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":308922,"byte_end":309000,"line_start":21,"line_end":21,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309001,"byte_end":309061,"line_start":22,"line_end":22,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309062,"byte_end":309065,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This iterator can be used in reverse. When reversed, exactly the same","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309066,"byte_end":309139,"line_start":24,"line_end":24,"column_start":1,"column_end":74}},{"value":"/ set of grapheme clusters are yielded, but in reverse order.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309140,"byte_end":309203,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309204,"byte_end":309207,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ This iterator only yields *extended* grapheme clusters, in accordance with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309208,"byte_end":309286,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Grapheme_Cluster_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309287,"byte_end":309380,"line_start":28,"line_end":28,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310137,"byte_end":310145,"line_start":59,"line_end":59,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Graphemes>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309569,"byte_end":309633,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309638,"byte_end":309641,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309646,"byte_end":309720,"line_start":41,"line_end":41,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309725,"byte_end":309784,"line_start":42,"line_end":42,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309789,"byte_end":309792,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309797,"byte_end":309811,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309816,"byte_end":309819,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309824,"byte_end":309831,"line_start":46,"line_end":46,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309836,"byte_end":309860,"line_start":47,"line_end":47,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309865,"byte_end":309868,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".graphemes();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309873,"byte_end":309909,"line_start":49,"line_end":49,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309914,"byte_end":309917,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309922,"byte_end":309960,"line_start":51,"line_end":51,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309965,"byte_end":309979,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309984,"byte_end":310021,"line_start":53,"line_end":53,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310026,"byte_end":310040,"line_start":54,"line_end":54,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310045,"byte_end":310059,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310064,"byte_end":310099,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310104,"byte_end":310111,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310116,"byte_end":310125,"line_start":58,"line_end":58,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1706},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312528,"byte_end":312543,"line_start":120,"line_end":120,"column_start":12,"column_end":27},"name":"GraphemeIndices","qualname":"::unicode::grapheme::GraphemeIndices","value":"GraphemeIndices {  }","parent":null,"children":[{"krate":0,"index":1708},{"krate":0,"index":1709},{"krate":0,"index":1710}],"decl_id":null,"docs":" An iterator over grapheme clusters in a byte string and their byte index\n positions.","sig":null,"attributes":[{"value":"/ An iterator over grapheme clusters in a byte string and their byte index","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310813,"byte_end":310889,"line_start":90,"line_end":90,"column_start":1,"column_end":77}},{"value":"/ positions.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310890,"byte_end":310904,"line_start":91,"line_end":91,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310905,"byte_end":310908,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310909,"byte_end":310954,"line_start":93,"line_end":93,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::grapheme_indices`](trait.ByteSlice.html#method.grapheme_indices).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310955,"byte_end":311037,"line_start":94,"line_end":94,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311038,"byte_end":311041,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ Unicode defines a grapheme cluster as an *approximation* to a single user","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311042,"byte_end":311119,"line_start":96,"line_end":96,"column_start":1,"column_end":78}},{"value":"/ visible character. A grapheme cluster, or just \"grapheme,\" is made up of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311120,"byte_end":311196,"line_start":97,"line_end":97,"column_start":1,"column_end":77}},{"value":"/ one or more codepoints. For end user oriented tasks, one should generally","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311197,"byte_end":311274,"line_start":98,"line_end":98,"column_start":1,"column_end":78}},{"value":"/ prefer using graphemes instead of [`Chars`](struct.Chars.html), which","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311275,"byte_end":311348,"line_start":99,"line_end":99,"column_start":1,"column_end":74}},{"value":"/ always yields one codepoint at a time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311349,"byte_end":311391,"line_start":100,"line_end":100,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311392,"byte_end":311395,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Since graphemes are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311396,"byte_end":311468,"line_start":102,"line_end":102,"column_start":1,"column_end":73}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311469,"byte_end":311542,"line_start":103,"line_end":103,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311543,"byte_end":311608,"line_start":104,"line_end":104,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311609,"byte_end":311686,"line_start":105,"line_end":105,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311687,"byte_end":311763,"line_start":106,"line_end":106,"column_start":1,"column_end":77}},{"value":"/ grapheme cluster yielded with those indices. For example, when this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311764,"byte_end":311835,"line_start":107,"line_end":107,"column_start":1,"column_end":72}},{"value":"/ iterator encounters `\\xFF` in the byte string, then it will yield a pair","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311836,"byte_end":311912,"line_start":108,"line_end":108,"column_start":1,"column_end":77}},{"value":"/ of indices ranging over a single byte, but will provide an `&str`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311913,"byte_end":311982,"line_start":109,"line_end":109,"column_start":1,"column_end":70}},{"value":"/ equivalent to `\"\\u{FFFD}\"`, which is three bytes in length. However, when","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":311983,"byte_end":312060,"line_start":110,"line_end":110,"column_start":1,"column_end":78}},{"value":"/ given only valid UTF-8, then all indices are in exact correspondence with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312061,"byte_end":312138,"line_start":111,"line_end":111,"column_start":1,"column_end":78}},{"value":"/ their paired grapheme cluster.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312139,"byte_end":312173,"line_start":112,"line_end":112,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312174,"byte_end":312177,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ This iterator can be used in reverse. When reversed, exactly the same","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312178,"byte_end":312251,"line_start":114,"line_end":114,"column_start":1,"column_end":74}},{"value":"/ set of grapheme clusters are yielded, but in reverse order.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312252,"byte_end":312315,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312316,"byte_end":312319,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ This iterator only yields *extended* grapheme clusters, in accordance with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312320,"byte_end":312398,"line_start":117,"line_end":117,"column_start":1,"column_end":79}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Grapheme_Cluster_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312399,"byte_end":312492,"line_start":118,"line_end":118,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313379,"byte_end":313387,"line_start":151,"line_end":151,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<GraphemeIndices>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312804,"byte_end":312868,"line_start":131,"line_end":131,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312873,"byte_end":312876,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312881,"byte_end":312955,"line_start":133,"line_end":133,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312960,"byte_end":313019,"line_start":134,"line_end":134,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313024,"byte_end":313027,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313032,"byte_end":313046,"line_start":136,"line_end":136,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313051,"byte_end":313054,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313059,"byte_end":313066,"line_start":138,"line_end":138,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313071,"byte_end":313095,"line_start":139,"line_end":139,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313100,"byte_end":313103,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".grapheme_indices();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313108,"byte_end":313151,"line_start":141,"line_end":141,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313156,"byte_end":313159,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313164,"byte_end":313202,"line_start":143,"line_end":143,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313207,"byte_end":313221,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313226,"byte_end":313263,"line_start":145,"line_end":145,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313268,"byte_end":313282,"line_start":146,"line_end":146,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313287,"byte_end":313301,"line_start":147,"line_end":147,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313306,"byte_end":313341,"line_start":148,"line_end":148,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313346,"byte_end":313353,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313358,"byte_end":313367,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1717},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321231,"byte_end":321240,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"Sentences","qualname":"::unicode::sentence::Sentences","value":"Sentences {  }","parent":null,"children":[{"krate":0,"index":1719}],"decl_id":null,"docs":" An iterator over sentences in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over sentences in a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320532,"byte_end":320580,"line_start":7,"line_end":7,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320581,"byte_end":320584,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320585,"byte_end":320630,"line_start":9,"line_end":9,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::sentences`](trait.ByteSlice.html#method.sentences).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320631,"byte_end":320699,"line_start":10,"line_end":10,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320700,"byte_end":320703,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Sentences typically include their trailing punctuation and whitespace.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320704,"byte_end":320778,"line_start":12,"line_end":12,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320779,"byte_end":320782,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320783,"byte_end":320862,"line_start":14,"line_end":14,"column_start":1,"column_end":80}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320863,"byte_end":320941,"line_start":15,"line_end":15,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":320942,"byte_end":321002,"line_start":16,"line_end":16,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321003,"byte_end":321006,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default sentence boundary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321007,"byte_end":321086,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ rules specified in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321087,"byte_end":321109,"line_start":19,"line_end":19,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Sentence_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321110,"byte_end":321195,"line_start":20,"line_end":20,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322035,"byte_end":322043,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Sentences>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321384,"byte_end":321448,"line_start":31,"line_end":31,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321453,"byte_end":321456,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321461,"byte_end":321535,"line_start":33,"line_end":33,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321540,"byte_end":321599,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321604,"byte_end":321607,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321612,"byte_end":321626,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321631,"byte_end":321634,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321639,"byte_end":321646,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321651,"byte_end":321675,"line_start":39,"line_end":39,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321680,"byte_end":321683,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"I want this. Not that. Right now.\".sentences();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321688,"byte_end":321754,"line_start":41,"line_end":41,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321759,"byte_end":321762,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"I want this. Not that. Right now.\"[..], it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321767,"byte_end":321840,"line_start":43,"line_end":43,"column_start":5,"column_end":78}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321845,"byte_end":321859,"line_start":44,"line_end":44,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"Not that. Right now.\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321864,"byte_end":321919,"line_start":45,"line_end":45,"column_start":5,"column_end":60}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321924,"byte_end":321938,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321943,"byte_end":321957,"line_start":47,"line_end":47,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321962,"byte_end":321997,"line_start":48,"line_end":48,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322002,"byte_end":322009,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322014,"byte_end":322023,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1726},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323677,"byte_end":323692,"line_start":93,"line_end":93,"column_start":12,"column_end":27},"name":"SentenceIndices","qualname":"::unicode::sentence::SentenceIndices","value":"SentenceIndices {  }","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1729}],"decl_id":null,"docs":" An iterator over sentences in a byte string, along with their byte offsets.","sig":null,"attributes":[{"value":"/ An iterator over sentences in a byte string, along with their byte offsets.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322395,"byte_end":322474,"line_start":70,"line_end":70,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322475,"byte_end":322478,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322479,"byte_end":322524,"line_start":72,"line_end":72,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::sentence_indices`](trait.ByteSlice.html#method.sentence_indices).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322525,"byte_end":322607,"line_start":73,"line_end":73,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322608,"byte_end":322611,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Sentences typically include their trailing punctuation and whitespace.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322612,"byte_end":322686,"line_start":75,"line_end":75,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322687,"byte_end":322690,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Since sentences are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322691,"byte_end":322763,"line_start":77,"line_end":77,"column_start":1,"column_end":73}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322764,"byte_end":322837,"line_start":78,"line_end":78,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322838,"byte_end":322903,"line_start":79,"line_end":79,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322904,"byte_end":322981,"line_start":80,"line_end":80,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322982,"byte_end":323058,"line_start":81,"line_end":81,"column_start":1,"column_end":77}},{"value":"/ sentence yielded with those indices. For example, when this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323059,"byte_end":323131,"line_start":82,"line_end":82,"column_start":1,"column_end":73}},{"value":"/ encounters `\\xFF` in the byte string, then it will yield a pair of indices","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323132,"byte_end":323210,"line_start":83,"line_end":83,"column_start":1,"column_end":79}},{"value":"/ ranging over a single byte, but will provide an `&str` equivalent to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323211,"byte_end":323283,"line_start":84,"line_end":84,"column_start":1,"column_end":73}},{"value":"/ `\"\\u{FFFD}\"`, which is three bytes in length. However, when given only","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323284,"byte_end":323358,"line_start":85,"line_end":85,"column_start":1,"column_end":75}},{"value":"/ valid UTF-8, then all indices are in exact correspondence with their paired","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323359,"byte_end":323438,"line_start":86,"line_end":86,"column_start":1,"column_end":80}},{"value":"/ word.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323439,"byte_end":323448,"line_start":87,"line_end":87,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323449,"byte_end":323452,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default sentence boundary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323453,"byte_end":323532,"line_start":89,"line_end":89,"column_start":1,"column_end":80}},{"value":"/ rules specified in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323533,"byte_end":323555,"line_start":90,"line_end":90,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Sentence_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323556,"byte_end":323641,"line_start":91,"line_end":91,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324560,"byte_end":324568,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<SentenceIndices>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323902,"byte_end":323966,"line_start":103,"line_end":103,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323971,"byte_end":323974,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323979,"byte_end":324053,"line_start":105,"line_end":105,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324058,"byte_end":324117,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324122,"byte_end":324125,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324130,"byte_end":324144,"line_start":108,"line_end":108,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324149,"byte_end":324152,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324157,"byte_end":324164,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324169,"byte_end":324193,"line_start":111,"line_end":111,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324198,"byte_end":324201,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"I want this. Not that. Right now.\".sentence_indices();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324206,"byte_end":324279,"line_start":113,"line_end":113,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324284,"byte_end":324287,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&b\"I want this. Not that. Right now.\"[..], it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324292,"byte_end":324365,"line_start":115,"line_end":115,"column_start":5,"column_end":78}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324370,"byte_end":324384,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"Not that. Right now.\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324389,"byte_end":324444,"line_start":117,"line_end":117,"column_start":5,"column_end":60}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324449,"byte_end":324463,"line_start":118,"line_end":118,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324468,"byte_end":324482,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324487,"byte_end":324522,"line_start":120,"line_end":120,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324527,"byte_end":324534,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324539,"byte_end":324548,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1736},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329184,"byte_end":329189,"line_start":29,"line_end":29,"column_start":12,"column_end":17},"name":"Words","qualname":"::unicode::word::Words","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over words in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over words in a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328088,"byte_end":328132,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328133,"byte_end":328136,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328137,"byte_end":328182,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words`](trait.ByteSlice.html#method.words).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328183,"byte_end":328243,"line_start":11,"line_end":11,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328244,"byte_end":328247,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This is similar to the [`WordsWithBreaks`](struct.WordsWithBreaks.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328248,"byte_end":328323,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ iterator, except it only returns elements that contain a \"word\" character.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328324,"byte_end":328402,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ A word character is defined by UTS #18 (Annex C) to be the combination","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328403,"byte_end":328477,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ of the `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328478,"byte_end":328547,"line_start":16,"line_end":16,"column_start":1,"column_end":70}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general categories.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328548,"byte_end":328624,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328625,"byte_end":328628,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328629,"byte_end":328704,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328705,"byte_end":328783,"line_start":20,"line_end":20,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328784,"byte_end":328844,"line_start":21,"line_end":21,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328845,"byte_end":328848,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328849,"byte_end":328924,"line_start":23,"line_end":23,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328925,"byte_end":328947,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":328948,"byte_end":329029,"line_start":25,"line_end":25,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329030,"byte_end":329106,"line_start":26,"line_end":26,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329107,"byte_end":329148,"line_start":27,"line_end":27,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329922,"byte_end":329930,"line_start":56,"line_end":56,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Words>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329340,"byte_end":329404,"line_start":36,"line_end":36,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329409,"byte_end":329412,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329417,"byte_end":329491,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329496,"byte_end":329555,"line_start":39,"line_end":39,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329560,"byte_end":329563,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329568,"byte_end":329582,"line_start":41,"line_end":41,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329587,"byte_end":329590,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329595,"byte_end":329602,"line_start":43,"line_end":43,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329607,"byte_end":329631,"line_start":44,"line_end":44,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329636,"byte_end":329639,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329644,"byte_end":329684,"line_start":46,"line_end":46,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329689,"byte_end":329692,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329697,"byte_end":329743,"line_start":48,"line_end":48,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329748,"byte_end":329762,"line_start":49,"line_end":49,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329767,"byte_end":329781,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329786,"byte_end":329825,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329830,"byte_end":329844,"line_start":52,"line_end":52,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329849,"byte_end":329884,"line_start":53,"line_end":53,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329889,"byte_end":329896,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329901,"byte_end":329910,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1746},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331979,"byte_end":331990,"line_start":104,"line_end":104,"column_start":12,"column_end":23},"name":"WordIndices","qualname":"::unicode::word::WordIndices","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over words in a byte string and their byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over words in a byte string and their byte index positions.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330292,"byte_end":330367,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330368,"byte_end":330371,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330372,"byte_end":330417,"line_start":77,"line_end":77,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::word_indices`](trait.ByteSlice.html#method.word_indices).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330418,"byte_end":330492,"line_start":78,"line_end":78,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330493,"byte_end":330496,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This is similar to the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330497,"byte_end":330523,"line_start":80,"line_end":80,"column_start":1,"column_end":27}},{"value":"/ [`WordsWithBreakIndices`](struct.WordsWithBreakIndices.html) iterator,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330524,"byte_end":330598,"line_start":81,"line_end":81,"column_start":1,"column_end":75}},{"value":"/ except it only returns elements that contain a \"word\" character. A","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330599,"byte_end":330669,"line_start":82,"line_end":82,"column_start":1,"column_end":71}},{"value":"/ word character is defined by UTS #18 (Annex C) to be the combination","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330670,"byte_end":330742,"line_start":83,"line_end":83,"column_start":1,"column_end":73}},{"value":"/ of the `Alphabetic` and `Join_Control` properties, along with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330743,"byte_end":330812,"line_start":84,"line_end":84,"column_start":1,"column_end":70}},{"value":"/ `Decimal_Number`, `Mark` and `Connector_Punctuation` general categories.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330813,"byte_end":330889,"line_start":85,"line_end":85,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330890,"byte_end":330893,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330894,"byte_end":330962,"line_start":87,"line_end":87,"column_start":1,"column_end":69}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330963,"byte_end":331036,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331037,"byte_end":331102,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331103,"byte_end":331180,"line_start":90,"line_end":90,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331181,"byte_end":331257,"line_start":91,"line_end":91,"column_start":1,"column_end":77}},{"value":"/ word yielded with those indices. For example, when this iterator encounters","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331258,"byte_end":331337,"line_start":92,"line_end":92,"column_start":1,"column_end":80}},{"value":"/ `\\xFF` in the byte string, then it will yield a pair of indices ranging","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331338,"byte_end":331413,"line_start":93,"line_end":93,"column_start":1,"column_end":76}},{"value":"/ over a single byte, but will provide an `&str` equivalent to `\"\\u{FFFD}\"`,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331414,"byte_end":331492,"line_start":94,"line_end":94,"column_start":1,"column_end":79}},{"value":"/ which is three bytes in length. However, when given only valid UTF-8, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331493,"byte_end":331571,"line_start":95,"line_end":95,"column_start":1,"column_end":79}},{"value":"/ all indices are in exact correspondence with their paired word.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331572,"byte_end":331639,"line_start":96,"line_end":96,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331640,"byte_end":331643,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331644,"byte_end":331719,"line_start":98,"line_end":98,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331720,"byte_end":331742,"line_start":99,"line_end":99,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331743,"byte_end":331824,"line_start":100,"line_end":100,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331825,"byte_end":331901,"line_start":101,"line_end":101,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":331902,"byte_end":331943,"line_start":102,"line_end":102,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332779,"byte_end":332787,"line_start":132,"line_end":132,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordIndices>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332171,"byte_end":332235,"line_start":111,"line_end":111,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332240,"byte_end":332243,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332248,"byte_end":332322,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332327,"byte_end":332386,"line_start":114,"line_end":114,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332391,"byte_end":332394,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332399,"byte_end":332413,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332418,"byte_end":332421,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332426,"byte_end":332433,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332438,"byte_end":332462,"line_start":119,"line_end":119,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332467,"byte_end":332470,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".word_indices();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332475,"byte_end":332522,"line_start":121,"line_end":121,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332527,"byte_end":332530,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332535,"byte_end":332581,"line_start":123,"line_end":123,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332586,"byte_end":332600,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332605,"byte_end":332619,"line_start":125,"line_end":125,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332624,"byte_end":332663,"line_start":126,"line_end":126,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332668,"byte_end":332682,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332687,"byte_end":332701,"line_start":128,"line_end":128,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332706,"byte_end":332741,"line_start":129,"line_end":129,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332746,"byte_end":332753,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332758,"byte_end":332767,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1756},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334238,"byte_end":334253,"line_start":171,"line_end":171,"column_start":12,"column_end":27},"name":"WordsWithBreaks","qualname":"::unicode::word::WordsWithBreaks","value":"WordsWithBreaks {  }","parent":null,"children":[{"krate":0,"index":1758}],"decl_id":null,"docs":" An iterator over all word breaks in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over all word breaks in a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333215,"byte_end":333269,"line_start":151,"line_end":151,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333270,"byte_end":333273,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333274,"byte_end":333319,"line_start":153,"line_end":153,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words_with_breaks`](trait.ByteSlice.html#method.words_with_breaks).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333320,"byte_end":333404,"line_start":154,"line_end":154,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333405,"byte_end":333408,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ This iterator yields not only all words, but the content that comes between","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333409,"byte_end":333488,"line_start":156,"line_end":156,"column_start":1,"column_end":80}},{"value":"/ words. In particular, if all elements yielded by this iterator are","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333489,"byte_end":333559,"line_start":157,"line_end":157,"column_start":1,"column_end":71}},{"value":"/ concatenated, then the result is the original string (subject to Unicode","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333560,"byte_end":333636,"line_start":158,"line_end":158,"column_start":1,"column_end":77}},{"value":"/ replacement codepoint substitutions).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333637,"byte_end":333678,"line_start":159,"line_end":159,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333679,"byte_end":333682,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator yields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333683,"byte_end":333758,"line_start":161,"line_end":161,"column_start":1,"column_end":76}},{"value":"/ `&str` elements. When invalid UTF-8 is encountered, replacement codepoints","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333759,"byte_end":333837,"line_start":162,"line_end":162,"column_start":1,"column_end":79}},{"value":"/ are [substituted](index.html#handling-of-invalid-utf-8).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333838,"byte_end":333898,"line_start":163,"line_end":163,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333899,"byte_end":333902,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333903,"byte_end":333978,"line_start":165,"line_end":165,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":333979,"byte_end":334001,"line_start":166,"line_end":166,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334002,"byte_end":334083,"line_start":167,"line_end":167,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334084,"byte_end":334160,"line_start":168,"line_end":168,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334161,"byte_end":334202,"line_start":169,"line_end":169,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335095,"byte_end":335103,"line_start":203,"line_end":203,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordsWithBreaks>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334415,"byte_end":334479,"line_start":180,"line_end":180,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334484,"byte_end":334487,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334492,"byte_end":334566,"line_start":182,"line_end":182,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334571,"byte_end":334630,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334635,"byte_end":334638,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334643,"byte_end":334657,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334662,"byte_end":334665,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334670,"byte_end":334677,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334682,"byte_end":334706,"line_start":188,"line_end":188,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334711,"byte_end":334714,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words_with_breaks();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334719,"byte_end":334771,"line_start":190,"line_end":190,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334776,"byte_end":334779,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334784,"byte_end":334830,"line_start":192,"line_end":192,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334835,"byte_end":334849,"line_start":193,"line_end":193,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" bar baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334854,"byte_end":334897,"line_start":194,"line_end":194,"column_start":5,"column_end":48}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334902,"byte_end":334916,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334921,"byte_end":334935,"line_start":196,"line_end":196,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334940,"byte_end":334979,"line_start":197,"line_end":197,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334984,"byte_end":334998,"line_start":198,"line_end":198,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335003,"byte_end":335017,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335022,"byte_end":335057,"line_start":200,"line_end":200,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335062,"byte_end":335069,"line_start":201,"line_end":201,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335074,"byte_end":335083,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1765},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337059,"byte_end":337080,"line_start":250,"line_end":250,"column_start":12,"column_end":33},"name":"WordsWithBreakIndices","qualname":"::unicode::word::WordsWithBreakIndices","value":"WordsWithBreakIndices {  }","parent":null,"children":[{"krate":0,"index":1767},{"krate":0,"index":1768}],"decl_id":null,"docs":" An iterator over all word breaks in a byte string, along with their byte\n index positions.","sig":null,"attributes":[{"value":"/ An iterator over all word breaks in a byte string, along with their byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335449,"byte_end":335525,"line_start":222,"line_end":222,"column_start":1,"column_end":77}},{"value":"/ index positions.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335526,"byte_end":335546,"line_start":223,"line_end":223,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335547,"byte_end":335550,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ This iterator is typically constructed by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335551,"byte_end":335596,"line_start":225,"line_end":225,"column_start":1,"column_end":46}},{"value":"/ [`ByteSlice::words_with_break_indices`](trait.ByteSlice.html#method.words_with_break_indices).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335597,"byte_end":335695,"line_start":226,"line_end":226,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335696,"byte_end":335699,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ This iterator yields not only all words, but the content that comes between","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335700,"byte_end":335779,"line_start":228,"line_end":228,"column_start":1,"column_end":80}},{"value":"/ words. In particular, if all elements yielded by this iterator are","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335780,"byte_end":335850,"line_start":229,"line_end":229,"column_start":1,"column_end":71}},{"value":"/ concatenated, then the result is the original string (subject to Unicode","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335851,"byte_end":335927,"line_start":230,"line_end":230,"column_start":1,"column_end":77}},{"value":"/ replacement codepoint substitutions).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335928,"byte_end":335969,"line_start":231,"line_end":231,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335970,"byte_end":335973,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Since words are made up of one or more codepoints, this iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335974,"byte_end":336042,"line_start":233,"line_end":233,"column_start":1,"column_end":69}},{"value":"/ yields `&str` elements (along with their start and end byte offsets).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336043,"byte_end":336116,"line_start":234,"line_end":234,"column_start":1,"column_end":74}},{"value":"/ When invalid UTF-8 is encountered, replacement codepoints are","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336117,"byte_end":336182,"line_start":235,"line_end":235,"column_start":1,"column_end":66}},{"value":"/ [substituted](index.html#handling-of-invalid-utf-8). Because of this, the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336183,"byte_end":336260,"line_start":236,"line_end":236,"column_start":1,"column_end":78}},{"value":"/ indices yielded by this iterator may not correspond to the length of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336261,"byte_end":336337,"line_start":237,"line_end":237,"column_start":1,"column_end":77}},{"value":"/ word yielded with those indices. For example, when this iterator encounters","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336338,"byte_end":336417,"line_start":238,"line_end":238,"column_start":1,"column_end":80}},{"value":"/ `\\xFF` in the byte string, then it will yield a pair of indices ranging","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336418,"byte_end":336493,"line_start":239,"line_end":239,"column_start":1,"column_end":76}},{"value":"/ over a single byte, but will provide an `&str` equivalent to `\"\\u{FFFD}\"`,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336494,"byte_end":336572,"line_start":240,"line_end":240,"column_start":1,"column_end":79}},{"value":"/ which is three bytes in length. However, when given only valid UTF-8, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336573,"byte_end":336651,"line_start":241,"line_end":241,"column_start":1,"column_end":79}},{"value":"/ all indices are in exact correspondence with their paired word.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336652,"byte_end":336719,"line_start":242,"line_end":242,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336720,"byte_end":336723,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ This iterator yields words in accordance with the default word boundary","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336724,"byte_end":336799,"line_start":244,"line_end":244,"column_start":1,"column_end":76}},{"value":"/ rules specified in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336800,"byte_end":336822,"line_start":245,"line_end":245,"column_start":1,"column_end":23}},{"value":"/ [UAX #29](https://www.unicode.org/reports/tr29/tr29-33.html#Word_Boundaries).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336823,"byte_end":336904,"line_start":246,"line_end":246,"column_start":1,"column_end":82}},{"value":"/ In particular, this may not be suitable for Japanese and Chinese scripts","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336905,"byte_end":336981,"line_start":247,"line_end":247,"column_start":1,"column_end":77}},{"value":"/ that do not use spaces between words.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":336982,"byte_end":337023,"line_start":248,"line_end":248,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337995,"byte_end":338003,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<WordsWithBreakIndices>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337308,"byte_end":337372,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337377,"byte_end":337380,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337385,"byte_end":337459,"line_start":262,"line_end":262,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337464,"byte_end":337523,"line_start":263,"line_end":263,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337528,"byte_end":337531,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337536,"byte_end":337550,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337555,"byte_end":337558,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337563,"byte_end":337570,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337575,"byte_end":337599,"line_start":268,"line_end":268,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337604,"byte_end":337607,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"foo bar baz\".words_with_break_indices();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337612,"byte_end":337671,"line_start":270,"line_end":270,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337676,"byte_end":337679,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"foo bar baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337684,"byte_end":337730,"line_start":272,"line_end":272,"column_start":5,"column_end":51}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337735,"byte_end":337749,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" bar baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337754,"byte_end":337797,"line_start":274,"line_end":274,"column_start":5,"column_end":48}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337802,"byte_end":337816,"line_start":275,"line_end":275,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337821,"byte_end":337835,"line_start":276,"line_end":276,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\" baz\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337840,"byte_end":337879,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337884,"byte_end":337898,"line_start":278,"line_end":278,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337903,"byte_end":337917,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337922,"byte_end":337957,"line_start":280,"line_end":280,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337962,"byte_end":337969,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337974,"byte_end":337983,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1775},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345157,"byte_end":345162,"line_start":84,"line_end":84,"column_start":12,"column_end":17},"name":"Chars","qualname":"::utf8::Chars","value":"Chars {  }","parent":null,"children":[{"krate":0,"index":1777}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344665,"byte_end":344725,"line_start":74,"line_end":74,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344726,"byte_end":344729,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344730,"byte_end":344808,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344809,"byte_end":344863,"line_start":77,"line_end":77,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344864,"byte_end":344940,"line_start":78,"line_end":78,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344941,"byte_end":344944,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344945,"byte_end":344980,"line_start":80,"line_end":80,"column_start":1,"column_end":36}},{"value":"/ [`chars`](trait.ByteSlice.html#method.chars) method provided by the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":344981,"byte_end":345052,"line_start":81,"line_end":81,"column_start":1,"column_end":72}},{"value":"/ [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345053,"byte_end":345121,"line_start":82,"line_end":82,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345879,"byte_end":345887,"line_start":113,"line_end":113,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<Chars>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345294,"byte_end":345358,"line_start":93,"line_end":93,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345363,"byte_end":345366,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345371,"byte_end":345445,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345450,"byte_end":345509,"line_start":96,"line_end":96,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345514,"byte_end":345517,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345522,"byte_end":345536,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345541,"byte_end":345544,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345549,"byte_end":345556,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345561,"byte_end":345585,"line_start":101,"line_end":101,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345590,"byte_end":345593,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let mut chars = b\"abc\".chars();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345598,"byte_end":345633,"line_start":103,"line_end":103,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345638,"byte_end":345641,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", chars.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345646,"byte_end":345687,"line_start":105,"line_end":105,"column_start":5,"column_end":46}},{"value":"/ chars.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345692,"byte_end":345709,"line_start":106,"line_end":106,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"bc\", chars.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345714,"byte_end":345754,"line_start":107,"line_end":107,"column_start":5,"column_end":45}},{"value":"/ chars.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345759,"byte_end":345776,"line_start":108,"line_end":108,"column_start":5,"column_end":22}},{"value":"/ chars.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345781,"byte_end":345798,"line_start":109,"line_end":109,"column_start":5,"column_end":22}},{"value":"/ assert_eq!(b\"\", chars.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345803,"byte_end":345841,"line_start":110,"line_end":110,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345846,"byte_end":345853,"line_start":111,"line_end":111,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345858,"byte_end":345867,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1784},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347580,"byte_end":347591,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"CharIndices","qualname":"::utf8::CharIndices","value":"CharIndices {  }","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1788}],"decl_id":null,"docs":" An iterator over Unicode scalar values in a byte string and their\n byte index positions.","sig":null,"attributes":[{"value":"/ An iterator over Unicode scalar values in a byte string and their","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346508,"byte_end":346577,"line_start":144,"line_end":144,"column_start":1,"column_end":70}},{"value":"/ byte index positions.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346578,"byte_end":346603,"line_start":145,"line_end":145,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346604,"byte_end":346607,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ When invalid UTF-8 byte sequences are found, they are substituted with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346608,"byte_end":346686,"line_start":147,"line_end":147,"column_start":1,"column_end":79}},{"value":"/ Unicode replacement codepoint (`U+FFFD`) using the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346687,"byte_end":346741,"line_start":148,"line_end":148,"column_start":1,"column_end":55}},{"value":"/ [\"maximal subpart\" strategy](http://www.unicode.org/review/pr-121.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346742,"byte_end":346818,"line_start":149,"line_end":149,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346819,"byte_end":346822,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ Note that this is slightly different from the `CharIndices` iterator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346823,"byte_end":346895,"line_start":151,"line_end":151,"column_start":1,"column_end":73}},{"value":"/ provided by the standard library. Aside from working on possibly invalid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346896,"byte_end":346972,"line_start":152,"line_end":152,"column_start":1,"column_end":77}},{"value":"/ UTF-8, this iterator provides both the corresponding starting and ending","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346973,"byte_end":347049,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/ byte indices of each codepoint yielded. The ending position is necessary to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347050,"byte_end":347129,"line_start":154,"line_end":154,"column_start":1,"column_end":80}},{"value":"/ slice the original byte string when invalid UTF-8 bytes are converted into","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347130,"byte_end":347208,"line_start":155,"line_end":155,"column_start":1,"column_end":79}},{"value":"/ a Unicode replacement codepoint, since a single replacement codepoint can","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347209,"byte_end":347286,"line_start":156,"line_end":156,"column_start":1,"column_end":78}},{"value":"/ substitute anywhere from 1 to 3 invalid bytes (inclusive).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347287,"byte_end":347349,"line_start":157,"line_end":157,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347350,"byte_end":347353,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ This iterator is created by the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347354,"byte_end":347389,"line_start":159,"line_end":159,"column_start":1,"column_end":36}},{"value":"/ [`char_indices`](trait.ByteSlice.html#method.char_indices) method provided","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347390,"byte_end":347468,"line_start":160,"line_end":160,"column_start":1,"column_end":79}},{"value":"/ by the [`ByteSlice`](trait.ByteSlice.html) extension trait for `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347469,"byte_end":347544,"line_start":161,"line_end":161,"column_start":1,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1007},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348411,"byte_end":348419,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<CharIndices>::as_bytes","value":"pub fn as_bytes(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" View the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ View the underlying data as a subslice of the original data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347840,"byte_end":347904,"line_start":174,"line_end":174,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347909,"byte_end":347912,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ The slice returned has the same lifetime as the original slice, and so","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347917,"byte_end":347991,"line_start":176,"line_end":176,"column_start":5,"column_end":79}},{"value":"/ the iterator can continue to be used while this exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347996,"byte_end":348055,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348060,"byte_end":348063,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348068,"byte_end":348082,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348087,"byte_end":348090,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348095,"byte_end":348102,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348107,"byte_end":348131,"line_start":182,"line_end":182,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348136,"byte_end":348139,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let mut it = b\"abc\".char_indices();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348144,"byte_end":348183,"line_start":184,"line_end":184,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348188,"byte_end":348191,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(b\"abc\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348196,"byte_end":348234,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348239,"byte_end":348253,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"bc\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348258,"byte_end":348295,"line_start":188,"line_end":188,"column_start":5,"column_end":42}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348300,"byte_end":348314,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/ it.next();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348319,"byte_end":348333,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(b\"\", it.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348338,"byte_end":348373,"line_start":191,"line_end":191,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348378,"byte_end":348385,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348390,"byte_end":348399,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1795},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349510,"byte_end":349520,"line_start":234,"line_end":234,"column_start":12,"column_end":22},"name":"Utf8Chunks","qualname":"::utf8::Utf8Chunks","value":"Utf8Chunks {  }","parent":null,"children":[{"krate":0,"index":1797}],"decl_id":null,"docs":" An iterator over chunks of valid UTF-8 in a byte slice.","sig":null,"attributes":[{"value":"/ An iterator over chunks of valid UTF-8 in a byte slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349345,"byte_end":349404,"line_start":230,"line_end":230,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349405,"byte_end":349408,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ See [`utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349409,"byte_end":349474,"line_start":232,"line_end":232,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1017},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349999,"byte_end":350008,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"Utf8Chunk","qualname":"::utf8::Utf8Chunk","value":"Utf8Chunk {  }","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021}],"decl_id":null,"docs":" A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ A chunk of valid UTF-8, possibly followed by invalid UTF-8 bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349562,"byte_end":349631,"line_start":238,"line_end":238,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349632,"byte_end":349635,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ This is yielded by the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349636,"byte_end":349662,"line_start":240,"line_end":240,"column_start":1,"column_end":27}},{"value":"/ [`Utf8Chunks`](struct.Utf8Chunks.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349663,"byte_end":349705,"line_start":241,"line_end":241,"column_start":1,"column_end":43}},{"value":"/ iterator, which can be created via the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349706,"byte_end":349748,"line_start":242,"line_end":242,"column_start":1,"column_end":43}},{"value":"/ [`ByteSlice::utf8_chunks`](trait.ByteSlice.html#method.utf8_chunks)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349749,"byte_end":349820,"line_start":243,"line_end":243,"column_start":1,"column_end":72}},{"value":"/ method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349821,"byte_end":349832,"line_start":244,"line_end":244,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349833,"byte_end":349836,"line_start":245,"line_end":245,"column_start":1,"column_end":4}},{"value":"/ The `'a` lifetime parameter corresponds to the lifetime of the bytes that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349837,"byte_end":349914,"line_start":246,"line_end":246,"column_start":1,"column_end":78}},{"value":"/ are being iterated over.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349915,"byte_end":349943,"line_start":247,"line_end":247,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350810,"byte_end":350815,"line_start":274,"line_end":274,"column_start":12,"column_end":17},"name":"valid","qualname":"<Utf8Chunk>::valid","value":"pub fn valid(&Self) -> &'a str","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) valid UTF-8 bytes in this chunk.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350618,"byte_end":350683,"line_start":269,"line_end":269,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350688,"byte_end":350691,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ This may be empty if there are consecutive sequences of invalid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350696,"byte_end":350769,"line_start":271,"line_end":271,"column_start":5,"column_end":78}},{"value":"/ bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350774,"byte_end":350784,"line_start":272,"line_end":272,"column_start":5,"column_end":15}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350789,"byte_end":350798,"line_start":273,"line_end":273,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351568,"byte_end":351575,"line_start":292,"line_end":292,"column_start":12,"column_end":19},"name":"invalid","qualname":"<Utf8Chunk>::invalid","value":"pub fn invalid(&Self) -> &'a [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the (possibly empty) invalid UTF-8 bytes in this chunk that\n immediately follow the valid UTF-8 bytes in this chunk.","sig":null,"attributes":[{"value":"/ Returns the (possibly empty) invalid UTF-8 bytes in this chunk that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350866,"byte_end":350937,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/ immediately follow the valid UTF-8 bytes in this chunk.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350942,"byte_end":351001,"line_start":279,"line_end":279,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351006,"byte_end":351009,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ This is only empty when this chunk corresponds to the last chunk in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351014,"byte_end":351085,"line_start":281,"line_end":281,"column_start":5,"column_end":76}},{"value":"/ the original bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351090,"byte_end":351113,"line_start":282,"line_end":282,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351118,"byte_end":351121,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ The maximum length of this slice is 3. That is, invalid UTF-8 byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351126,"byte_end":351196,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ sequences greater than 1 always correspond to a valid _prefix_ of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351201,"byte_end":351270,"line_start":285,"line_end":285,"column_start":5,"column_end":74}},{"value":"/ a valid UTF-8 encoded codepoint. This corresponds to the \"substitution","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351275,"byte_end":351349,"line_start":286,"line_end":286,"column_start":5,"column_end":79}},{"value":"/ of maximal subparts\" strategy that is described in more detail in the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351354,"byte_end":351427,"line_start":287,"line_end":287,"column_start":5,"column_end":78}},{"value":"/ docs for the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351432,"byte_end":351448,"line_start":288,"line_end":288,"column_start":5,"column_end":21}},{"value":"/ [`ByteSlice::to_str_lossy`](trait.ByteSlice.html#method.to_str_lossy)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351453,"byte_end":351526,"line_start":289,"line_end":289,"column_start":5,"column_end":78}},{"value":"/ method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351531,"byte_end":351542,"line_start":290,"line_end":290,"column_start":5,"column_end":16}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351547,"byte_end":351556,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351954,"byte_end":351964,"line_start":304,"line_end":304,"column_start":12,"column_end":22},"name":"incomplete","qualname":"<Utf8Chunk>::incomplete","value":"pub fn incomplete(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the invalid sequence might still become valid if more\n bytes are added.","sig":null,"attributes":[{"value":"/ Returns whether the invalid sequence might still become valid if more","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351640,"byte_end":351713,"line_start":296,"line_end":296,"column_start":5,"column_end":78}},{"value":"/ bytes are added.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351718,"byte_end":351738,"line_start":297,"line_end":297,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351743,"byte_end":351746,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ Returns true if the end of the input was reached unexpectedly,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351751,"byte_end":351817,"line_start":299,"line_end":299,"column_start":5,"column_end":71}},{"value":"/ without encountering an unexpected byte.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351822,"byte_end":351866,"line_start":300,"line_end":300,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351871,"byte_end":351874,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This can only be the case for the last chunk.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351879,"byte_end":351928,"line_start":302,"line_end":302,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":351933,"byte_end":351942,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1804},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355469,"byte_end":355478,"line_start":410,"line_end":410,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::utf8::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":1805},{"krate":0,"index":1806}],"decl_id":null,"docs":" An error that occurs when UTF-8 decoding fails.","sig":null,"attributes":[{"value":"/ An error that occurs when UTF-8 decoding fails.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353711,"byte_end":353762,"line_start":361,"line_end":361,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353763,"byte_end":353766,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ This error occurs when attempting to convert a non-UTF-8 byte","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353767,"byte_end":353832,"line_start":363,"line_end":363,"column_start":1,"column_end":66}},{"value":"/ string to a Rust string that must be valid UTF-8. For example,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353833,"byte_end":353899,"line_start":364,"line_end":364,"column_start":1,"column_end":67}},{"value":"/ [`to_str`](trait.ByteSlice.html#method.to_str) is one such method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353900,"byte_end":353970,"line_start":365,"line_end":365,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353971,"byte_end":353974,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353975,"byte_end":353988,"line_start":367,"line_end":367,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353989,"byte_end":353992,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence is invalid,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353993,"byte_end":354067,"line_start":369,"line_end":369,"column_start":1,"column_end":75}},{"value":"/ but ends with a sequence that is a possible prefix of valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354068,"byte_end":354138,"line_start":370,"line_end":370,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354139,"byte_end":354142,"line_start":371,"line_end":371,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354143,"byte_end":354150,"line_start":372,"line_end":372,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, ByteSlice};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354151,"byte_end":354180,"line_start":373,"line_end":373,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354181,"byte_end":354184,"line_start":374,"line_end":374,"column_start":1,"column_end":4}},{"value":"/ let s = B(b\"foobar\\xF1\\x80\\x80\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354185,"byte_end":354222,"line_start":375,"line_end":375,"column_start":1,"column_end":38}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354223,"byte_end":354261,"line_start":376,"line_end":376,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354262,"byte_end":354299,"line_start":377,"line_end":377,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354300,"byte_end":354338,"line_start":378,"line_end":378,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354339,"byte_end":354346,"line_start":379,"line_end":379,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354347,"byte_end":354350,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ This example shows what happens when a given byte sequence contains","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354351,"byte_end":354422,"line_start":381,"line_end":381,"column_start":1,"column_end":72}},{"value":"/ invalid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354423,"byte_end":354441,"line_start":382,"line_end":382,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354442,"byte_end":354445,"line_start":383,"line_end":383,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354446,"byte_end":354453,"line_start":384,"line_end":384,"column_start":1,"column_end":8}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354454,"byte_end":354478,"line_start":385,"line_end":385,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354479,"byte_end":354482,"line_start":386,"line_end":386,"column_start":1,"column_end":4}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354483,"byte_end":354521,"line_start":387,"line_end":387,"column_start":1,"column_end":39}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354522,"byte_end":354560,"line_start":388,"line_end":388,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354561,"byte_end":354598,"line_start":389,"line_end":389,"column_start":1,"column_end":38}},{"value":"/ // The error length reports the maximum number of bytes that correspond to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354599,"byte_end":354677,"line_start":390,"line_end":390,"column_start":1,"column_end":79}},{"value":"/ // a valid prefix of a UTF-8 encoded codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354678,"byte_end":354729,"line_start":391,"line_end":391,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(err.error_len(), Some(3));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354730,"byte_end":354771,"line_start":392,"line_end":392,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354772,"byte_end":354775,"line_start":393,"line_end":393,"column_start":1,"column_end":4}},{"value":"/ // In contrast to the above which contains a single invalid prefix,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354776,"byte_end":354847,"line_start":394,"line_end":394,"column_start":1,"column_end":72}},{"value":"/ // consider the case of multiple individal bytes that are never valid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354848,"byte_end":354921,"line_start":395,"line_end":395,"column_start":1,"column_end":74}},{"value":"/ // prefixes. Note how the value of error_len changes!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354922,"byte_end":354979,"line_start":396,"line_end":396,"column_start":1,"column_end":58}},{"value":"/ let s = b\"foobar\\xFF\\xFFquux\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":354980,"byte_end":355014,"line_start":397,"line_end":397,"column_start":1,"column_end":35}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355015,"byte_end":355053,"line_start":398,"line_end":398,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355054,"byte_end":355091,"line_start":399,"line_end":399,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355092,"byte_end":355133,"line_start":400,"line_end":400,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355134,"byte_end":355137,"line_start":401,"line_end":401,"column_start":1,"column_end":4}},{"value":"/ // The fact that it's an invalid prefix does not change error_len even","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355138,"byte_end":355212,"line_start":402,"line_end":402,"column_start":1,"column_end":75}},{"value":"/ // when it immediately precedes the end of the string.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355213,"byte_end":355271,"line_start":403,"line_end":403,"column_start":1,"column_end":59}},{"value":"/ let s = b\"foobar\\xFF\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355272,"byte_end":355298,"line_start":404,"line_end":404,"column_start":1,"column_end":27}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355299,"byte_end":355337,"line_start":405,"line_end":405,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(err.valid_up_to(), 6);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355338,"byte_end":355375,"line_start":406,"line_end":406,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(err.error_len(), Some(1));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355376,"byte_end":355417,"line_start":407,"line_end":407,"column_start":1,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355418,"byte_end":355425,"line_start":408,"line_end":408,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356168,"byte_end":356179,"line_start":435,"line_end":435,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"pub fn valid_up_to(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte index of the position immediately following the last\n valid UTF-8 byte.","sig":null,"attributes":[{"value":"/ Returns the byte index of the position immediately following the last","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355559,"byte_end":355632,"line_start":416,"line_end":416,"column_start":5,"column_end":78}},{"value":"/ valid UTF-8 byte.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355637,"byte_end":355658,"line_start":417,"line_end":417,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355663,"byte_end":355666,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355671,"byte_end":355684,"line_start":419,"line_end":419,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355689,"byte_end":355692,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ This examples shows how `valid_up_to` can be used to retrieve a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355697,"byte_end":355764,"line_start":421,"line_end":421,"column_start":5,"column_end":72}},{"value":"/ possibly empty prefix that is guaranteed to be valid UTF-8:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355769,"byte_end":355832,"line_start":422,"line_end":422,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355837,"byte_end":355840,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355845,"byte_end":355852,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ use bstr::ByteSlice;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355857,"byte_end":355881,"line_start":425,"line_end":425,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355886,"byte_end":355889,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let s = b\"foobar\\xF1\\x80\\x80quux\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355894,"byte_end":355932,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/ let err = s.to_str().unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355937,"byte_end":355975,"line_start":428,"line_end":428,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355980,"byte_end":355983,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ // This is guaranteed to never panic.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355988,"byte_end":356029,"line_start":430,"line_end":430,"column_start":5,"column_end":46}},{"value":"/ let string = s[..err.valid_up_to()].to_str().unwrap();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356034,"byte_end":356092,"line_start":431,"line_end":431,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(string, \"foobar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356097,"byte_end":356130,"line_start":432,"line_end":432,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356135,"byte_end":356142,"line_start":433,"line_end":433,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356147,"byte_end":356156,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1036},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356785,"byte_end":356794,"line_start":449,"line_end":449,"column_start":12,"column_end":21},"name":"error_len","qualname":"<Utf8Error>::error_len","value":"pub fn error_len(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of invalid UTF-8 bytes immediately following\n the position returned by `valid_up_to`. This value is always at least\n `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8\n encoded codepoint.","sig":null,"attributes":[{"value":"/ Returns the total number of invalid UTF-8 bytes immediately following","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356234,"byte_end":356307,"line_start":439,"line_end":439,"column_start":5,"column_end":78}},{"value":"/ the position returned by `valid_up_to`. This value is always at least","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356312,"byte_end":356385,"line_start":440,"line_end":440,"column_start":5,"column_end":78}},{"value":"/ `1`, but can be up to `3` if bytes form a valid prefix of some UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356390,"byte_end":356462,"line_start":441,"line_end":441,"column_start":5,"column_end":77}},{"value":"/ encoded codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356467,"byte_end":356489,"line_start":442,"line_end":442,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356494,"byte_end":356497,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ If the end of the original input was found before a valid UTF-8 encoded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356502,"byte_end":356577,"line_start":444,"line_end":444,"column_start":5,"column_end":80}},{"value":"/ codepoint could be completed, then this returns `None`. This is useful","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356582,"byte_end":356656,"line_start":445,"line_end":445,"column_start":5,"column_end":79}},{"value":"/ when processing streams, where a `None` value signals that more input","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356661,"byte_end":356734,"line_start":446,"line_end":446,"column_start":5,"column_end":78}},{"value":"/ might be needed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356739,"byte_end":356759,"line_start":447,"line_end":447,"column_start":5,"column_end":25}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356764,"byte_end":356773,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":1047},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362744,"byte_end":362750,"line_start":613,"line_end":613,"column_start":8,"column_end":14},"name":"decode","qualname":"::utf8::decode","value":"pub fn decode<B: AsRef<[u8]>>(B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the beginning of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the beginning of a slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361205,"byte_end":361282,"line_start":567,"line_end":567,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361283,"byte_end":361286,"line_start":568,"line_end":568,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361287,"byte_end":361364,"line_start":569,"line_end":569,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361365,"byte_end":361443,"line_start":570,"line_end":570,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361444,"byte_end":361509,"line_start":571,"line_end":571,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361510,"byte_end":361513,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361514,"byte_end":361591,"line_start":573,"line_end":573,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361592,"byte_end":361671,"line_start":574,"line_end":574,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361672,"byte_end":361748,"line_start":575,"line_end":575,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361749,"byte_end":361794,"line_start":576,"line_end":576,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361795,"byte_end":361798,"line_start":577,"line_end":577,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361799,"byte_end":361813,"line_start":578,"line_end":578,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361814,"byte_end":361817,"line_start":579,"line_end":579,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361818,"byte_end":361834,"line_start":580,"line_end":580,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361835,"byte_end":361838,"line_start":581,"line_end":581,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361839,"byte_end":361846,"line_start":582,"line_end":582,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_utf8;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361847,"byte_end":361873,"line_start":583,"line_end":583,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361874,"byte_end":361877,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361878,"byte_end":361912,"line_start":585,"line_end":585,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361913,"byte_end":361963,"line_start":586,"line_end":586,"column_start":1,"column_end":51}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361964,"byte_end":361996,"line_start":587,"line_end":587,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":361997,"byte_end":362021,"line_start":588,"line_end":588,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362022,"byte_end":362025,"line_start":589,"line_end":589,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362026,"byte_end":362066,"line_start":590,"line_end":590,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_utf8(b\"\\xE2\\x98\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362067,"byte_end":362113,"line_start":591,"line_end":591,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362114,"byte_end":362139,"line_start":592,"line_end":592,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362140,"byte_end":362164,"line_start":593,"line_end":593,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362165,"byte_end":362172,"line_start":594,"line_end":594,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362173,"byte_end":362176,"line_start":595,"line_end":595,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362177,"byte_end":362251,"line_start":596,"line_end":596,"column_start":1,"column_end":75}},{"value":"/ bytes, while replacing invalid UTF-8 sequences with the replacement","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362252,"byte_end":362323,"line_start":597,"line_end":597,"column_start":1,"column_end":72}},{"value":"/ codepoint:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362324,"byte_end":362338,"line_start":598,"line_end":598,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362339,"byte_end":362342,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362343,"byte_end":362350,"line_start":600,"line_end":600,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_utf8};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362351,"byte_end":362382,"line_start":601,"line_end":601,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362383,"byte_end":362386,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362387,"byte_end":362458,"line_start":603,"line_end":603,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362459,"byte_end":362486,"line_start":604,"line_end":604,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362487,"byte_end":362516,"line_start":605,"line_end":605,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_utf8(bytes);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362517,"byte_end":362561,"line_start":606,"line_end":606,"column_start":1,"column_end":45}},{"value":"/     bytes = &bytes[size..];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362562,"byte_end":362593,"line_start":607,"line_end":607,"column_start":1,"column_end":32}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362594,"byte_end":362639,"line_start":608,"line_end":608,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362640,"byte_end":362645,"line_start":609,"line_end":609,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['☃', '\\u{FFFD}', '𝞃', '\\u{FFFD}', 'a'], chars);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362646,"byte_end":362718,"line_start":610,"line_end":610,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362719,"byte_end":362726,"line_start":611,"line_end":611,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":362727,"byte_end":362736,"line_start":612,"line_end":612,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1051},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366977,"byte_end":366988,"line_start":740,"line_end":740,"column_start":8,"column_end":19},"name":"decode_last","qualname":"::utf8::decode_last","value":"pub fn decode_last<B: AsRef<[u8]>>(B) -> (Option<char>, usize)","parent":null,"children":[],"decl_id":null,"docs":" UTF-8 decode a single Unicode scalar value from the end of a slice.","sig":null,"attributes":[{"value":"/ UTF-8 decode a single Unicode scalar value from the end of a slice.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365396,"byte_end":365467,"line_start":694,"line_end":694,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365468,"byte_end":365471,"line_start":695,"line_end":695,"column_start":1,"column_end":4}},{"value":"/ When successful, the corresponding Unicode scalar value is returned along","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365472,"byte_end":365549,"line_start":696,"line_end":696,"column_start":1,"column_end":78}},{"value":"/ with the number of bytes it was encoded with. The number of bytes consumed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365550,"byte_end":365628,"line_start":697,"line_end":697,"column_start":1,"column_end":79}},{"value":"/ for a successful decode is always between 1 and 4, inclusive.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365629,"byte_end":365694,"line_start":698,"line_end":698,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365695,"byte_end":365698,"line_start":699,"line_end":699,"column_start":1,"column_end":4}},{"value":"/ When unsuccessful, `None` is returned along with the number of bytes that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365699,"byte_end":365776,"line_start":700,"line_end":700,"column_start":1,"column_end":78}},{"value":"/ make up a maximal prefix of a valid UTF-8 code unit sequence. In this case,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365777,"byte_end":365856,"line_start":701,"line_end":701,"column_start":1,"column_end":80}},{"value":"/ the number of bytes consumed is always between 0 and 3, inclusive, where","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365857,"byte_end":365933,"line_start":702,"line_end":702,"column_start":1,"column_end":77}},{"value":"/ 0 is only returned when `slice` is empty.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365934,"byte_end":365979,"line_start":703,"line_end":703,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365980,"byte_end":365983,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365984,"byte_end":365998,"line_start":705,"line_end":705,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":365999,"byte_end":366002,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366003,"byte_end":366019,"line_start":707,"line_end":707,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366020,"byte_end":366023,"line_start":708,"line_end":708,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366024,"byte_end":366031,"line_start":709,"line_end":709,"column_start":1,"column_end":8}},{"value":"/ use bstr::decode_last_utf8;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366032,"byte_end":366063,"line_start":710,"line_end":710,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366064,"byte_end":366067,"line_start":711,"line_end":711,"column_start":1,"column_end":4}},{"value":"/ // Decoding a valid codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366068,"byte_end":366102,"line_start":712,"line_end":712,"column_start":1,"column_end":35}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\\x83\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366103,"byte_end":366158,"line_start":713,"line_end":713,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Some('☃'), ch);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366159,"byte_end":366191,"line_start":714,"line_end":714,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(3, size);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366192,"byte_end":366216,"line_start":715,"line_end":715,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366217,"byte_end":366220,"line_start":716,"line_end":716,"column_start":1,"column_end":4}},{"value":"/ // Decoding an incomplete codepoint.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366221,"byte_end":366261,"line_start":717,"line_end":717,"column_start":1,"column_end":41}},{"value":"/ let (ch, size) = decode_last_utf8(b\"\\xE2\\x98\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366262,"byte_end":366313,"line_start":718,"line_end":718,"column_start":1,"column_end":52}},{"value":"/ assert_eq!(None, ch);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366314,"byte_end":366339,"line_start":719,"line_end":719,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(2, size);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366340,"byte_end":366364,"line_start":720,"line_end":720,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366365,"byte_end":366372,"line_start":721,"line_end":721,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366373,"byte_end":366376,"line_start":722,"line_end":722,"column_start":1,"column_end":4}},{"value":"/ This example shows how to iterate over all codepoints in UTF-8 encoded","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366377,"byte_end":366451,"line_start":723,"line_end":723,"column_start":1,"column_end":75}},{"value":"/ bytes in reverse, while replacing invalid UTF-8 sequences with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366452,"byte_end":366522,"line_start":724,"line_end":724,"column_start":1,"column_end":71}},{"value":"/ replacement codepoint:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366523,"byte_end":366549,"line_start":725,"line_end":725,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366550,"byte_end":366553,"line_start":726,"line_end":726,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366554,"byte_end":366561,"line_start":727,"line_end":727,"column_start":1,"column_end":8}},{"value":"/ use bstr::{B, decode_last_utf8};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366562,"byte_end":366598,"line_start":728,"line_end":728,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366599,"byte_end":366602,"line_start":729,"line_end":729,"column_start":1,"column_end":4}},{"value":"/ let mut bytes = B(b\"\\xE2\\x98\\x83\\xFF\\xF0\\x9D\\x9E\\x83\\xE2\\x98\\x61\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366603,"byte_end":366674,"line_start":730,"line_end":730,"column_start":1,"column_end":72}},{"value":"/ let mut chars = vec![];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366675,"byte_end":366702,"line_start":731,"line_end":731,"column_start":1,"column_end":28}},{"value":"/ while !bytes.is_empty() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366703,"byte_end":366732,"line_start":732,"line_end":732,"column_start":1,"column_end":30}},{"value":"/     let (ch, size) = decode_last_utf8(bytes);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366733,"byte_end":366782,"line_start":733,"line_end":733,"column_start":1,"column_end":50}},{"value":"/     bytes = &bytes[..bytes.len()-size];","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366783,"byte_end":366826,"line_start":734,"line_end":734,"column_start":1,"column_end":44}},{"value":"/     chars.push(ch.unwrap_or('\\u{FFFD}'));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366827,"byte_end":366872,"line_start":735,"line_end":735,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366873,"byte_end":366878,"line_start":736,"line_end":736,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(vec!['a', '\\u{FFFD}', '𝞃', '\\u{FFFD}', '☃'], chars);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366879,"byte_end":366951,"line_start":737,"line_end":737,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366952,"byte_end":366959,"line_start":738,"line_end":738,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":366960,"byte_end":366969,"line_start":739,"line_end":739,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33556,"byte_end":33560,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35970,"byte_end":35977,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/cow.rs","byte_start":49925,"byte_end":49933,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/cow.rs","byte_start":50038,"byte_end":50046,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/cow.rs","byte_start":51045,"byte_end":51048,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149265,"byte_end":149271,"line_start":2993,"line_end":2993,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152475,"byte_end":152488,"line_start":3078,"line_end":3078,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":155150,"byte_end":155154,"line_start":3156,"line_end":3156,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":155408,"byte_end":155412,"line_start":3164,"line_end":3164,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156485,"byte_end":156496,"line_start":3202,"line_end":3202,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156937,"byte_end":156948,"line_start":3219,"line_end":3219,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":339},{"krate":0,"index":340}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157757,"byte_end":157762,"line_start":3253,"line_end":3253,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":343}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158091,"byte_end":158096,"line_start":3263,"line_end":3263,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":349}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158355,"byte_end":158360,"line_start":3277,"line_end":3277,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158505,"byte_end":158510,"line_start":3284,"line_end":3284,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158624,"byte_end":158629,"line_start":3291,"line_end":3291,"column_start":34,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159000,"byte_end":159006,"line_start":3304,"line_end":3304,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159154,"byte_end":159160,"line_start":3310,"line_end":3310,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159856,"byte_end":159866,"line_start":3335,"line_end":3335,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":160049,"byte_end":160059,"line_start":3341,"line_end":3341,"column_start":47,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":374},{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":161367,"byte_end":161372,"line_start":3385,"line_end":3385,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":161574,"byte_end":161579,"line_start":3392,"line_end":3392,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":163209,"byte_end":163221,"line_start":3441,"line_end":3441,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":385}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":163451,"byte_end":163463,"line_start":3448,"line_end":3448,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164673,"byte_end":164679,"line_start":3492,"line_end":3492,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164921,"byte_end":164927,"line_start":3503,"line_end":3503,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":395},{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165653,"byte_end":165666,"line_start":3531,"line_end":3531,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":399}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165923,"byte_end":165936,"line_start":3542,"line_end":3542,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":402},{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166607,"byte_end":166612,"line_start":3568,"line_end":3568,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166747,"byte_end":166752,"line_start":3574,"line_end":3574,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167787,"byte_end":167806,"line_start":3607,"line_end":3607,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167939,"byte_end":167958,"line_start":3613,"line_end":3613,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":422},{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171801,"byte_end":171804,"line_start":85,"line_end":85,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172175,"byte_end":172178,"line_start":105,"line_end":105,"column_start":17,"column_end":20},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196880,"byte_end":196890,"line_start":914,"line_end":914,"column_start":34,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196921,"byte_end":196931,"line_start":916,"line_end":916,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":505},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197077,"byte_end":197087,"line_start":925,"line_end":925,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197220,"byte_end":197230,"line_start":932,"line_end":932,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198121,"byte_end":198134,"line_start":968,"line_end":968,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199873,"byte_end":199886,"line_start":1034,"line_end":1034,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":200001,"byte_end":200014,"line_start":1041,"line_end":1041,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":520}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":203646,"byte_end":203653,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":538}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":203827,"byte_end":203834,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204006,"byte_end":204013,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204172,"byte_end":204179,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":545}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204320,"byte_end":204327,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":547}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204450,"byte_end":204457,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204583,"byte_end":204590,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204725,"byte_end":204732,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204871,"byte_end":204878,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205000,"byte_end":205004,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205166,"byte_end":205173,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205293,"byte_end":205300,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205445,"byte_end":205452,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":565}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205591,"byte_end":205594,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205728,"byte_end":205735,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205889,"byte_end":205896,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206048,"byte_end":206055,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":575}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206210,"byte_end":206213,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206366,"byte_end":206373,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206578,"byte_end":206585,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206798,"byte_end":206805,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207099,"byte_end":207106,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207401,"byte_end":207408,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207698,"byte_end":207705,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207975,"byte_end":207982,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":208010,"byte_end":208017,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":208475,"byte_end":208482,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":208669,"byte_end":208676,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":209345,"byte_end":209349,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":211491,"byte_end":211495,"line_start":373,"line_end":373,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":212753,"byte_end":212757,"line_start":408,"line_end":408,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":212910,"byte_end":212914,"line_start":417,"line_end":417,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213058,"byte_end":213062,"line_start":424,"line_end":424,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213246,"byte_end":213250,"line_start":433,"line_end":433,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213431,"byte_end":213435,"line_start":442,"line_end":442,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":632},{"krate":0,"index":633}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213667,"byte_end":213671,"line_start":451,"line_end":451,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213914,"byte_end":213918,"line_start":460,"line_end":460,"column_start":48,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":638},{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214142,"byte_end":214146,"line_start":469,"line_end":469,"column_start":46,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214375,"byte_end":214379,"line_start":478,"line_end":478,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":644},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214598,"byte_end":214602,"line_start":487,"line_end":487,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214773,"byte_end":214777,"line_start":494,"line_end":494,"column_start":44,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":649}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214944,"byte_end":214948,"line_start":501,"line_end":501,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":651}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215176,"byte_end":215180,"line_start":508,"line_end":508,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215419,"byte_end":215423,"line_start":515,"line_end":515,"column_start":51,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215643,"byte_end":215647,"line_start":522,"line_end":522,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215872,"byte_end":215876,"line_start":529,"line_end":529,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":216079,"byte_end":216083,"line_start":536,"line_end":536,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":661}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":216471,"byte_end":216475,"line_start":557,"line_end":557,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217363,"byte_end":217366,"line_start":598,"line_end":598,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217548,"byte_end":217551,"line_start":606,"line_end":606,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":686}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217735,"byte_end":217738,"line_start":614,"line_end":614,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":688}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217881,"byte_end":217885,"line_start":621,"line_end":621,"column_start":17,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217919,"byte_end":217923,"line_start":623,"line_end":623,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":218724,"byte_end":218728,"line_start":650,"line_end":650,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":693}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":218920,"byte_end":218924,"line_start":657,"line_end":657,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":695}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":219706,"byte_end":219710,"line_start":690,"line_end":690,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":220203,"byte_end":220214,"line_start":708,"line_end":708,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":221252,"byte_end":221259,"line_start":749,"line_end":749,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":221512,"byte_end":221519,"line_start":759,"line_end":759,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":741}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":221745,"byte_end":221759,"line_start":767,"line_end":767,"column_start":40,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":757}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239587,"byte_end":239588,"line_start":344,"line_end":344,"column_start":37,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240594,"byte_end":240603,"line_start":377,"line_end":377,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":780},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":241014,"byte_end":241025,"line_start":393,"line_end":393,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/prefilter.rs","byte_start":250639,"byte_end":250653,"line_start":29,"line_end":29,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/prefilter.rs","byte_start":253773,"byte_end":253778,"line_start":116,"line_end":116,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":811},{"krate":0,"index":812},{"krate":0,"index":813},{"krate":0,"index":814},{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":267572,"byte_end":267578,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826},{"krate":0,"index":827},{"krate":0,"index":828},{"krate":0,"index":829},{"krate":0,"index":830},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":283320,"byte_end":283325,"line_start":491,"line_end":491,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":285893,"byte_end":285899,"line_start":557,"line_end":557,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":846},{"krate":0,"index":847}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":291042,"byte_end":291052,"line_start":685,"line_end":685,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309462,"byte_end":309471,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":885},{"krate":0,"index":886}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310214,"byte_end":310223,"line_start":64,"line_end":64,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":890}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310530,"byte_end":310539,"line_start":78,"line_end":78,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312632,"byte_end":312647,"line_start":126,"line_end":126,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":896},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313456,"byte_end":313471,"line_start":156,"line_end":156,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313909,"byte_end":313924,"line_start":172,"line_end":172,"column_start":34,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321277,"byte_end":321286,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322112,"byte_end":322121,"line_start":56,"line_end":56,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323755,"byte_end":323770,"line_start":98,"line_end":98,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":925},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324637,"byte_end":324652,"line_start":128,"line_end":128,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329226,"byte_end":329231,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330009,"byte_end":330014,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332033,"byte_end":332044,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332866,"byte_end":332877,"line_start":137,"line_end":137,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334290,"byte_end":334305,"line_start":175,"line_end":175,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":963},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335172,"byte_end":335187,"line_start":208,"line_end":208,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":967},{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337143,"byte_end":337164,"line_start":255,"line_end":255,"column_start":10,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":338072,"byte_end":338093,"line_start":288,"line_end":288,"column_start":23,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":975},{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345199,"byte_end":345204,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345956,"byte_end":345961,"line_start":118,"line_end":118,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":999},{"krate":0,"index":1000}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346247,"byte_end":346252,"line_start":132,"line_end":132,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347680,"byte_end":347691,"line_start":169,"line_end":169,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348488,"byte_end":348499,"line_start":199,"line_end":199,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348916,"byte_end":348927,"line_start":215,"line_end":215,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349325,"byte_end":349336,"line_start":228,"line_end":228,"column_start":42,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350598,"byte_end":350607,"line_start":268,"line_end":268,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":352037,"byte_end":352047,"line_start":309,"line_end":309,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353692,"byte_end":353702,"line_start":359,"line_end":359,"column_start":42,"column_end":52},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355543,"byte_end":355552,"line_start":415,"line_end":415,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356899,"byte_end":356908,"line_start":455,"line_end":455,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":357002,"byte_end":357011,"line_start":461,"line_end":461,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/lib.rs","byte_start":19387,"byte_end":19389,"line_start":420,"line_end":420,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":759}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstr.rs","byte_start":33556,"byte_end":33560,"line_start":35,"line_end":35,"column_start":6,"column_end":10},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1057},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/bstring.rs","byte_start":35970,"byte_end":35977,"line_start":44,"line_end":44,"column_start":6,"column_end":13},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/cow.rs","byte_start":49925,"byte_end":49933,"line_start":22,"line_end":22,"column_start":25,"column_end":33},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1069},"to":{"krate":2,"index":2142}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/cow.rs","byte_start":50038,"byte_end":50046,"line_start":30,"line_end":30,"column_start":10,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1069},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/cow.rs","byte_start":51045,"byte_end":51048,"line_start":61,"line_end":61,"column_start":10,"column_end":13},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":54280,"byte_end":54286,"line_start":93,"line_end":93,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":0,"index":184},"to":{"krate":0,"index":186}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":149265,"byte_end":149271,"line_start":2993,"line_end":2993,"column_start":10,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1089},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":152475,"byte_end":152488,"line_start":3078,"line_end":3078,"column_start":10,"column_end":23},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1098},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":155150,"byte_end":155154,"line_start":3156,"line_end":3156,"column_start":10,"column_end":14},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":155408,"byte_end":155412,"line_start":3164,"line_end":3164,"column_start":23,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156485,"byte_end":156496,"line_start":3202,"line_end":3202,"column_start":10,"column_end":21},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":156937,"byte_end":156948,"line_start":3219,"line_end":3219,"column_start":23,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1116},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":157757,"byte_end":157762,"line_start":3253,"line_end":3253,"column_start":10,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158091,"byte_end":158096,"line_start":3263,"line_end":3263,"column_start":23,"column_end":28},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158355,"byte_end":158360,"line_start":3277,"line_end":3277,"column_start":34,"column_end":39},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158505,"byte_end":158510,"line_start":3284,"line_end":3284,"column_start":32,"column_end":37},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":4994}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":158624,"byte_end":158629,"line_start":3291,"line_end":3291,"column_start":34,"column_end":39},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1125},"to":{"krate":2,"index":5301}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159000,"byte_end":159006,"line_start":3304,"line_end":3304,"column_start":10,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159154,"byte_end":159160,"line_start":3310,"line_end":3310,"column_start":23,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1134},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":159856,"byte_end":159866,"line_start":3335,"line_end":3335,"column_start":34,"column_end":44},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1140},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":160049,"byte_end":160059,"line_start":3341,"line_end":3341,"column_start":47,"column_end":57},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1140},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":161367,"byte_end":161372,"line_start":3385,"line_end":3385,"column_start":10,"column_end":15},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":161574,"byte_end":161579,"line_start":3392,"line_end":3392,"column_start":23,"column_end":28},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1150},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":163209,"byte_end":163221,"line_start":3441,"line_end":3441,"column_start":10,"column_end":22},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":163451,"byte_end":163463,"line_start":3448,"line_end":3448,"column_start":23,"column_end":35},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164673,"byte_end":164679,"line_start":3492,"line_end":3492,"column_start":10,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1166},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":164921,"byte_end":164927,"line_start":3503,"line_end":3503,"column_start":23,"column_end":29},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1166},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165653,"byte_end":165666,"line_start":3531,"line_end":3531,"column_start":10,"column_end":23},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1174},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":165923,"byte_end":165936,"line_start":3542,"line_end":3542,"column_start":23,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1174},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166607,"byte_end":166612,"line_start":3568,"line_end":3568,"column_start":10,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":166747,"byte_end":166752,"line_start":3574,"line_end":3574,"column_start":23,"column_end":28},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":404},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167787,"byte_end":167806,"line_start":3607,"line_end":3607,"column_start":10,"column_end":29},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_slice.rs","byte_start":167939,"byte_end":167958,"line_start":3613,"line_end":3613,"column_start":23,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":171801,"byte_end":171804,"line_start":85,"line_end":85,"column_start":18,"column_end":21},"kind":{"Impl":{"id":32}},"from":{"krate":5,"index":4366},"to":{"krate":0,"index":456}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172175,"byte_end":172178,"line_start":105,"line_end":105,"column_start":17,"column_end":20},"kind":{"Impl":{"id":33}},"from":{"krate":5,"index":4366},"to":{"krate":0,"index":454}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":172584,"byte_end":172590,"line_start":119,"line_end":119,"column_start":20,"column_end":26},"kind":"SuperTrait","from":{"krate":0,"index":454},"to":{"krate":0,"index":456}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196880,"byte_end":196890,"line_start":914,"line_end":914,"column_start":34,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1182},"to":{"krate":2,"index":5301}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":196921,"byte_end":196931,"line_start":916,"line_end":916,"column_start":23,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1182},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197077,"byte_end":197087,"line_start":925,"line_end":925,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1182},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":197220,"byte_end":197230,"line_start":932,"line_end":932,"column_start":32,"column_end":42},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1182},"to":{"krate":2,"index":4994}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":198121,"byte_end":198134,"line_start":968,"line_end":968,"column_start":6,"column_end":19},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":199873,"byte_end":199886,"line_start":1034,"line_end":1034,"column_start":23,"column_end":36},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1188},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/ext_vec.rs","byte_start":200001,"byte_end":200014,"line_start":1041,"line_end":1041,"column_start":23,"column_end":36},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1188},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":203646,"byte_end":203653,"line_start":74,"line_end":74,"column_start":27,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":203827,"byte_end":203834,"line_start":81,"line_end":81,"column_start":25,"column_end":32},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204006,"byte_end":204013,"line_start":88,"line_end":88,"column_start":25,"column_end":32},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":2142}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204172,"byte_end":204179,"line_start":97,"line_end":97,"column_start":28,"column_end":35},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":2155}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204320,"byte_end":204327,"line_start":104,"line_end":104,"column_start":26,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1880}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204450,"byte_end":204457,"line_start":111,"line_end":111,"column_start":26,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1880}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204583,"byte_end":204590,"line_start":118,"line_end":118,"column_start":26,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204725,"byte_end":204732,"line_start":125,"line_end":125,"column_start":26,"column_end":33},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":204871,"byte_end":204878,"line_start":132,"line_end":132,"column_start":27,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1647}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205000,"byte_end":205004,"line_start":139,"line_end":139,"column_start":22,"column_end":26},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1057},"to":{"krate":5,"index":330}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205166,"byte_end":205173,"line_start":148,"line_end":148,"column_start":22,"column_end":29},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205293,"byte_end":205300,"line_start":154,"line_end":154,"column_start":33,"column_end":40},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205445,"byte_end":205452,"line_start":161,"line_end":161,"column_start":28,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205591,"byte_end":205594,"line_start":168,"line_end":168,"column_start":28,"column_end":31},"kind":{"Impl":{"id":54}},"from":{"krate":5,"index":4366},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205728,"byte_end":205735,"line_start":175,"line_end":175,"column_start":32,"column_end":39},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":205889,"byte_end":205896,"line_start":182,"line_end":182,"column_start":27,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206048,"byte_end":206055,"line_start":189,"line_end":189,"column_start":33,"column_end":40},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206210,"byte_end":206213,"line_start":196,"line_end":196,"column_start":32,"column_end":35},"kind":{"Impl":{"id":58}},"from":{"krate":5,"index":339},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206366,"byte_end":206373,"line_start":203,"line_end":203,"column_start":33,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206578,"byte_end":206585,"line_start":210,"line_end":210,"column_start":31,"column_end":38},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":206798,"byte_end":206805,"line_start":217,"line_end":217,"column_start":40,"column_end":47},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207099,"byte_end":207106,"line_start":228,"line_end":228,"column_start":41,"column_end":48},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207401,"byte_end":207408,"line_start":239,"line_end":239,"column_start":41,"column_end":48},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207698,"byte_end":207705,"line_start":250,"line_end":250,"column_start":36,"column_end":43},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":207975,"byte_end":207982,"line_start":261,"line_end":261,"column_start":17,"column_end":24},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1702}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":208010,"byte_end":208017,"line_start":263,"line_end":263,"column_start":24,"column_end":31},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":208475,"byte_end":208482,"line_start":279,"line_end":279,"column_start":25,"column_end":32},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1734}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":208669,"byte_end":208676,"line_start":286,"line_end":286,"column_start":18,"column_end":25},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1062},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":209345,"byte_end":209349,"line_start":314,"line_end":314,"column_start":27,"column_end":31},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":211491,"byte_end":211495,"line_start":373,"line_end":373,"column_start":25,"column_end":29},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":212753,"byte_end":212757,"line_start":408,"line_end":408,"column_start":25,"column_end":29},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2142}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":212910,"byte_end":212914,"line_start":417,"line_end":417,"column_start":28,"column_end":32},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2155}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213058,"byte_end":213062,"line_start":424,"line_end":424,"column_start":32,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213246,"byte_end":213250,"line_start":433,"line_end":433,"column_start":41,"column_end":45},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213431,"byte_end":213435,"line_start":442,"line_end":442,"column_start":44,"column_end":48},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213667,"byte_end":213671,"line_start":451,"line_end":451,"column_start":53,"column_end":57},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":213914,"byte_end":213918,"line_start":460,"line_end":460,"column_start":48,"column_end":52},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214142,"byte_end":214146,"line_start":469,"line_end":469,"column_start":46,"column_end":50},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214375,"byte_end":214379,"line_start":478,"line_end":478,"column_start":55,"column_end":59},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214598,"byte_end":214602,"line_start":487,"line_end":487,"column_start":35,"column_end":39},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214773,"byte_end":214777,"line_start":494,"line_end":494,"column_start":44,"column_end":48},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":214944,"byte_end":214948,"line_start":501,"line_end":501,"column_start":47,"column_end":51},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215176,"byte_end":215180,"line_start":508,"line_end":508,"column_start":56,"column_end":60},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215419,"byte_end":215423,"line_start":515,"line_end":515,"column_start":51,"column_end":55},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215643,"byte_end":215647,"line_start":522,"line_end":522,"column_start":49,"column_end":53},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":215872,"byte_end":215876,"line_start":529,"line_end":529,"column_start":58,"column_end":62},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":2227}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":216079,"byte_end":216083,"line_start":536,"line_end":536,"column_start":26,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1880}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":216471,"byte_end":216475,"line_start":557,"line_end":557,"column_start":26,"column_end":30},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1883}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217363,"byte_end":217366,"line_start":598,"line_end":598,"column_start":33,"column_end":36},"kind":{"Impl":{"id":114}},"from":{"krate":5,"index":339},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217548,"byte_end":217551,"line_start":606,"line_end":606,"column_start":30,"column_end":33},"kind":{"Impl":{"id":115}},"from":{"krate":5,"index":84},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217735,"byte_end":217738,"line_start":614,"line_end":614,"column_start":30,"column_end":33},"kind":{"Impl":{"id":116}},"from":{"krate":5,"index":84},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217881,"byte_end":217885,"line_start":621,"line_end":621,"column_start":17,"column_end":21},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1702}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":217919,"byte_end":217923,"line_start":623,"line_end":623,"column_start":30,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":218724,"byte_end":218728,"line_start":650,"line_end":650,"column_start":25,"column_end":29},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1734}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":218920,"byte_end":218924,"line_start":657,"line_end":657,"column_start":18,"column_end":22},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1057},"to":{"krate":2,"index":1723}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":219706,"byte_end":219710,"line_start":690,"line_end":690,"column_start":24,"column_end":28},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1057},"to":{"krate":22,"index":1679}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":220203,"byte_end":220214,"line_start":708,"line_end":708,"column_start":40,"column_end":51},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":714},"to":{"krate":22,"index":1275}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":221252,"byte_end":221259,"line_start":749,"line_end":749,"column_start":24,"column_end":31},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1062},"to":{"krate":22,"index":1679}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":221512,"byte_end":221519,"line_start":759,"line_end":759,"column_start":36,"column_end":43},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1062},"to":{"krate":22,"index":1191}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/impls.rs","byte_start":221745,"byte_end":221759,"line_start":767,"line_end":767,"column_start":40,"column_end":54},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":743},"to":{"krate":22,"index":1275}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":228582,"byte_end":228589,"line_start":18,"line_end":18,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":3076},"to":{"krate":0,"index":763}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":239587,"byte_end":239588,"line_start":344,"line_end":344,"column_start":37,"column_end":38},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":777},"to":{"krate":0,"index":763}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":240594,"byte_end":240603,"line_start":377,"line_end":377,"column_start":35,"column_end":44},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1480},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/io.rs","byte_start":241014,"byte_end":241025,"line_start":393,"line_end":393,"column_start":35,"column_end":46},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1486},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/prefilter.rs","byte_start":250639,"byte_end":250653,"line_start":29,"line_end":29,"column_start":6,"column_end":20},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1493},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/prefilter.rs","byte_start":253773,"byte_end":253778,"line_start":116,"line_end":116,"column_start":6,"column_end":11},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":267572,"byte_end":267578,"line_start":51,"line_end":51,"column_start":10,"column_end":16},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1513},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":283320,"byte_end":283325,"line_start":491,"line_end":491,"column_start":6,"column_end":11},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1525},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":285893,"byte_end":285899,"line_start":557,"line_end":557,"column_start":6,"column_end":12},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/search/twoway.rs","byte_start":291042,"byte_end":291052,"line_start":685,"line_end":685,"column_start":6,"column_end":16},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1539},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":309462,"byte_end":309471,"line_start":34,"line_end":34,"column_start":10,"column_end":19},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310214,"byte_end":310223,"line_start":64,"line_end":64,"column_start":23,"column_end":32},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1697},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":310530,"byte_end":310539,"line_start":78,"line_end":78,"column_start":34,"column_end":43},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1697},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":312632,"byte_end":312647,"line_start":126,"line_end":126,"column_start":10,"column_end":25},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1706},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313456,"byte_end":313471,"line_start":156,"line_end":156,"column_start":23,"column_end":38},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1706},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/grapheme.rs","byte_start":313909,"byte_end":313924,"line_start":172,"line_end":172,"column_start":34,"column_end":49},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1706},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":321277,"byte_end":321286,"line_start":26,"line_end":26,"column_start":10,"column_end":19},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":322112,"byte_end":322121,"line_start":56,"line_end":56,"column_start":23,"column_end":32},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1717},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":323755,"byte_end":323770,"line_start":98,"line_end":98,"column_start":10,"column_end":25},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/sentence.rs","byte_start":324637,"byte_end":324652,"line_start":128,"line_end":128,"column_start":23,"column_end":38},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":329226,"byte_end":329231,"line_start":31,"line_end":31,"column_start":10,"column_end":15},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":330009,"byte_end":330014,"line_start":61,"line_end":61,"column_start":23,"column_end":28},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1736},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332033,"byte_end":332044,"line_start":106,"line_end":106,"column_start":10,"column_end":21},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":332866,"byte_end":332877,"line_start":137,"line_end":137,"column_start":23,"column_end":34},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1746},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":334290,"byte_end":334305,"line_start":175,"line_end":175,"column_start":10,"column_end":25},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":335172,"byte_end":335187,"line_start":208,"line_end":208,"column_start":23,"column_end":38},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1756},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":337143,"byte_end":337164,"line_start":255,"line_end":255,"column_start":10,"column_end":31},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/unicode/word.rs","byte_start":338072,"byte_end":338093,"line_start":288,"line_end":288,"column_start":23,"column_end":44},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1765},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345199,"byte_end":345204,"line_start":88,"line_end":88,"column_start":10,"column_end":15},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":345956,"byte_end":345961,"line_start":118,"line_end":118,"column_start":23,"column_end":28},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1775},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":346247,"byte_end":346252,"line_start":132,"line_end":132,"column_start":34,"column_end":39},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1775},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":347680,"byte_end":347691,"line_start":169,"line_end":169,"column_start":10,"column_end":21},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348488,"byte_end":348499,"line_start":199,"line_end":199,"column_start":23,"column_end":34},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1784},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":348916,"byte_end":348927,"line_start":215,"line_end":215,"column_start":34,"column_end":45},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1784},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":349325,"byte_end":349336,"line_start":228,"line_end":228,"column_start":42,"column_end":53},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1784},"to":{"krate":2,"index":5301}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":350598,"byte_end":350607,"line_start":268,"line_end":268,"column_start":10,"column_end":19},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1017},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":352037,"byte_end":352047,"line_start":309,"line_end":309,"column_start":23,"column_end":33},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":353692,"byte_end":353702,"line_start":359,"line_end":359,"column_start":42,"column_end":52},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1795},"to":{"krate":2,"index":5301}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":355543,"byte_end":355552,"line_start":415,"line_end":415,"column_start":6,"column_end":15},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1804},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":356899,"byte_end":356908,"line_start":455,"line_end":455,"column_start":23,"column_end":32},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1804},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/bstr-0.2.14/src/utf8.rs","byte_start":357002,"byte_end":357011,"line_start":461,"line_end":461,"column_start":23,"column_end":32},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1804},"to":{"krate":2,"index":6320}}]}