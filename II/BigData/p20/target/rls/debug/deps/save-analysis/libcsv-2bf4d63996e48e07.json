{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5","program":"/home/adrian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","csv","--edition=2018","/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=2bf4d63996e48e07","-C","extra-filename=-2bf4d63996e48e07","--out-dir","/home/adrian/magister/II/BigData/p20/target/rls/debug/deps","-L","dependency=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps","--extern","bstr=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libbstr-403ddcbdcee9a0ee.rmeta","--extern","csv_core=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libcsv_core-280d4c3dd460a948.rmeta","--extern","itoa=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libitoa-3a3289f95857f6d4.rmeta","--extern","ryu=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libryu-19e25bf886c07401.rmeta","--extern","serde=/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libserde-d9b7fd8803bade35.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/adrian/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/adrian/magister/II/BigData/p20/target/rls/debug/deps/libcsv-2bf4d63996e48e07.rmeta"},"prelude":{"crate_id":{"name":"csv","disambiguator":[17124770320399353586,14433901650470287239]},"crate_root":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src","external_crates":[{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[7603043973503281951,6245179856538753269]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[13741360846946026623,2672266499591153283]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4729845745352067521,14981637654352572000]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[9324331421111590993,11905740212167270908]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[11392341838745785002,13287300438441731562]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8694337109875809164,2250367951223185901]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[10935849247287619708,10935329660555626336]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[5583458701817410803,1770096645244614441]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[4926505318506753650,8786990194761766393]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15262570485262297613,5690312430589388023]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[16900335184017598038,9051488994794742296]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[528960645316233979,8037674519295179684]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[4483237274112351560,17959943558012528736]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[384772052184402859,1578385820564656749]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[12301751291607961788,16569514459755551136]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[4223616801544016660,17489963460572122123]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3882963855561891520,1067502799155491607]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","num":18,"id":{"name":"serde","disambiguator":[13241015039447953903,9903462571130677414]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","num":19,"id":{"name":"bstr","disambiguator":[4187105485472174186,10070461049503586321]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","num":20,"id":{"name":"lazy_static","disambiguator":[14168987126381539521,8506224783846070473]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","num":21,"id":{"name":"memchr","disambiguator":[470664262734134257,2472908657699944231]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","num":22,"id":{"name":"regex_automata","disambiguator":[5775181059984253882,15424220468922697545]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","num":23,"id":{"name":"byteorder","disambiguator":[13914746223120247819,7461522404633341420]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","num":24,"id":{"name":"csv_core","disambiguator":[6334405270282212223,6672027854570793448]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/serializer.rs","num":25,"id":{"name":"itoa","disambiguator":[7869044783533659427,1758748185164493276]}},{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/serializer.rs","num":26,"id":{"name":"ryu","disambiguator":[17272476419793833865,9382145294703470074]}}],"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":0,"byte_end":10434,"line_start":1,"line_end":359,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1107},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3806,"byte_end":3816,"line_start":156,"line_end":156,"column_start":30,"column_end":40},"alias_span":null,"name":"ByteRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1159},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3818,"byte_end":3832,"line_start":156,"line_end":156,"column_start":42,"column_end":56},"alias_span":null,"name":"ByteRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1130},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3834,"byte_end":3842,"line_start":156,"line_end":156,"column_start":58,"column_end":66},"alias_span":null,"name":"Position","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1199},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3875,"byte_end":3891,"line_start":157,"line_end":157,"column_start":31,"column_end":47},"alias_span":null,"name":"DeserializeError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1213},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3893,"byte_end":3913,"line_start":157,"line_end":157,"column_start":49,"column_end":69},"alias_span":null,"name":"DeserializeErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1251},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3944,"byte_end":3949,"line_start":159,"line_end":159,"column_start":5,"column_end":10},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1256},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3951,"byte_end":3960,"line_start":159,"line_end":159,"column_start":12,"column_end":21},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1279},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3962,"byte_end":3975,"line_start":159,"line_end":159,"column_start":23,"column_end":36},"alias_span":null,"name":"FromUtf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":431},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3977,"byte_end":3991,"line_start":159,"line_end":159,"column_start":38,"column_end":52},"alias_span":null,"name":"IntoInnerError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":398},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3993,"byte_end":3999,"line_start":159,"line_end":159,"column_start":54,"column_end":60},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1293},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4001,"byte_end":4010,"line_start":159,"line_end":159,"column_start":62,"column_end":71},"alias_span":null,"name":"Utf8Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":601},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4044,"byte_end":4063,"line_start":162,"line_end":162,"column_start":5,"column_end":24},"alias_span":null,"name":"ByteRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":615},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4065,"byte_end":4080,"line_start":162,"line_end":162,"column_start":26,"column_end":41},"alias_span":null,"name":"ByteRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4082,"byte_end":4108,"line_start":162,"line_end":162,"column_start":43,"column_end":69},"alias_span":null,"name":"DeserializeRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":550},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4114,"byte_end":4136,"line_start":163,"line_end":163,"column_start":5,"column_end":27},"alias_span":null,"name":"DeserializeRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1315},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4138,"byte_end":4144,"line_start":163,"line_end":163,"column_start":29,"column_end":35},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4146,"byte_end":4159,"line_start":163,"line_end":163,"column_start":37,"column_end":50},"alias_span":null,"name":"ReaderBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":571},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4161,"byte_end":4182,"line_start":163,"line_end":163,"column_start":52,"column_end":73},"alias_span":null,"name":"StringRecordsIntoIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":585},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4188,"byte_end":4205,"line_start":164,"line_end":164,"column_start":5,"column_end":22},"alias_span":null,"name":"StringRecordsIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1362},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4241,"byte_end":4253,"line_start":166,"line_end":166,"column_start":32,"column_end":44},"alias_span":null,"name":"StringRecord","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1370},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4255,"byte_end":4271,"line_start":166,"line_end":166,"column_start":46,"column_end":62},"alias_span":null,"name":"StringRecordIter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1384},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4298,"byte_end":4304,"line_start":167,"line_end":167,"column_start":25,"column_end":31},"alias_span":null,"name":"Writer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1377},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4306,"byte_end":4319,"line_start":167,"line_end":167,"column_start":33,"column_end":46},"alias_span":null,"name":"WriterBuilder","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":0,"byte_end":10434,"line_start":1,"line_end":359,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":389},{"krate":0,"index":449},{"krate":0,"index":631},{"krate":0,"index":916},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1417},{"krate":0,"index":1431},{"krate":0,"index":1430},{"krate":0,"index":1428},{"krate":0,"index":1089},{"krate":0,"index":1091},{"krate":0,"index":1433},{"krate":0,"index":1444},{"krate":0,"index":1443},{"krate":0,"index":1441},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1446},{"krate":0,"index":1463},{"krate":0,"index":1462},{"krate":0,"index":1460},{"krate":0,"index":1457},{"krate":0,"index":1458},{"krate":0,"index":1097},{"krate":0,"index":1100},{"krate":0,"index":1102}],"decl_id":null,"docs":"The `csv` crate provides a fast and flexible CSV reader and writer, with\nsupport for Serde.","sig":null,"attributes":[{"value":"*\nThe `csv` crate provides a fast and flexible CSV reader and writer, with\nsupport for Serde.\n\nThe [tutorial](tutorial/index.html) is a good place to start if you're new to\nRust.\n\nThe [cookbook](cookbook/index.html) will give you a variety of complete Rust\nprograms that do CSV reading and writing.\n\n# Brief overview\n\n**If you're new to Rust**, you might find the\n[tutorial](tutorial/index.html)\nto be a good place to start.\n\nThe primary types in this crate are\n[`Reader`](struct.Reader.html)\nand\n[`Writer`](struct.Writer.html),\nfor reading and writing CSV data respectively.\nCorrespondingly, to support CSV data with custom field or record delimiters\n(among many other things), you should use either a\n[`ReaderBuilder`](struct.ReaderBuilder.html)\nor a\n[`WriterBuilder`](struct.WriterBuilder.html),\ndepending on whether you're reading or writing CSV data.\n\nUnless you're using Serde, the standard CSV record types are\n[`StringRecord`](struct.StringRecord.html)\nand\n[`ByteRecord`](struct.ByteRecord.html).\n`StringRecord` should be used when you know your data to be valid UTF-8.\nFor data that may be invalid UTF-8, `ByteRecord` is suitable.\n\nFinally, the set of errors is described by the\n[`Error`](struct.Error.html)\ntype.\n\nThe rest of the types in this crate mostly correspond to more detailed errors,\nposition information, configuration knobs or iterator types.\n\n# Setup\n\nAdd this to your `Cargo.toml`:\n\n```toml\n[dependencies]\ncsv = \"1.1\"\n```\n\nIf you want to use Serde's custom derive functionality on your custom structs,\nthen add this to your `[dependencies]` section of `Cargo.toml`:\n\n```toml\n[dependencies]\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\n# Example\n\nThis example shows how to read CSV data from stdin and print each record to\nstdout.\n\nThere are more examples in the [cookbook](cookbook/index.html).\n\n```no_run\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    // Build the CSV reader and iterate over each record.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // The iterator yields Result<StringRecord, Error>, so we check the\n        // error here.\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-basic < examples/data/smallpop.csv\n```\n\n# Example with Serde\n\nThis example shows how to read CSV data from stdin into your own custom struct.\nBy default, the member names of the struct are matched with the values in the\nheader record of your CSV data.\n\n```no_run\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        // Notice that we need to provide a type hint for automatic\n        // deserialization.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-serde < examples/data/smallpop.csv\n```\n\n*/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":0,"byte_end":3692,"line_start":1,"line_end":148,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":3694,"byte_end":3716,"line_start":150,"line_end":150,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":1107},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11840,"byte_end":11850,"line_start":34,"line_end":34,"column_start":12,"column_end":22},"name":"ByteRecord","qualname":"::byte_record::ByteRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as raw bytes.","sig":null,"attributes":[{"value":"/ A single CSV record stored as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":10747,"byte_end":10791,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":10792,"byte_end":10795,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A byte record permits reading or writing CSV rows that are not UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":10796,"byte_end":10869,"line_start":16,"line_end":16,"column_start":1,"column_end":74}},{"value":"/ In general, you should prefer using a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":10870,"byte_end":10911,"line_start":17,"line_end":17,"column_start":1,"column_end":42}},{"value":"/ [`StringRecord`](struct.StringRecord.html)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":10912,"byte_end":10958,"line_start":18,"line_end":18,"column_start":1,"column_end":47}},{"value":"/ since it is more ergonomic, but a `ByteRecord` is provided in case you need","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":10959,"byte_end":11038,"line_start":19,"line_end":19,"column_start":1,"column_end":80}},{"value":"/ it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11039,"byte_end":11046,"line_start":20,"line_end":20,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11047,"byte_end":11050,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ If you are using the Serde (de)serialization APIs, then you probably never","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11051,"byte_end":11129,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ need to interact with a `ByteRecord` or a `StringRecord`. However, there","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11130,"byte_end":11206,"line_start":23,"line_end":23,"column_start":1,"column_end":77}},{"value":"/ are some circumstances in which you might need to use a raw record type","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11207,"byte_end":11282,"line_start":24,"line_end":24,"column_start":1,"column_end":76}},{"value":"/ while still using Serde. For example, if you need to deserialize possibly","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11283,"byte_end":11360,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ invalid UTF-8 fields, then you'll need to first read your record into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11361,"byte_end":11436,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ `ByteRecord`, and then use `ByteRecord::deserialize` to run Serde. Another","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11437,"byte_end":11515,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ reason for using the raw record deserialization APIs is if you're using","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11516,"byte_end":11591,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ Serde to read into borrowed data such as a `&'a str` or a `&'a [u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11592,"byte_end":11665,"line_start":29,"line_end":29,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11666,"byte_end":11669,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Two `ByteRecord`s are compared on the basis of their field data. Any","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11670,"byte_end":11742,"line_start":31,"line_end":31,"column_start":1,"column_end":73}},{"value":"/ position information associated with the records is ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11743,"byte_end":11807,"line_start":32,"line_end":32,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14308,"byte_end":14311,"line_start":126,"line_end":126,"column_start":12,"column_end":15},"name":"new","qualname":"<ByteRecord>::new","value":"pub fn new() -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord`.","sig":null,"attributes":[{"value":"/ Create a new empty `ByteRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13675,"byte_end":13711,"line_start":103,"line_end":103,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13716,"byte_end":13719,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ Note that you may find the `ByteRecord::from` constructor more","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13724,"byte_end":13790,"line_start":105,"line_end":105,"column_start":5,"column_end":71}},{"value":"/ convenient, which is provided by an impl on the `From` trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13795,"byte_end":13860,"line_start":106,"line_end":106,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13865,"byte_end":13868,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ # Example: create an empty record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13873,"byte_end":13910,"line_start":108,"line_end":108,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13915,"byte_end":13918,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13923,"byte_end":13930,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13935,"byte_end":13959,"line_start":111,"line_end":111,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13964,"byte_end":13967,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13972,"byte_end":14007,"line_start":113,"line_end":113,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14012,"byte_end":14044,"line_start":114,"line_end":114,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14049,"byte_end":14056,"line_start":115,"line_end":115,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14061,"byte_end":14064,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Example: initialize a record from a `Vec`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14069,"byte_end":14116,"line_start":117,"line_end":117,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14121,"byte_end":14124,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14129,"byte_end":14136,"line_start":119,"line_end":119,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14141,"byte_end":14165,"line_start":120,"line_end":120,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14170,"byte_end":14173,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14178,"byte_end":14233,"line_start":122,"line_end":122,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14238,"byte_end":14270,"line_start":123,"line_end":123,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14275,"byte_end":14282,"line_start":124,"line_end":124,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14287,"byte_end":14296,"line_start":125,"line_end":125,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14660,"byte_end":14673,"line_start":136,"line_end":136,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<ByteRecord>::with_capacity","value":"pub fn with_capacity(usize, usize) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `ByteRecord` with the given capacity settings.","sig":null,"attributes":[{"value":"/ Create a new empty `ByteRecord` with the given capacity settings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14381,"byte_end":14450,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14455,"byte_end":14458,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ `buffer` refers to the capacity of the buffer used to store the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14463,"byte_end":14530,"line_start":132,"line_end":132,"column_start":5,"column_end":72}},{"value":"/ actual row contents. `fields` refers to the number of fields one","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14535,"byte_end":14603,"line_start":133,"line_end":133,"column_start":5,"column_end":73}},{"value":"/ might expect to store.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14608,"byte_end":14634,"line_start":134,"line_end":134,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14639,"byte_end":14648,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17864,"byte_end":17875,"line_start":229,"line_end":229,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<ByteRecord>::deserialize","value":"pub fn deserialize<'de, D: Deserialize>(&'de Self, Option<&'de ByteRecord>)\n-> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[{"value":"/ Deserialize this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14900,"byte_end":14928,"line_start":144,"line_end":144,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14933,"byte_end":14936,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ The `D` type parameter refers to the type that this record should be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":14941,"byte_end":15013,"line_start":146,"line_end":146,"column_start":5,"column_end":77}},{"value":"/ deserialized into. The `'de` lifetime refers to the lifetime of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15018,"byte_end":15089,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ `ByteRecord`. The `'de` lifetime permits deserializing into structs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15094,"byte_end":15165,"line_start":148,"line_end":148,"column_start":5,"column_end":76}},{"value":"/ that borrow field data from this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15170,"byte_end":15214,"line_start":149,"line_end":149,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15219,"byte_end":15222,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ An optional `headers` parameter permits deserializing into a struct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15227,"byte_end":15298,"line_start":151,"line_end":151,"column_start":5,"column_end":76}},{"value":"/ based on its field names (corresponding to header values) rather than","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15303,"byte_end":15376,"line_start":152,"line_end":152,"column_start":5,"column_end":78}},{"value":"/ the order in which the fields are defined.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15381,"byte_end":15427,"line_start":153,"line_end":153,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15432,"byte_end":15435,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ # Example: without headers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15440,"byte_end":15470,"line_start":155,"line_end":155,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15475,"byte_end":15478,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ This shows how to deserialize a single row into a struct based on the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15483,"byte_end":15556,"line_start":157,"line_end":157,"column_start":5,"column_end":78}},{"value":"/ order in which fields occur. This example also shows how to borrow","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15561,"byte_end":15631,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/ fields from the `ByteRecord`, which results in zero allocation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15636,"byte_end":15702,"line_start":159,"line_end":159,"column_start":5,"column_end":71}},{"value":"/ deserialization.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15707,"byte_end":15727,"line_start":160,"line_end":160,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15732,"byte_end":15735,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15740,"byte_end":15747,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15752,"byte_end":15778,"line_start":163,"line_end":163,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15783,"byte_end":15786,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15791,"byte_end":15815,"line_start":165,"line_end":165,"column_start":5,"column_end":29}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15820,"byte_end":15847,"line_start":166,"line_end":166,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15852,"byte_end":15855,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15860,"byte_end":15886,"line_start":168,"line_end":168,"column_start":5,"column_end":31}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15891,"byte_end":15911,"line_start":169,"line_end":169,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15916,"byte_end":15938,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15943,"byte_end":15968,"line_start":171,"line_end":171,"column_start":5,"column_end":30}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":15973,"byte_end":15997,"line_start":172,"line_end":172,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16002,"byte_end":16007,"line_start":173,"line_end":173,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16012,"byte_end":16015,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16020,"byte_end":16058,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16063,"byte_end":16111,"line_start":176,"line_end":176,"column_start":5,"column_end":53}},{"value":"/     let record = ByteRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16116,"byte_end":16159,"line_start":177,"line_end":177,"column_start":5,"column_end":48}},{"value":"/         \"Boston\", \"United States\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16164,"byte_end":16213,"line_start":178,"line_end":178,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16218,"byte_end":16229,"line_start":179,"line_end":179,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16234,"byte_end":16237,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(None)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16242,"byte_end":16291,"line_start":181,"line_end":181,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16296,"byte_end":16335,"line_start":182,"line_end":182,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16340,"byte_end":16389,"line_start":183,"line_end":183,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16394,"byte_end":16438,"line_start":184,"line_end":184,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16443,"byte_end":16457,"line_start":185,"line_end":185,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16462,"byte_end":16467,"line_start":186,"line_end":186,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16472,"byte_end":16479,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16484,"byte_end":16487,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Example: with headers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16492,"byte_end":16519,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16524,"byte_end":16527,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This example is like the previous one, but shows how to deserialize","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16532,"byte_end":16603,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ into a struct based on the struct's field names. For this to work,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16608,"byte_end":16678,"line_start":192,"line_end":192,"column_start":5,"column_end":75}},{"value":"/ you must provide a header row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16683,"byte_end":16717,"line_start":193,"line_end":193,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16722,"byte_end":16725,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ This example also shows that you can deserialize into owned data","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16730,"byte_end":16798,"line_start":195,"line_end":195,"column_start":5,"column_end":73}},{"value":"/ types (e.g., `String`) instead of borrowed data types (e.g., `&str`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16803,"byte_end":16876,"line_start":196,"line_end":196,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16881,"byte_end":16884,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16889,"byte_end":16896,"line_start":198,"line_end":198,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16901,"byte_end":16927,"line_start":199,"line_end":199,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16932,"byte_end":16935,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16940,"byte_end":16964,"line_start":201,"line_end":201,"column_start":5,"column_end":29}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":16969,"byte_end":16996,"line_start":202,"line_end":202,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17001,"byte_end":17004,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17009,"byte_end":17035,"line_start":204,"line_end":204,"column_start":5,"column_end":31}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17040,"byte_end":17056,"line_start":205,"line_end":205,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17061,"byte_end":17082,"line_start":206,"line_end":206,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17087,"byte_end":17111,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17116,"byte_end":17140,"line_start":208,"line_end":208,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17145,"byte_end":17150,"line_start":209,"line_end":209,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17155,"byte_end":17158,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17163,"byte_end":17201,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17206,"byte_end":17254,"line_start":212,"line_end":212,"column_start":5,"column_end":53}},{"value":"/     // Notice that the fields are not in the same order","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17259,"byte_end":17318,"line_start":213,"line_end":213,"column_start":5,"column_end":64}},{"value":"/     // as the fields in the struct!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17323,"byte_end":17362,"line_start":214,"line_end":214,"column_start":5,"column_end":44}},{"value":"/     let header = ByteRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17367,"byte_end":17410,"line_start":215,"line_end":215,"column_start":5,"column_end":48}},{"value":"/         \"country\", \"city\", \"population\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17415,"byte_end":17459,"line_start":216,"line_end":216,"column_start":5,"column_end":49}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17464,"byte_end":17475,"line_start":217,"line_end":217,"column_start":5,"column_end":16}},{"value":"/     let record = ByteRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17480,"byte_end":17523,"line_start":218,"line_end":218,"column_start":5,"column_end":48}},{"value":"/         \"United States\", \"Boston\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17528,"byte_end":17577,"line_start":219,"line_end":219,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17582,"byte_end":17593,"line_start":220,"line_end":220,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17598,"byte_end":17601,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(Some(&header))?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17606,"byte_end":17664,"line_start":222,"line_end":222,"column_start":5,"column_end":63}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17669,"byte_end":17708,"line_start":223,"line_end":223,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17713,"byte_end":17762,"line_start":224,"line_end":224,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17767,"byte_end":17811,"line_start":225,"line_end":225,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17816,"byte_end":17830,"line_start":226,"line_end":226,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17835,"byte_end":17840,"line_start":227,"line_end":227,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":17845,"byte_end":17852,"line_start":228,"line_end":228,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18481,"byte_end":18485,"line_start":251,"line_end":251,"column_start":12,"column_end":16},"name":"iter","qualname":"<ByteRecord>::iter","value":"pub fn iter(&Self) -> ByteRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"/ Returns an iterator over all fields in this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18043,"byte_end":18098,"line_start":236,"line_end":236,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18103,"byte_end":18106,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18111,"byte_end":18124,"line_start":238,"line_end":238,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18129,"byte_end":18132,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ This example shows how to iterate over each field in a `ByteRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18137,"byte_end":18209,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18214,"byte_end":18217,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18222,"byte_end":18229,"line_start":242,"line_end":242,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18234,"byte_end":18258,"line_start":243,"line_end":243,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18263,"byte_end":18266,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18271,"byte_end":18326,"line_start":245,"line_end":245,"column_start":5,"column_end":60}},{"value":"/ for field in record.iter() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18331,"byte_end":18363,"line_start":246,"line_end":246,"column_start":5,"column_end":37}},{"value":"/     assert!(field == b\"a\" || field == b\"b\" || field == b\"c\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18368,"byte_end":18433,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18438,"byte_end":18443,"line_start":248,"line_end":248,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18448,"byte_end":18455,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18460,"byte_end":18469,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18932,"byte_end":18935,"line_start":269,"line_end":269,"column_start":12,"column_end":15},"name":"get","qualname":"<ByteRecord>::get","value":"pub fn get(&Self, usize) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"/ Return the field at index `i`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18549,"byte_end":18583,"line_start":255,"line_end":255,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18588,"byte_end":18591,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ If no field at index `i` exists, then this returns `None`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18596,"byte_end":18658,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18663,"byte_end":18666,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18671,"byte_end":18684,"line_start":259,"line_end":259,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18689,"byte_end":18692,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18697,"byte_end":18704,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18709,"byte_end":18733,"line_start":262,"line_end":262,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18738,"byte_end":18741,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18746,"byte_end":18801,"line_start":264,"line_end":264,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(record.get(1), Some(&b\"b\"[..]));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18806,"byte_end":18853,"line_start":265,"line_end":265,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(record.get(3), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18858,"byte_end":18894,"line_start":266,"line_end":266,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18899,"byte_end":18906,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":18911,"byte_end":18920,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19268,"byte_end":19276,"line_start":283,"line_end":283,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<ByteRecord>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"/ Returns true if and only if this record is empty.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19047,"byte_end":19100,"line_start":273,"line_end":273,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19105,"byte_end":19108,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19113,"byte_end":19126,"line_start":275,"line_end":275,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19131,"byte_end":19134,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19139,"byte_end":19146,"line_start":277,"line_end":277,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19151,"byte_end":19175,"line_start":278,"line_end":278,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19180,"byte_end":19183,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ assert!(ByteRecord::new().is_empty());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19188,"byte_end":19230,"line_start":280,"line_end":280,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19235,"byte_end":19242,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19247,"byte_end":19256,"line_start":282,"line_end":282,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19595,"byte_end":19598,"line_start":298,"line_end":298,"column_start":12,"column_end":15},"name":"len","qualname":"<ByteRecord>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"/ Returns the number of fields in this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19329,"byte_end":19377,"line_start":287,"line_end":287,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19382,"byte_end":19385,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19390,"byte_end":19403,"line_start":289,"line_end":289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19408,"byte_end":19411,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19416,"byte_end":19423,"line_start":291,"line_end":291,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19428,"byte_end":19452,"line_start":292,"line_end":292,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19457,"byte_end":19460,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19465,"byte_end":19520,"line_start":294,"line_end":294,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19525,"byte_end":19557,"line_start":295,"line_end":295,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19562,"byte_end":19569,"line_start":296,"line_end":296,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19574,"byte_end":19583,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20130,"byte_end":20138,"line_start":319,"line_end":319,"column_start":12,"column_end":20},"name":"truncate","qualname":"<ByteRecord>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"/ Truncate this record to `n` fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19656,"byte_end":19695,"line_start":302,"line_end":302,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19700,"byte_end":19703,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If `n` is greater than the number of fields in this record, then this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19708,"byte_end":19781,"line_start":304,"line_end":304,"column_start":5,"column_end":78}},{"value":"/ has no effect.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19786,"byte_end":19804,"line_start":305,"line_end":305,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19809,"byte_end":19812,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19817,"byte_end":19830,"line_start":307,"line_end":307,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19835,"byte_end":19838,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19843,"byte_end":19850,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19855,"byte_end":19879,"line_start":310,"line_end":310,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19884,"byte_end":19887,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19892,"byte_end":19951,"line_start":312,"line_end":312,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19956,"byte_end":19988,"line_start":313,"line_end":313,"column_start":5,"column_end":37}},{"value":"/ record.truncate(1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":19993,"byte_end":20016,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(record.len(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20021,"byte_end":20053,"line_start":315,"line_end":315,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(record, vec![\"a\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20058,"byte_end":20092,"line_start":316,"line_end":316,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20097,"byte_end":20104,"line_start":317,"line_end":317,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20109,"byte_end":20118,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20747,"byte_end":20752,"line_start":343,"line_end":343,"column_start":12,"column_end":17},"name":"clear","qualname":"<ByteRecord>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"/ Clear this record so that it has zero fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20247,"byte_end":20296,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20301,"byte_end":20304,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to calling `truncate(0)`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20309,"byte_end":20357,"line_start":327,"line_end":327,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20362,"byte_end":20365,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ Note that it is not necessary to clear the record to reuse it with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20370,"byte_end":20440,"line_start":329,"line_end":329,"column_start":5,"column_end":75}},{"value":"/ the CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20445,"byte_end":20464,"line_start":330,"line_end":330,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20469,"byte_end":20472,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20477,"byte_end":20490,"line_start":332,"line_end":332,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20495,"byte_end":20498,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20503,"byte_end":20510,"line_start":334,"line_end":334,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20515,"byte_end":20539,"line_start":335,"line_end":335,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20544,"byte_end":20547,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20552,"byte_end":20611,"line_start":337,"line_end":337,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20616,"byte_end":20648,"line_start":338,"line_end":338,"column_start":5,"column_end":37}},{"value":"/ record.clear();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20653,"byte_end":20672,"line_start":339,"line_end":339,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20677,"byte_end":20709,"line_start":340,"line_end":340,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20714,"byte_end":20721,"line_start":341,"line_end":341,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20726,"byte_end":20735,"line_start":342,"line_end":342,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21332,"byte_end":21336,"line_start":364,"line_end":364,"column_start":12,"column_end":16},"name":"trim","qualname":"<ByteRecord>::trim","value":"pub fn trim(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[{"value":"/ Trim the fields of this record so that leading and trailing whitespace","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20803,"byte_end":20877,"line_start":347,"line_end":347,"column_start":5,"column_end":79}},{"value":"/ is removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20882,"byte_end":20897,"line_start":348,"line_end":348,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20902,"byte_end":20905,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This method uses the ASCII definition of whitespace. That is, only","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20910,"byte_end":20980,"line_start":350,"line_end":350,"column_start":5,"column_end":75}},{"value":"/ bytes in the class `[\\t\\n\\v\\f\\r ]` are trimmed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":20985,"byte_end":21036,"line_start":351,"line_end":351,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21041,"byte_end":21044,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21049,"byte_end":21062,"line_start":353,"line_end":353,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21067,"byte_end":21070,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21075,"byte_end":21082,"line_start":355,"line_end":355,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21087,"byte_end":21111,"line_start":356,"line_end":356,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21116,"byte_end":21119,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21124,"byte_end":21167,"line_start":358,"line_end":358,"column_start":5,"column_end":48}},{"value":"/     \"  \", \"\\tfoo\", \"bar  \", \"b a z\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21172,"byte_end":21212,"line_start":359,"line_end":359,"column_start":5,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21217,"byte_end":21224,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ record.trim();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21229,"byte_end":21247,"line_start":361,"line_end":361,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(record, vec![\"\", \"foo\", \"bar\", \"b a z\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21252,"byte_end":21308,"line_start":362,"line_end":362,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21313,"byte_end":21320,"line_start":363,"line_end":363,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22068,"byte_end":22078,"line_start":391,"line_end":391,"column_start":12,"column_end":22},"name":"push_field","qualname":"<ByteRecord>::push_field","value":"pub fn push_field(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"/ Add a new field to this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21793,"byte_end":21828,"line_start":379,"line_end":379,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21833,"byte_end":21836,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21841,"byte_end":21854,"line_start":381,"line_end":381,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21859,"byte_end":21862,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21867,"byte_end":21874,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21879,"byte_end":21903,"line_start":384,"line_end":384,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21908,"byte_end":21911,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21916,"byte_end":21955,"line_start":386,"line_end":386,"column_start":5,"column_end":44}},{"value":"/ record.push_field(b\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21960,"byte_end":21990,"line_start":387,"line_end":387,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(&record[0], b\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":21995,"byte_end":22030,"line_start":388,"line_end":388,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22035,"byte_end":22042,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22047,"byte_end":22056,"line_start":390,"line_end":390,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23621,"byte_end":23629,"line_start":438,"line_end":438,"column_start":12,"column_end":20},"name":"position","qualname":"<ByteRecord>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"/ Return the position of this record, if available.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22362,"byte_end":22415,"line_start":400,"line_end":400,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22420,"byte_end":22423,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22428,"byte_end":22441,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22446,"byte_end":22449,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22454,"byte_end":22461,"line_start":404,"line_end":404,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22466,"byte_end":22492,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22497,"byte_end":22500,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ use csv::{ByteRecord, ReaderBuilder};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22505,"byte_end":22546,"line_start":407,"line_end":407,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22551,"byte_end":22554,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22559,"byte_end":22598,"line_start":409,"line_end":409,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22603,"byte_end":22651,"line_start":410,"line_end":410,"column_start":5,"column_end":53}},{"value":"/     let mut record = ByteRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22656,"byte_end":22699,"line_start":411,"line_end":411,"column_start":5,"column_end":48}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22704,"byte_end":22746,"line_start":412,"line_end":412,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22751,"byte_end":22782,"line_start":413,"line_end":413,"column_start":5,"column_end":36}},{"value":"/         .from_reader(\"a,b,c\\nx,y,z\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22787,"byte_end":22839,"line_start":414,"line_end":414,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22844,"byte_end":22847,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_byte_record(&mut record)?);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22852,"byte_end":22904,"line_start":416,"line_end":416,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22909,"byte_end":22918,"line_start":417,"line_end":417,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22923,"byte_end":22991,"line_start":418,"line_end":418,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":22996,"byte_end":23034,"line_start":419,"line_end":419,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23039,"byte_end":23077,"line_start":420,"line_end":420,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23082,"byte_end":23122,"line_start":421,"line_end":421,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23127,"byte_end":23136,"line_start":422,"line_end":422,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23141,"byte_end":23144,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_byte_record(&mut record)?);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23149,"byte_end":23201,"line_start":424,"line_end":424,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23206,"byte_end":23215,"line_start":425,"line_end":425,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23220,"byte_end":23288,"line_start":426,"line_end":426,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 6);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23293,"byte_end":23331,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23336,"byte_end":23374,"line_start":428,"line_end":428,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23379,"byte_end":23419,"line_start":429,"line_end":429,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23424,"byte_end":23433,"line_start":430,"line_end":430,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23438,"byte_end":23441,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/     // Finish the CSV reader for good measure.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23446,"byte_end":23496,"line_start":432,"line_end":432,"column_start":5,"column_end":55}},{"value":"/     assert!(!rdr.read_byte_record(&mut record)?);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23501,"byte_end":23554,"line_start":433,"line_end":433,"column_start":5,"column_end":58}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23559,"byte_end":23573,"line_start":434,"line_end":434,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23578,"byte_end":23583,"line_start":435,"line_end":435,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23588,"byte_end":23595,"line_start":436,"line_end":436,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23600,"byte_end":23609,"line_start":437,"line_end":437,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24157,"byte_end":24169,"line_start":459,"line_end":459,"column_start":12,"column_end":24},"name":"set_position","qualname":"<ByteRecord>::set_position","value":"pub fn set_position(&mut Self, Option<Position>)","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"/ Set the position of this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23699,"byte_end":23735,"line_start":442,"line_end":442,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23740,"byte_end":23743,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23748,"byte_end":23761,"line_start":444,"line_end":444,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23766,"byte_end":23769,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23774,"byte_end":23781,"line_start":446,"line_end":446,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, Position};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23786,"byte_end":23822,"line_start":447,"line_end":447,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23827,"byte_end":23830,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let mut record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23835,"byte_end":23894,"line_start":449,"line_end":449,"column_start":5,"column_end":64}},{"value":"/ let mut pos = Position::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23899,"byte_end":23933,"line_start":450,"line_end":450,"column_start":5,"column_end":39}},{"value":"/ pos.set_byte(100);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23938,"byte_end":23960,"line_start":451,"line_end":451,"column_start":5,"column_end":27}},{"value":"/ pos.set_line(4);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23965,"byte_end":23985,"line_start":452,"line_end":452,"column_start":5,"column_end":25}},{"value":"/ pos.set_record(2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":23990,"byte_end":24012,"line_start":453,"line_end":453,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24017,"byte_end":24020,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ record.set_position(Some(pos.clone()));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24025,"byte_end":24068,"line_start":455,"line_end":455,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(record.position(), Some(&pos));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24073,"byte_end":24119,"line_start":456,"line_end":456,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24124,"byte_end":24131,"line_start":457,"line_end":457,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24136,"byte_end":24145,"line_start":458,"line_end":458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24782,"byte_end":24787,"line_start":479,"line_end":479,"column_start":12,"column_end":17},"name":"range","qualname":"<ByteRecord>::range","value":"pub fn range(&Self, usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"/ Return the start and end position of a field in this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24243,"byte_end":24307,"line_start":463,"line_end":463,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24312,"byte_end":24315,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ If no such field exists at the given index, then return `None`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24320,"byte_end":24387,"line_start":465,"line_end":465,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24392,"byte_end":24395,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ The range returned can be used with the slice returned by `as_slice`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24400,"byte_end":24473,"line_start":467,"line_end":467,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24478,"byte_end":24481,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24486,"byte_end":24499,"line_start":469,"line_end":469,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24504,"byte_end":24507,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24512,"byte_end":24519,"line_start":471,"line_end":471,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24524,"byte_end":24548,"line_start":472,"line_end":472,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24553,"byte_end":24556,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24561,"byte_end":24621,"line_start":474,"line_end":474,"column_start":5,"column_end":65}},{"value":"/ let range = record.range(1).expect(\"a record range\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24626,"byte_end":24683,"line_start":475,"line_end":475,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(&record.as_slice()[range], &b\"quux\"[..]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24688,"byte_end":24744,"line_start":476,"line_end":476,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24749,"byte_end":24756,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24761,"byte_end":24770,"line_start":478,"line_end":478,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25301,"byte_end":25309,"line_start":496,"line_end":496,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<ByteRecord>::as_slice","value":"pub fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single byte slice. The slice returned stores\n all fields contiguously. The boundaries of each field can be determined\n via the `range` method.","sig":null,"attributes":[{"value":"/ Return the entire row as a single byte slice. The slice returned stores","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24871,"byte_end":24946,"line_start":483,"line_end":483,"column_start":5,"column_end":80}},{"value":"/ all fields contiguously. The boundaries of each field can be determined","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":24951,"byte_end":25026,"line_start":484,"line_end":484,"column_start":5,"column_end":80}},{"value":"/ via the `range` method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25031,"byte_end":25058,"line_start":485,"line_end":485,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25063,"byte_end":25066,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25071,"byte_end":25084,"line_start":487,"line_end":487,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25089,"byte_end":25092,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25097,"byte_end":25104,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"/ use csv::ByteRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25109,"byte_end":25133,"line_start":490,"line_end":490,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25138,"byte_end":25141,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ let record = ByteRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25146,"byte_end":25206,"line_start":492,"line_end":492,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(record.as_slice(), &b\"fooquuxz\"[..]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25211,"byte_end":25263,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25268,"byte_end":25275,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":25280,"byte_end":25289,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1130},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27912,"byte_end":27920,"line_start":576,"line_end":576,"column_start":12,"column_end":20},"name":"Position","qualname":"::byte_record::Position","value":"Position {  }","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133}],"decl_id":null,"docs":" A position in CSV data.","sig":null,"attributes":[{"value":"/ A position in CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27519,"byte_end":27546,"line_start":567,"line_end":567,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27547,"byte_end":27550,"line_start":568,"line_end":568,"column_start":1,"column_end":4}},{"value":"/ A position is used to report errors in CSV data. All positions include the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27551,"byte_end":27629,"line_start":569,"line_end":569,"column_start":1,"column_end":79}},{"value":"/ byte offset, line number and record index at which the error occurred.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27630,"byte_end":27704,"line_start":570,"line_end":570,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27705,"byte_end":27708,"line_start":571,"line_end":571,"column_start":1,"column_end":4}},{"value":"/ Byte offsets and record indices start at `0`. Line numbers start at `1`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27709,"byte_end":27785,"line_start":572,"line_end":572,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27786,"byte_end":27789,"line_start":573,"line_end":573,"column_start":1,"column_end":4}},{"value":"/ A CSV reader will automatically assign the position of each record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27790,"byte_end":27861,"line_start":574,"line_end":574,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28077,"byte_end":28080,"line_start":585,"line_end":585,"column_start":12,"column_end":15},"name":"new","qualname":"<Position>::new","value":"pub fn new() -> Position","parent":null,"children":[],"decl_id":null,"docs":" Returns a new position initialized to the start value.\n","sig":null,"attributes":[{"value":"/ Returns a new position initialized to the start value.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27993,"byte_end":28051,"line_start":583,"line_end":583,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28056,"byte_end":28065,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28238,"byte_end":28242,"line_start":591,"line_end":591,"column_start":12,"column_end":16},"name":"byte","qualname":"<Position>::byte","value":"pub fn byte(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The byte offset, starting at `0`, of this position.\n","sig":null,"attributes":[{"value":"/ The byte offset, starting at `0`, of this position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28157,"byte_end":28212,"line_start":589,"line_end":589,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28217,"byte_end":28226,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28368,"byte_end":28372,"line_start":596,"line_end":596,"column_start":12,"column_end":16},"name":"line","qualname":"<Position>::line","value":"pub fn line(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The line number, starting at `1`, of this position.\n","sig":null,"attributes":[{"value":"/ The line number, starting at `1`, of this position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28287,"byte_end":28342,"line_start":594,"line_end":594,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28347,"byte_end":28356,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28503,"byte_end":28509,"line_start":601,"line_end":601,"column_start":12,"column_end":18},"name":"record","qualname":"<Position>::record","value":"pub fn record(&Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" The record index, starting with the first record at `0`.\n","sig":null,"attributes":[{"value":"/ The record index, starting with the first record at `0`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28417,"byte_end":28477,"line_start":599,"line_end":599,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28482,"byte_end":28491,"line_start":600,"line_end":600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28624,"byte_end":28632,"line_start":607,"line_end":607,"column_start":12,"column_end":20},"name":"set_byte","qualname":"<Position>::set_byte","value":"pub fn set_byte(&mut Self, u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the byte offset of this position.\n","sig":null,"attributes":[{"value":"/ Set the byte offset of this position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28557,"byte_end":28598,"line_start":605,"line_end":605,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28603,"byte_end":28612,"line_start":606,"line_end":606,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28869,"byte_end":28877,"line_start":616,"line_end":616,"column_start":12,"column_end":20},"name":"set_line","qualname":"<Position>::set_line","value":"pub fn set_line(&mut Self, u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the line number of this position.","sig":null,"attributes":[{"value":"/ Set the line number of this position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28724,"byte_end":28765,"line_start":612,"line_end":612,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28770,"byte_end":28773,"line_start":613,"line_end":613,"column_start":5,"column_end":8}},{"value":"/ If the line number is less than `1`, then this method panics.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28778,"byte_end":28843,"line_start":614,"line_end":614,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28848,"byte_end":28857,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":29064,"byte_end":29074,"line_start":624,"line_end":624,"column_start":12,"column_end":22},"name":"set_record","qualname":"<Position>::set_record","value":"pub fn set_record(&mut Self, u64) -> &mut Position","parent":null,"children":[],"decl_id":null,"docs":" Set the record index of this position.\n","sig":null,"attributes":[{"value":"/ Set the record index of this position.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":28996,"byte_end":29038,"line_start":622,"line_end":622,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":29043,"byte_end":29052,"line_start":623,"line_end":623,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1159},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32684,"byte_end":32698,"line_start":765,"line_end":765,"column_start":12,"column_end":26},"name":"ByteRecordIter","qualname":"::byte_record::ByteRecordIter","value":"ByteRecordIter {  }","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165}],"decl_id":null,"docs":" A double-ended iterator over the fields in a byte record.","sig":null,"attributes":[{"value":"/ A double-ended iterator over the fields in a byte record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32483,"byte_end":32544,"line_start":760,"line_end":760,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32545,"byte_end":32548,"line_start":761,"line_end":761,"column_start":1,"column_end":4}},{"value":"/ The `'r` lifetime variable refers to the lifetime of the `ByteRecord` that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32549,"byte_end":32627,"line_start":762,"line_end":762,"column_start":1,"column_end":79}},{"value":"/ is being iterated over.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32628,"byte_end":32655,"line_start":763,"line_end":763,"column_start":1,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":159},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/cookbook.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cookbook","qualname":"::cookbook","value":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/cookbook.rs","parent":null,"children":[],"decl_id":null,"docs":"A cookbook of examples for CSV reading and writing.","sig":null,"attributes":[{"value":"*\nA cookbook of examples for CSV reading and writing.\n\n# List of examples\n\nThis is a list of examples that follow. Each of them can be found in the\n`examples` directory of the\n[`rust-csv`](https://github.com/BurntSushi/rust-csv)\nrepository.\n\nFor **reading** CSV:\n\n1. [Basic](#reading-basic)\n2. [With Serde](#reading-with-serde)\n3. [Setting a different delimiter](#reading-setting-a-different-delimiter)\n4. [Without headers](#reading-without-headers)\n\nFor **writing** CSV:\n\n5. [Basic](#writing-basic)\n6. [With Serde](#writing-with-serde)\n\nPlease\n[submit a pull request](https://github.com/BurntSushi/rust-csv/pulls)\nif you're interested in adding an example to this list!\n\n# Reading: basic\n\nThis example shows how to read CSV data from stdin and print each record to\nstdout.\n\n```no_run\n# //cookbook-read-basic.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    // Build the CSV reader and iterate over each record.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // The iterator yields Result<StringRecord, Error>, so we check the\n        // error here..\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-basic < examples/data/smallpop.csv\n```\n\n# Reading: with Serde\n\nThis is like the previous example, except it shows how to deserialize each\nrecord into a struct type that you define.\n\nFor more examples and details on how Serde deserialization works, see the\n[`Reader::deserialize`](../struct.Reader.html#method.deserialize)\nmethod.\n\n```no_run\n# //cookbook-read-serde.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Deserialize;\n\n// By default, struct field names are deserialized based on the position of\n// a corresponding field in the CSV data's header record.\n#[derive(Debug, Deserialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        // Notice that we need to provide a type hint for automatic\n        // deserialization.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-serde < examples/data/smallpop.csv\n```\n\n# Reading: setting a different delimiter\n\nThis example shows how to read CSV data from stdin where fields are separated\nby `:` instead of `,`.\n\n```no_run\n# //cookbook-read-colon.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .delimiter(b':')\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-colon < examples/data/smallpop-colon.csv\n```\n\n# Reading: without headers\n\nThe CSV reader in this crate assumes that CSV data has a header record by\ndefault, but the setting can be toggled. When enabled, the first record in\nCSV data in interpreted as the header record and is skipped. When disabled, the\nfirst record is not skipped. This example shows how to disable that setting.\n\n```no_run\n# //cookbook-read-no-headers.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(false)\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-read-no-headers < examples/data/smallpop-no-headers.csv\n```\n\n# Writing: basic\n\nThis example shows how to write CSV data to stdout.\n\n```no_run\n# //cookbook-write-basic.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // When writing records without Serde, the header record is written just\n    // like any other record.\n    wtr.write_record(&[\"city\", \"region\", \"country\", \"population\"])?;\n    wtr.write_record(&[\"Southborough\", \"MA\", \"United States\", \"9686\"])?;\n    wtr.write_record(&[\"Northbridge\", \"MA\", \"United States\", \"14061\"])?;\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-write-basic > /tmp/simplepop.csv\n```\n\n# Writing: with Serde\n\nThis example shows how to write CSV data to stdout with Serde. Namely, we\nrepresent each record using a custom struct that we define. In this example,\nheaders are written automatically.\n\n```no_run\n# //cookbook-write-serde.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Serialize;\n\n#[derive(Debug, Serialize)]\nstruct Record {\n    city: String,\n    region: String,\n    country: String,\n    population: Option<u64>,\n}\n\nfn example() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // When writing records with Serde using structs, the header row is written\n    // automatically.\n    wtr.serialize(Record {\n        city: \"Southborough\".to_string(),\n        region: \"MA\".to_string(),\n        country: \"United States\".to_string(),\n        population: Some(9686),\n    })?;\n    wtr.serialize(Record {\n        city: \"Northbridge\".to_string(),\n        region: \"MA\".to_string(),\n        country: \"United States\".to_string(),\n        population: Some(14061),\n    })?;\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = example() {\n        println!(\"error running example: {}\", err);\n        process::exit(1);\n    }\n}\n```\n\nThe above example can be run like so:\n\n```ignore\n$ git clone git://github.com/BurntSushi/rust-csv\n$ cd rust-csv\n$ cargo run --example cookbook-write-serde > /tmp/simplepop.csv\n```\n*/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/cookbook.rs","byte_start":43495,"byte_end":50614,"line_start":1,"line_end":294,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1199},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69608,"byte_end":69624,"line_start":660,"line_end":660,"column_start":12,"column_end":28},"name":"DeserializeError","qualname":"::deserializer::DeserializeError","value":"DeserializeError {  }","parent":null,"children":[{"krate":0,"index":1200},{"krate":0,"index":1201}],"decl_id":null,"docs":" An Serde deserialization error.\n","sig":null,"attributes":[{"value":"/ An Serde deserialization error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69522,"byte_end":69557,"line_start":658,"line_end":658,"column_start":1,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1214},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69855,"byte_end":69862,"line_start":669,"line_end":669,"column_start":5,"column_end":12},"name":"Message","qualname":"::deserializer::DeserializeErrorKind::Message","value":"DeserializeErrorKind::Message(String)","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" A generic Serde deserialization error.\n","sig":null,"attributes":[{"value":"/ A generic Serde deserialization error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69808,"byte_end":69850,"line_start":668,"line_end":668,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1217},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69919,"byte_end":69930,"line_start":671,"line_end":671,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::deserializer::DeserializeErrorKind::Unsupported","value":"DeserializeErrorKind::Unsupported(String)","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" A generic Serde unsupported error.\n","sig":null,"attributes":[{"value":"/ A generic Serde unsupported error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69876,"byte_end":69914,"line_start":670,"line_end":670,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1220},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70065,"byte_end":70083,"line_start":674,"line_end":674,"column_start":5,"column_end":23},"name":"UnexpectedEndOfRow","qualname":"::deserializer::DeserializeErrorKind::UnexpectedEndOfRow","value":"DeserializeErrorKind::UnexpectedEndOfRow","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" This error occurs when a Rust type expects to decode another field\n from a row, but no more fields exist.\n","sig":null,"attributes":[{"value":"/ This error occurs when a Rust type expects to decode another field","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69944,"byte_end":70014,"line_start":672,"line_end":672,"column_start":5,"column_end":75}},{"value":"/ from a row, but no more fields exist.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70019,"byte_end":70060,"line_start":673,"line_end":673,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1222},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70272,"byte_end":70283,"line_start":678,"line_end":678,"column_start":5,"column_end":16},"name":"InvalidUtf8","qualname":"::deserializer::DeserializeErrorKind::InvalidUtf8","value":"DeserializeErrorKind::InvalidUtf8(str::Utf8Error)","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" This error occurs when UTF-8 validation on a field fails. UTF-8\n validation is only performed when the Rust type requires it (e.g.,\n a `String` or `&str` type).\n","sig":null,"attributes":[{"value":"/ This error occurs when UTF-8 validation on a field fails. UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70089,"byte_end":70156,"line_start":675,"line_end":675,"column_start":5,"column_end":72}},{"value":"/ validation is only performed when the Rust type requires it (e.g.,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70161,"byte_end":70231,"line_start":676,"line_end":676,"column_start":5,"column_end":75}},{"value":"/ a `String` or `&str` type).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70236,"byte_end":70267,"line_start":677,"line_end":677,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1225},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70368,"byte_end":70377,"line_start":680,"line_end":680,"column_start":5,"column_end":14},"name":"ParseBool","qualname":"::deserializer::DeserializeErrorKind::ParseBool","value":"DeserializeErrorKind::ParseBool(str::ParseBoolError)","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" This error occurs when a boolean value fails to parse.\n","sig":null,"attributes":[{"value":"/ This error occurs when a boolean value fails to parse.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70305,"byte_end":70363,"line_start":679,"line_end":679,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1228},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70468,"byte_end":70476,"line_start":682,"line_end":682,"column_start":5,"column_end":13},"name":"ParseInt","qualname":"::deserializer::DeserializeErrorKind::ParseInt","value":"DeserializeErrorKind::ParseInt(num::ParseIntError)","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" This error occurs when an integer value fails to parse.\n","sig":null,"attributes":[{"value":"/ This error occurs when an integer value fails to parse.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70404,"byte_end":70463,"line_start":681,"line_end":681,"column_start":5,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1231},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70563,"byte_end":70573,"line_start":684,"line_end":684,"column_start":5,"column_end":15},"name":"ParseFloat","qualname":"::deserializer::DeserializeErrorKind::ParseFloat","value":"DeserializeErrorKind::ParseFloat(num::ParseFloatError)","parent":{"krate":0,"index":1213},"children":[],"decl_id":null,"docs":" This error occurs when a float value fails to parse.\n","sig":null,"attributes":[{"value":"/ This error occurs when a float value fails to parse.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70502,"byte_end":70558,"line_start":683,"line_end":683,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":1213},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69781,"byte_end":69801,"line_start":667,"line_end":667,"column_start":10,"column_end":30},"name":"DeserializeErrorKind","qualname":"::deserializer::DeserializeErrorKind","value":"pub enum DeserializeErrorKind {\n\n    /// A generic Serde deserialization error.\n    Message(String),\n\n    /// A generic Serde unsupported error.\n    Unsupported(String),\n\n    /// This error occurs when a Rust type expects to decode another field\n    /// from a row, but no more fields exist.\n    UnexpectedEndOfRow,\n\n    /// This error occurs when UTF-8 validation on a field fails. UTF-8\n    /// validation is only performed when the Rust type requires it (e.g.,\n    /// a `String` or `&str` type).\n    InvalidUtf8(str::Utf8Error),\n\n    /// This error occurs when a boolean value fails to parse.\n    ParseBool(str::ParseBoolError),\n\n    /// This error occurs when an integer value fails to parse.\n    ParseInt(num::ParseIntError),\n\n    /// This error occurs when a float value fails to parse.\n    ParseFloat(num::ParseFloatError),\n}","parent":null,"children":[{"krate":0,"index":1214},{"krate":0,"index":1217},{"krate":0,"index":1220},{"krate":0,"index":1222},{"krate":0,"index":1225},{"krate":0,"index":1228},{"krate":0,"index":1231}],"decl_id":null,"docs":" The type of a Serde deserialization error.\n","sig":null,"attributes":[{"value":"/ The type of a Serde deserialization error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":69686,"byte_end":69732,"line_start":665,"line_end":665,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71911,"byte_end":71916,"line_start":729,"line_end":729,"column_start":12,"column_end":17},"name":"field","qualname":"<DeserializeError>::field","value":"pub fn field(&Self) -> Option<u64>","parent":null,"children":[],"decl_id":null,"docs":" Return the field index (starting at 0) of this error, if available.\n","sig":null,"attributes":[{"value":"/ Return the field index (starting at 0) of this error, if available.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71828,"byte_end":71899,"line_start":728,"line_end":728,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":72020,"byte_end":72024,"line_start":734,"line_end":734,"column_start":12,"column_end":16},"name":"kind","qualname":"<DeserializeError>::kind","value":"pub fn kind(&Self) -> &DeserializeErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the underlying error kind.\n","sig":null,"attributes":[{"value":"/ Return the underlying error kind.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71971,"byte_end":72008,"line_start":733,"line_end":733,"column_start":5,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":398},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85830,"byte_end":85836,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A type alias for `Result<T, csv::Error>`.\n","sig":null,"attributes":[{"value":"/ A type alias for `Result<T, csv::Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85775,"byte_end":85820,"line_start":9,"line_end":9,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1251},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86277,"byte_end":86282,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error that can occur when processing CSV data.","sig":null,"attributes":[{"value":"/ An error that can occur when processing CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85869,"byte_end":85922,"line_start":12,"line_end":12,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85923,"byte_end":85926,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ This error can happen when writing or reading CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85927,"byte_end":85986,"line_start":14,"line_end":14,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85987,"byte_end":85990,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ There are some important scenarios where an error is impossible to occur.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":85991,"byte_end":86068,"line_start":16,"line_end":16,"column_start":1,"column_end":78}},{"value":"/ For example, if a CSV reader is used on an in-memory buffer with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86069,"byte_end":86141,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ `flexible` option enabled and one is reading records as raw byte strings,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86142,"byte_end":86219,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ then no error can occur.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86220,"byte_end":86248,"line_start":19,"line_end":19,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86509,"byte_end":86513,"line_start":30,"line_end":30,"column_start":12,"column_end":16},"name":"kind","qualname":"<Error>::kind","value":"pub fn kind(&Self) -> &ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Return the specific type of this error.\n","sig":null,"attributes":[{"value":"/ Return the specific type of this error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86454,"byte_end":86497,"line_start":29,"line_end":29,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86623,"byte_end":86632,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"into_kind","qualname":"<Error>::into_kind","value":"pub fn into_kind(Self) -> ErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Unwrap this error into its underlying type.\n","sig":null,"attributes":[{"value":"/ Unwrap this error into its underlying type.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86564,"byte_end":86611,"line_start":34,"line_end":34,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86839,"byte_end":86850,"line_start":43,"line_end":43,"column_start":12,"column_end":23},"name":"is_io_error","qualname":"<Error>::is_io_error","value":"pub fn is_io_error(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if this is an I/O error.","sig":null,"attributes":[{"value":"/ Returns true if this is an I/O error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86681,"byte_end":86722,"line_start":39,"line_end":39,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86727,"byte_end":86730,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ If this is true, the underlying `ErrorKind` is guaranteed to be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86735,"byte_end":86802,"line_start":41,"line_end":41,"column_start":5,"column_end":72}},{"value":"/ `ErrorKind::Io`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86807,"byte_end":86827,"line_start":42,"line_end":42,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87203,"byte_end":87211,"line_start":54,"line_end":54,"column_start":12,"column_end":20},"name":"position","qualname":"<Error>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position for this error, if one exists.","sig":null,"attributes":[{"value":"/ Return the position for this error, if one exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86975,"byte_end":87029,"line_start":50,"line_end":50,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87034,"byte_end":87037,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that permits callers to easily access","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87042,"byte_end":87114,"line_start":52,"line_end":52,"column_start":5,"column_end":77}},{"value":"/ the position on an error without doing case analysis on `ErrorKind`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87119,"byte_end":87191,"line_start":53,"line_end":53,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87413,"byte_end":87415,"line_start":63,"line_end":63,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" An I/O error that occurred while reading CSV data.\n","sig":null,"attributes":[{"value":"/ An I/O error that occurred while reading CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87354,"byte_end":87408,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"StructVariant","id":{"krate":0,"index":1260},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87528,"byte_end":87532,"line_start":66,"line_end":66,"column_start":5,"column_end":9},"name":"Utf8","qualname":"::error::ErrorKind::Utf8","value":"ErrorKind::Utf8 { pos, err }","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" A UTF-8 decoding error that occured while reading CSV data into Rust\n `String`s.\n","sig":null,"attributes":[{"value":"/ A UTF-8 decoding error that occured while reading CSV data into Rust","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87432,"byte_end":87504,"line_start":64,"line_end":64,"column_start":5,"column_end":77}},{"value":"/ `String`s.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87509,"byte_end":87523,"line_start":65,"line_end":65,"column_start":5,"column_end":19}}]},{"kind":"StructVariant","id":{"krate":0,"index":1263},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87928,"byte_end":87942,"line_start":76,"line_end":76,"column_start":5,"column_end":19},"name":"UnequalLengths","qualname":"::error::ErrorKind::UnequalLengths","value":"ErrorKind::UnequalLengths { pos, expected_len, len }","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" This error occurs when two records with an unequal number of fields\n are found. This error only occurs when the `flexible` option in a\n CSV reader/writer is disabled.\n","sig":null,"attributes":[{"value":"/ This error occurs when two records with an unequal number of fields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87739,"byte_end":87810,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/ are found. This error only occurs when the `flexible` option in a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87815,"byte_end":87884,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/ CSV reader/writer is disabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87889,"byte_end":87923,"line_start":75,"line_end":75,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1267},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88560,"byte_end":88564,"line_start":90,"line_end":90,"column_start":5,"column_end":9},"name":"Seek","qualname":"::error::ErrorKind::Seek","value":"ErrorKind::Seek","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" This error occurs when either the `byte_headers` or `headers` methods\n are called on a CSV reader that was asked to `seek` before it parsed\n the first record.\n","sig":null,"attributes":[{"value":"/ This error occurs when either the `byte_headers` or `headers` methods","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88379,"byte_end":88452,"line_start":87,"line_end":87,"column_start":5,"column_end":78}},{"value":"/ are called on a CSV reader that was asked to `seek` before it parsed","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88457,"byte_end":88529,"line_start":88,"line_end":88,"column_start":5,"column_end":77}},{"value":"/ the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88534,"byte_end":88555,"line_start":89,"line_end":89,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88645,"byte_end":88654,"line_start":92,"line_end":92,"column_start":5,"column_end":14},"name":"Serialize","qualname":"::error::ErrorKind::Serialize","value":"ErrorKind::Serialize(String)","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when using the Serde serializer.\n","sig":null,"attributes":[{"value":"/ An error of this kind occurs only when using the Serde serializer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88570,"byte_end":88640,"line_start":91,"line_end":91,"column_start":5,"column_end":75}}]},{"kind":"StructVariant","id":{"krate":0,"index":1272},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88772,"byte_end":88783,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"Deserialize","qualname":"::error::ErrorKind::Deserialize","value":"ErrorKind::Deserialize { pos, err }","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" An error of this kind occurs only when performing automatic\n deserialization with serde.\n","sig":null,"attributes":[{"value":"/ An error of this kind occurs only when performing automatic","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88668,"byte_end":88731,"line_start":93,"line_end":93,"column_start":5,"column_end":68}},{"value":"/ deserialization with serde.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88736,"byte_end":88767,"line_start":94,"line_end":94,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89226,"byte_end":89241,"line_start":107,"line_end":107,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::error::ErrorKind::__Nonexhaustive","value":"ErrorKind::__Nonexhaustive","parent":{"krate":0,"index":1256},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":88952,"byte_end":89006,"line_start":101,"line_end":101,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89011,"byte_end":89014,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89019,"byte_end":89089,"line_start":103,"line_end":103,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89094,"byte_end":89166,"line_start":104,"line_end":104,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89171,"byte_end":89202,"line_start":105,"line_end":105,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1256},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87338,"byte_end":87347,"line_start":61,"line_end":61,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n\n    /// An I/O error that occurred while reading CSV data.\n    Io(io::Error),\n\n    /// A UTF-8 decoding error that occured while reading CSV data into Rust\n    /// `String`s.\n    Utf8 {\n        /// The position of the record in which this error occurred, if\n        /// available.\n        pos: Option<Position>,\n        /// The corresponding UTF-8 error.\n        err: Utf8Error,\n    },\n\n    /// This error occurs when two records with an unequal number of fields\n    /// are found. This error only occurs when the `flexible` option in a\n    /// CSV reader/writer is disabled.\n    UnequalLengths {\n        /// The position of the first record with an unequal number of fields\n        /// to the previous record, if available.\n        pos: Option<Position>,\n        /// The expected number of fields in a record. This is the number of\n        /// fields in the record read prior to the record indicated by\n        /// `pos`.\n        expected_len: u64,\n        /// The number of fields in the bad record.\n        len: u64,\n    },\n\n    /// This error occurs when either the `byte_headers` or `headers` methods\n    /// are called on a CSV reader that was asked to `seek` before it parsed\n    /// the first record.\n    Seek,\n\n    /// An error of this kind occurs only when using the Serde serializer.\n    Serialize(String),\n\n    /// An error of this kind occurs only when performing automatic\n    /// deserialization with serde.\n    Deserialize {\n        /// The position of this error, if available.\n        pos: Option<Position>,\n        /// The deserialization error.\n        err: DeserializeError,\n    },\n\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1267},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275}],"decl_id":null,"docs":" The specific type of an error.\n","sig":null,"attributes":[{"value":"/ The specific type of an error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":87277,"byte_end":87311,"line_start":59,"line_end":59,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89495,"byte_end":89503,"line_start":115,"line_end":115,"column_start":12,"column_end":20},"name":"position","qualname":"<ErrorKind>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position for this error, if one exists.","sig":null,"attributes":[{"value":"/ Return the position for this error, if one exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89267,"byte_end":89321,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89326,"byte_end":89329,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ This is a convenience function that permits callers to easily access","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89334,"byte_end":89406,"line_start":113,"line_end":113,"column_start":5,"column_end":77}},{"value":"/ the position on an error without doing case analysis on `ErrorKind`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89411,"byte_end":89483,"line_start":114,"line_end":114,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":1279},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93049,"byte_end":93062,"line_start":223,"line_end":223,"column_start":12,"column_end":25},"name":"FromUtf8Error","qualname":"::error::FromUtf8Error","value":"FromUtf8Error {  }","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"decl_id":null,"docs":" A UTF-8 validation error during record conversion.","sig":null,"attributes":[{"value":"/ A UTF-8 validation error during record conversion.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":92855,"byte_end":92909,"line_start":218,"line_end":218,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":92910,"byte_end":92913,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This occurs when attempting to convert a `ByteRecord` into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":92914,"byte_end":92978,"line_start":220,"line_end":220,"column_start":1,"column_end":65}},{"value":"/ `StringRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":92979,"byte_end":92998,"line_start":221,"line_end":221,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93382,"byte_end":93398,"line_start":235,"line_end":235,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<FromUtf8Error>::into_byte_record","value":"pub fn into_byte_record(Self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying `ByteRecord` that failed UTF-8 validation.\n","sig":null,"attributes":[{"value":"/ Access the underlying `ByteRecord` that failed UTF-8 validation.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93302,"byte_end":93370,"line_start":234,"line_end":234,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":419},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93513,"byte_end":93523,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"utf8_error","qualname":"<FromUtf8Error>::utf8_error","value":"pub fn utf8_error(&Self) -> &Utf8Error","parent":null,"children":[],"decl_id":null,"docs":" Access the underlying UTF-8 validation error.\n","sig":null,"attributes":[{"value":"/ Access the underlying UTF-8 validation error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93452,"byte_end":93501,"line_start":239,"line_end":239,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1293},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94131,"byte_end":94140,"line_start":265,"line_end":265,"column_start":12,"column_end":21},"name":"Utf8Error","qualname":"::error::Utf8Error","value":"Utf8Error {  }","parent":null,"children":[{"krate":0,"index":1294},{"krate":0,"index":1295}],"decl_id":null,"docs":" A UTF-8 validation error.","sig":null,"attributes":[{"value":"/ A UTF-8 validation error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93831,"byte_end":93860,"line_start":257,"line_end":257,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93861,"byte_end":93864,"line_start":258,"line_end":258,"column_start":1,"column_end":4}},{"value":"/ This occurs when attempting to convert a `ByteRecord` into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93865,"byte_end":93929,"line_start":259,"line_end":259,"column_start":1,"column_end":65}},{"value":"/ `StringRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93930,"byte_end":93949,"line_start":260,"line_end":260,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93950,"byte_end":93953,"line_start":261,"line_end":261,"column_start":1,"column_end":4}},{"value":"/ The error includes the index of the field that failed validation, and the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93954,"byte_end":94031,"line_start":262,"line_end":262,"column_start":1,"column_end":78}},{"value":"/ last byte at which valid UTF-8 was verified.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94032,"byte_end":94080,"line_start":263,"line_end":263,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":426},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94604,"byte_end":94609,"line_start":279,"line_end":279,"column_start":12,"column_end":17},"name":"field","qualname":"<Utf8Error>::field","value":"pub fn field(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The field index of a byte record in which UTF-8 validation failed.\n","sig":null,"attributes":[{"value":"/ The field index of a byte record in which UTF-8 validation failed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94522,"byte_end":94592,"line_start":278,"line_end":278,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":427},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94741,"byte_end":94752,"line_start":283,"line_end":283,"column_start":12,"column_end":23},"name":"valid_up_to","qualname":"<Utf8Error>::valid_up_to","value":"pub fn valid_up_to(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" The index into the given field up to which valid UTF-8 was verified.\n","sig":null,"attributes":[{"value":"/ The index into the given field up to which valid UTF-8 was verified.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94657,"byte_end":94729,"line_start":282,"line_end":282,"column_start":5,"column_end":77}}]},{"kind":"Struct","id":{"krate":0,"index":431},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95410,"byte_end":95424,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"IntoInnerError","qualname":"::error::IntoInnerError","value":"IntoInnerError {  }","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"decl_id":null,"docs":" `IntoInnerError` occurs when consuming a `Writer` fails.","sig":null,"attributes":[{"value":"/ `IntoInnerError` occurs when consuming a `Writer` fails.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95096,"byte_end":95156,"line_start":300,"line_end":300,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95157,"byte_end":95160,"line_start":301,"line_end":301,"column_start":1,"column_end":4}},{"value":"/ Consuming the `Writer` causes a flush to happen. If the flush fails, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95161,"byte_end":95238,"line_start":302,"line_end":302,"column_start":1,"column_end":78}},{"value":"/ this error is returned, which contains both the original `Writer` and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95239,"byte_end":95312,"line_start":303,"line_end":303,"column_start":1,"column_end":74}},{"value":"/ the error that occurred.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95313,"byte_end":95341,"line_start":304,"line_end":304,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95342,"byte_end":95345,"line_start":305,"line_end":305,"column_start":1,"column_end":4}},{"value":"/ The type parameter `W` is the unconsumed writer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95346,"byte_end":95398,"line_start":306,"line_end":306,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95928,"byte_end":95933,"line_start":324,"line_end":324,"column_start":12,"column_end":17},"name":"error","qualname":"<IntoInnerError<W>>::error","value":"pub fn error(&Self) -> &io::Error","parent":null,"children":[],"decl_id":null,"docs":" Returns the error which caused the call to `into_inner` to fail.","sig":null,"attributes":[{"value":"/ Returns the error which caused the call to `into_inner` to fail.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95762,"byte_end":95830,"line_start":321,"line_end":321,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95835,"byte_end":95838,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This error was returned when attempting to flush the internal buffer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95843,"byte_end":95916,"line_start":323,"line_end":323,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96167,"byte_end":96177,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<IntoInnerError<W>>::into_inner","value":"pub fn into_inner(Self) -> W","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying writer which generated the error.","sig":null,"attributes":[{"value":"/ Returns the underlying writer which generated the error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95986,"byte_end":96046,"line_start":328,"line_end":328,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96051,"byte_end":96054,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ The returned value can be used for error recovery, such as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96059,"byte_end":96121,"line_start":330,"line_end":330,"column_start":5,"column_end":67}},{"value":"/ re-inspecting the buffer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96126,"byte_end":96155,"line_start":331,"line_end":331,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1307},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97301,"byte_end":97314,"line_start":21,"line_end":21,"column_start":12,"column_end":25},"name":"ReaderBuilder","qualname":"::reader::ReaderBuilder","value":"ReaderBuilder {  }","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":" Builds a CSV reader with various configuration knobs.","sig":null,"attributes":[{"value":"/ Builds a CSV reader with various configuration knobs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97049,"byte_end":97106,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97107,"byte_end":97110,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ This builder can be used to tweak the field delimiter, record terminator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97111,"byte_end":97187,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ and more. Once a CSV `Reader` is built, its configuration cannot be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97188,"byte_end":97259,"line_start":18,"line_end":18,"column_start":1,"column_end":72}},{"value":"/ changed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97260,"byte_end":97272,"line_start":19,"line_end":19,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98981,"byte_end":98984,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<ReaderBuilder>::new","value":"pub fn new() -> ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV parsing.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring CSV parsing.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98018,"byte_end":98071,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98076,"byte_end":98079,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a reader, call one of the methods starting","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98084,"byte_end":98156,"line_start":49,"line_end":49,"column_start":5,"column_end":77}},{"value":"/ with `from_`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98161,"byte_end":98178,"line_start":50,"line_end":50,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98183,"byte_end":98186,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98191,"byte_end":98204,"line_start":52,"line_end":52,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98209,"byte_end":98212,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98217,"byte_end":98224,"line_start":54,"line_end":54,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98229,"byte_end":98255,"line_start":55,"line_end":55,"column_start":5,"column_end":31}},{"value":"/ use csv::{ReaderBuilder, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98260,"byte_end":98303,"line_start":56,"line_end":56,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98308,"byte_end":98311,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98316,"byte_end":98355,"line_start":58,"line_end":58,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98360,"byte_end":98408,"line_start":59,"line_end":59,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98413,"byte_end":98434,"line_start":60,"line_end":60,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98439,"byte_end":98459,"line_start":61,"line_end":61,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98464,"byte_end":98496,"line_start":62,"line_end":62,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98501,"byte_end":98532,"line_start":63,"line_end":63,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98537,"byte_end":98543,"line_start":64,"line_end":64,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new().from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98548,"byte_end":98620,"line_start":65,"line_end":65,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98625,"byte_end":98628,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/     let records = rdr","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98633,"byte_end":98658,"line_start":67,"line_end":67,"column_start":5,"column_end":30}},{"value":"/         .records()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98663,"byte_end":98685,"line_start":68,"line_end":68,"column_start":5,"column_end":27}},{"value":"/         .collect::<Result<Vec<StringRecord>, csv::Error>>()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98690,"byte_end":98755,"line_start":69,"line_end":69,"column_start":5,"column_end":70}},{"value":"/     assert_eq!(records, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98760,"byte_end":98793,"line_start":70,"line_end":70,"column_start":5,"column_end":38}},{"value":"/         vec![\"Boston\", \"United States\", \"4628910\"],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98798,"byte_end":98853,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/         vec![\"Concord\", \"United States\", \"42695\"],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98858,"byte_end":98912,"line_start":72,"line_end":72,"column_start":5,"column_end":59}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98917,"byte_end":98928,"line_start":73,"line_end":73,"column_start":5,"column_end":16}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98933,"byte_end":98947,"line_start":74,"line_end":74,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98952,"byte_end":98957,"line_start":75,"line_end":75,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":98962,"byte_end":98969,"line_start":76,"line_end":76,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99751,"byte_end":99760,"line_start":103,"line_end":103,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ReaderBuilder>::from_path","value":"pub fn from_path<P: AsRef<Path>>(&Self, P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from the\n given file path.","sig":null,"attributes":[{"value":"/ Build a CSV parser from this configuration that reads data from the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99050,"byte_end":99121,"line_start":81,"line_end":81,"column_start":5,"column_end":76}},{"value":"/ given file path.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99126,"byte_end":99146,"line_start":82,"line_end":82,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99151,"byte_end":99154,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ If there was a problem opening the file at the given path, then this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99159,"byte_end":99231,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ returns the corresponding error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99236,"byte_end":99272,"line_start":85,"line_end":85,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99277,"byte_end":99280,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99285,"byte_end":99298,"line_start":87,"line_end":87,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99303,"byte_end":99306,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99311,"byte_end":99324,"line_start":89,"line_end":89,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99329,"byte_end":99355,"line_start":90,"line_end":90,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99360,"byte_end":99387,"line_start":91,"line_end":91,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99392,"byte_end":99395,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99400,"byte_end":99439,"line_start":93,"line_end":93,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99444,"byte_end":99492,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/     let mut rdr = ReaderBuilder::new().from_path(\"foo.csv\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99497,"byte_end":99562,"line_start":95,"line_end":95,"column_start":5,"column_end":70}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99567,"byte_end":99604,"line_start":96,"line_end":96,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99609,"byte_end":99642,"line_start":97,"line_end":97,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99647,"byte_end":99684,"line_start":98,"line_end":98,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99689,"byte_end":99698,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99703,"byte_end":99717,"line_start":100,"line_end":100,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99722,"byte_end":99727,"line_start":101,"line_end":101,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99732,"byte_end":99739,"line_start":102,"line_end":102,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100716,"byte_end":100727,"line_start":133,"line_end":133,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<ReaderBuilder>::from_reader","value":"pub fn from_reader<R: io::Read>(&Self, R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV parser from this configuration that reads data from `rdr`.","sig":null,"attributes":[{"value":"/ Build a CSV parser from this configuration that reads data from `rdr`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99879,"byte_end":99953,"line_start":107,"line_end":107,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99958,"byte_end":99961,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Note that the CSV reader is buffered automatically, so you should not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":99966,"byte_end":100039,"line_start":109,"line_end":109,"column_start":5,"column_end":78}},{"value":"/ wrap `rdr` in a buffered reader like `io::BufReader`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100044,"byte_end":100101,"line_start":110,"line_end":110,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100106,"byte_end":100109,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100114,"byte_end":100127,"line_start":112,"line_end":112,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100132,"byte_end":100135,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100140,"byte_end":100147,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100152,"byte_end":100178,"line_start":115,"line_end":115,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100183,"byte_end":100210,"line_start":116,"line_end":116,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100215,"byte_end":100218,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100223,"byte_end":100262,"line_start":118,"line_end":118,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100267,"byte_end":100315,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100320,"byte_end":100341,"line_start":120,"line_end":120,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100346,"byte_end":100366,"line_start":121,"line_end":121,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100371,"byte_end":100403,"line_start":122,"line_end":122,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100408,"byte_end":100439,"line_start":123,"line_end":123,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100444,"byte_end":100450,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new().from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100455,"byte_end":100527,"line_start":125,"line_end":125,"column_start":5,"column_end":77}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100532,"byte_end":100569,"line_start":126,"line_end":126,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100574,"byte_end":100607,"line_start":127,"line_end":127,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100612,"byte_end":100649,"line_start":128,"line_end":128,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100654,"byte_end":100663,"line_start":129,"line_end":129,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100668,"byte_end":100682,"line_start":130,"line_end":130,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100687,"byte_end":100692,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100697,"byte_end":100704,"line_start":132,"line_end":132,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101692,"byte_end":101701,"line_start":166,"line_end":166,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<ReaderBuilder>::delimiter","value":"pub fn delimiter(&mut Self, u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The field delimiter to use when parsing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100813,"byte_end":100861,"line_start":137,"line_end":137,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100866,"byte_end":100869,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ The default is `b','`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100874,"byte_end":100900,"line_start":139,"line_end":139,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100905,"byte_end":100908,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100913,"byte_end":100926,"line_start":141,"line_end":141,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100931,"byte_end":100934,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100939,"byte_end":100946,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100951,"byte_end":100977,"line_start":144,"line_end":144,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":100982,"byte_end":101009,"line_start":145,"line_end":145,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101014,"byte_end":101017,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101022,"byte_end":101061,"line_start":147,"line_end":147,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101066,"byte_end":101114,"line_start":148,"line_end":148,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101119,"byte_end":101140,"line_start":149,"line_end":149,"column_start":5,"column_end":26}},{"value":"/ city;country;pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101145,"byte_end":101165,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/ Boston;United States;4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101170,"byte_end":101202,"line_start":151,"line_end":151,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101207,"byte_end":101213,"line_start":152,"line_end":152,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101218,"byte_end":101260,"line_start":153,"line_end":153,"column_start":5,"column_end":47}},{"value":"/         .delimiter(b';')","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101265,"byte_end":101293,"line_start":154,"line_end":154,"column_start":5,"column_end":33}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101298,"byte_end":101340,"line_start":155,"line_end":155,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101345,"byte_end":101348,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101353,"byte_end":101405,"line_start":157,"line_end":157,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101410,"byte_end":101443,"line_start":158,"line_end":158,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101448,"byte_end":101523,"line_start":159,"line_end":159,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101528,"byte_end":101546,"line_start":160,"line_end":160,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101551,"byte_end":101567,"line_start":161,"line_end":161,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101572,"byte_end":101644,"line_start":162,"line_end":162,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101649,"byte_end":101658,"line_start":163,"line_end":163,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101663,"byte_end":101668,"line_start":164,"line_end":164,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101673,"byte_end":101680,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":483},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103697,"byte_end":103708,"line_start":221,"line_end":221,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<ReaderBuilder>::has_headers","value":"pub fn has_headers(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to treat the first row as a special header row.","sig":null,"attributes":[{"value":"/ Whether to treat the first row as a special header row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101819,"byte_end":101878,"line_start":171,"line_end":171,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101883,"byte_end":101886,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ By default, the first row is treated as a special header row, which","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101891,"byte_end":101962,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ means the header is never returned by any of the record reading methods","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":101967,"byte_end":102042,"line_start":174,"line_end":174,"column_start":5,"column_end":80}},{"value":"/ or iterators. When this is disabled (`yes` set to `false`), the first","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102047,"byte_end":102120,"line_start":175,"line_end":175,"column_start":5,"column_end":78}},{"value":"/ row is not treated specially.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102125,"byte_end":102158,"line_start":176,"line_end":176,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102163,"byte_end":102166,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ Note that the `headers` and `byte_headers` methods are unaffected by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102171,"byte_end":102243,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ whether this is set. Those methods always return the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102248,"byte_end":102318,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102323,"byte_end":102326,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102331,"byte_end":102344,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102349,"byte_end":102352,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when `has_headers` is disabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102357,"byte_end":102424,"line_start":183,"line_end":183,"column_start":5,"column_end":72}},{"value":"/ Namely, the first row is treated just like any other row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102429,"byte_end":102490,"line_start":184,"line_end":184,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102495,"byte_end":102498,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102503,"byte_end":102510,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102515,"byte_end":102541,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102546,"byte_end":102573,"line_start":188,"line_end":188,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102578,"byte_end":102581,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102586,"byte_end":102625,"line_start":190,"line_end":190,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102630,"byte_end":102678,"line_start":191,"line_end":191,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102683,"byte_end":102704,"line_start":192,"line_end":192,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102709,"byte_end":102729,"line_start":193,"line_end":193,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102734,"byte_end":102766,"line_start":194,"line_end":194,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102771,"byte_end":102777,"line_start":195,"line_end":195,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102782,"byte_end":102824,"line_start":196,"line_end":196,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102829,"byte_end":102860,"line_start":197,"line_end":197,"column_start":5,"column_end":36}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102865,"byte_end":102907,"line_start":198,"line_end":198,"column_start":5,"column_end":47}},{"value":"/     let mut iter = rdr.records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102912,"byte_end":102949,"line_start":199,"line_end":199,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102954,"byte_end":102957,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/     // Read the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":102962,"byte_end":102995,"line_start":201,"line_end":201,"column_start":5,"column_end":38}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103000,"byte_end":103043,"line_start":202,"line_end":202,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103048,"byte_end":103081,"line_start":203,"line_end":203,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103086,"byte_end":103149,"line_start":204,"line_end":204,"column_start":5,"column_end":68}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103154,"byte_end":103170,"line_start":205,"line_end":205,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103175,"byte_end":103209,"line_start":206,"line_end":206,"column_start":5,"column_end":39}},{"value":"/             \"expected at least two records but got none\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103214,"byte_end":103277,"line_start":207,"line_end":207,"column_start":5,"column_end":68}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103282,"byte_end":103291,"line_start":208,"line_end":208,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103296,"byte_end":103299,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/     // Read the second record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103304,"byte_end":103338,"line_start":210,"line_end":210,"column_start":5,"column_end":39}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103343,"byte_end":103386,"line_start":211,"line_end":211,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103391,"byte_end":103424,"line_start":212,"line_end":212,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103429,"byte_end":103504,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103509,"byte_end":103525,"line_start":214,"line_end":214,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103530,"byte_end":103564,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/             \"expected at least two records but got one\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103569,"byte_end":103630,"line_start":216,"line_end":216,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103635,"byte_end":103644,"line_start":217,"line_end":217,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103649,"byte_end":103663,"line_start":218,"line_end":218,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103668,"byte_end":103673,"line_start":219,"line_end":219,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103678,"byte_end":103685,"line_start":220,"line_end":220,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106601,"byte_end":106609,"line_start":303,"line_end":303,"column_start":12,"column_end":20},"name":"flexible","qualname":"<ReaderBuilder>::flexible","value":"pub fn flexible(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[{"value":"/ Whether the number of fields in records is allowed to change or not.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103811,"byte_end":103883,"line_start":226,"line_end":226,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103888,"byte_end":103891,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ When disabled (which is the default), parsing CSV data will return an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103896,"byte_end":103969,"line_start":228,"line_end":228,"column_start":5,"column_end":78}},{"value":"/ error if a record is found with a number of fields different from the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":103974,"byte_end":104047,"line_start":229,"line_end":229,"column_start":5,"column_end":78}},{"value":"/ number of fields in a previous record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104052,"byte_end":104094,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104099,"byte_end":104102,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ When enabled, this error checking is turned off.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104107,"byte_end":104159,"line_start":232,"line_end":232,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104164,"byte_end":104167,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Example: flexible records enabled","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104172,"byte_end":104211,"line_start":234,"line_end":234,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104216,"byte_end":104219,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104224,"byte_end":104231,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104236,"byte_end":104262,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104267,"byte_end":104294,"line_start":238,"line_end":238,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104299,"byte_end":104302,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104307,"byte_end":104346,"line_start":240,"line_end":240,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104351,"byte_end":104399,"line_start":241,"line_end":241,"column_start":5,"column_end":53}},{"value":"/     // Notice that the first row is missing the population count.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104404,"byte_end":104473,"line_start":242,"line_end":242,"column_start":5,"column_end":74}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104478,"byte_end":104499,"line_start":243,"line_end":243,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104504,"byte_end":104524,"line_start":244,"line_end":244,"column_start":5,"column_end":25}},{"value":"/ Boston,United States","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104529,"byte_end":104553,"line_start":245,"line_end":245,"column_start":5,"column_end":29}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104558,"byte_end":104564,"line_start":246,"line_end":246,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104569,"byte_end":104611,"line_start":247,"line_end":247,"column_start":5,"column_end":47}},{"value":"/         .flexible(true)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104616,"byte_end":104643,"line_start":248,"line_end":248,"column_start":5,"column_end":32}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104648,"byte_end":104690,"line_start":249,"line_end":249,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104695,"byte_end":104698,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104703,"byte_end":104755,"line_start":251,"line_end":251,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104760,"byte_end":104793,"line_start":252,"line_end":252,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104798,"byte_end":104862,"line_start":253,"line_end":253,"column_start":5,"column_end":69}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104867,"byte_end":104885,"line_start":254,"line_end":254,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104890,"byte_end":104906,"line_start":255,"line_end":255,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104911,"byte_end":104983,"line_start":256,"line_end":256,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":104988,"byte_end":104997,"line_start":257,"line_end":257,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105002,"byte_end":105007,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105012,"byte_end":105019,"line_start":259,"line_end":259,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105024,"byte_end":105027,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example: flexible records disabled","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105032,"byte_end":105072,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105077,"byte_end":105080,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ This shows the error that appears when records of unequal length","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105085,"byte_end":105153,"line_start":263,"line_end":263,"column_start":5,"column_end":73}},{"value":"/ are found and flexible records have been disabled (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105158,"byte_end":105225,"line_start":264,"line_end":264,"column_start":5,"column_end":72}},{"value":"/ default).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105230,"byte_end":105243,"line_start":265,"line_end":265,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105248,"byte_end":105251,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105256,"byte_end":105263,"line_start":267,"line_end":267,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105268,"byte_end":105294,"line_start":268,"line_end":268,"column_start":5,"column_end":31}},{"value":"/ use csv::{ErrorKind, ReaderBuilder};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105299,"byte_end":105339,"line_start":269,"line_end":269,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105344,"byte_end":105347,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105352,"byte_end":105391,"line_start":271,"line_end":271,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105396,"byte_end":105444,"line_start":272,"line_end":272,"column_start":5,"column_end":53}},{"value":"/     // Notice that the first row is missing the population count.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105449,"byte_end":105518,"line_start":273,"line_end":273,"column_start":5,"column_end":74}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105523,"byte_end":105544,"line_start":274,"line_end":274,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105549,"byte_end":105569,"line_start":275,"line_end":275,"column_start":5,"column_end":25}},{"value":"/ Boston,United States","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105574,"byte_end":105598,"line_start":276,"line_end":276,"column_start":5,"column_end":29}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105603,"byte_end":105609,"line_start":277,"line_end":277,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105614,"byte_end":105656,"line_start":278,"line_end":278,"column_start":5,"column_end":47}},{"value":"/         .flexible(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105661,"byte_end":105689,"line_start":279,"line_end":279,"column_start":5,"column_end":33}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105694,"byte_end":105736,"line_start":280,"line_end":280,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105741,"byte_end":105744,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/     if let Some(Err(err)) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105749,"byte_end":105803,"line_start":282,"line_end":282,"column_start":5,"column_end":59}},{"value":"/         match *err.kind() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105808,"byte_end":105839,"line_start":283,"line_end":283,"column_start":5,"column_end":36}},{"value":"/             ErrorKind::UnequalLengths { expected_len, len, .. } => {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105844,"byte_end":105916,"line_start":284,"line_end":284,"column_start":5,"column_end":77}},{"value":"/                 // The header row has 3 fields...","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105921,"byte_end":105974,"line_start":285,"line_end":285,"column_start":5,"column_end":58}},{"value":"/                 assert_eq!(expected_len, 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":105979,"byte_end":106027,"line_start":286,"line_end":286,"column_start":5,"column_end":53}},{"value":"/                 // ... but the first row has only 2 fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106032,"byte_end":106095,"line_start":287,"line_end":287,"column_start":5,"column_end":68}},{"value":"/                 assert_eq!(len, 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106100,"byte_end":106139,"line_start":288,"line_end":288,"column_start":5,"column_end":44}},{"value":"/                 Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106144,"byte_end":106170,"line_start":289,"line_end":289,"column_start":5,"column_end":31}},{"value":"/             }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106175,"byte_end":106192,"line_start":290,"line_end":290,"column_start":5,"column_end":22}},{"value":"/             ref wrong => {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106197,"byte_end":106227,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/                 Err(From::from(format!(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106232,"byte_end":106275,"line_start":292,"line_end":292,"column_start":5,"column_end":48}},{"value":"/                     \"expected UnequalLengths error but got {:?}\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106280,"byte_end":106349,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/                     wrong)))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106354,"byte_end":106386,"line_start":294,"line_end":294,"column_start":5,"column_end":37}},{"value":"/             }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106391,"byte_end":106408,"line_start":295,"line_end":295,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106413,"byte_end":106426,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106431,"byte_end":106447,"line_start":297,"line_end":297,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106452,"byte_end":106479,"line_start":298,"line_end":298,"column_start":5,"column_end":32}},{"value":"/             \"expected at least one errored record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106484,"byte_end":106553,"line_start":299,"line_end":299,"column_start":5,"column_end":74}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106558,"byte_end":106567,"line_start":300,"line_end":300,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106572,"byte_end":106577,"line_start":301,"line_end":301,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106582,"byte_end":106589,"line_start":302,"line_end":302,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":485},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108534,"byte_end":108538,"line_start":354,"line_end":354,"column_start":12,"column_end":16},"name":"trim","qualname":"<ReaderBuilder>::trim","value":"pub fn trim(&mut Self, Trim) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether fields are trimmed of leading and trailing whitespace or not.","sig":null,"attributes":[{"value":"/ Whether fields are trimmed of leading and trailing whitespace or not.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106709,"byte_end":106782,"line_start":308,"line_end":308,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106787,"byte_end":106790,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ By default, no trimming is performed. This method permits one to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106795,"byte_end":106863,"line_start":310,"line_end":310,"column_start":5,"column_end":73}},{"value":"/ override that behavior and choose one of the following options:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106868,"byte_end":106935,"line_start":311,"line_end":311,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106940,"byte_end":106943,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ 1. `Trim::Headers` trims only header values.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":106948,"byte_end":106996,"line_start":313,"line_end":313,"column_start":5,"column_end":53}},{"value":"/ 2. `Trim::Fields` trims only non-header or \"field\" values.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107001,"byte_end":107063,"line_start":314,"line_end":314,"column_start":5,"column_end":67}},{"value":"/ 3. `Trim::All` trims both header and non-header values.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107068,"byte_end":107127,"line_start":315,"line_end":315,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107132,"byte_end":107135,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ A value is only interpreted as a header value if this CSV reader is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107140,"byte_end":107211,"line_start":317,"line_end":317,"column_start":5,"column_end":76}},{"value":"/ configured to read a header record (which is the default).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107216,"byte_end":107278,"line_start":318,"line_end":318,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107283,"byte_end":107286,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ When reading string records, characters meeting the definition of","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107291,"byte_end":107360,"line_start":320,"line_end":320,"column_start":5,"column_end":74}},{"value":"/ Unicode whitespace are trimmed. When reading byte records, characters","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107365,"byte_end":107438,"line_start":321,"line_end":321,"column_start":5,"column_end":78}},{"value":"/ meeting the definition of ASCII whitespace are trimmed. ASCII","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107443,"byte_end":107508,"line_start":322,"line_end":322,"column_start":5,"column_end":70}},{"value":"/ whitespace characters correspond to the set `[\\t\\n\\v\\f\\r ]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107513,"byte_end":107577,"line_start":323,"line_end":323,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107582,"byte_end":107585,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107590,"byte_end":107603,"line_start":325,"line_end":325,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107608,"byte_end":107611,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ This example shows what happens when all values are trimmed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107616,"byte_end":107680,"line_start":327,"line_end":327,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107685,"byte_end":107688,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107693,"byte_end":107700,"line_start":329,"line_end":329,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107705,"byte_end":107731,"line_start":330,"line_end":330,"column_start":5,"column_end":31}},{"value":"/ use csv::{ReaderBuilder, StringRecord, Trim};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107736,"byte_end":107785,"line_start":331,"line_end":331,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107790,"byte_end":107793,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107798,"byte_end":107837,"line_start":333,"line_end":333,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107842,"byte_end":107890,"line_start":334,"line_end":334,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107895,"byte_end":107916,"line_start":335,"line_end":335,"column_start":5,"column_end":26}},{"value":"/ city ,   country ,  pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107921,"byte_end":107948,"line_start":336,"line_end":336,"column_start":5,"column_end":32}},{"value":"/ Boston,\\\"","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107953,"byte_end":107966,"line_start":337,"line_end":337,"column_start":5,"column_end":18}},{"value":"/    United States\\\",4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":107971,"byte_end":108001,"line_start":338,"line_end":338,"column_start":5,"column_end":35}},{"value":"/ Concord,   United States   ,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108006,"byte_end":108043,"line_start":339,"line_end":339,"column_start":5,"column_end":42}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108048,"byte_end":108054,"line_start":340,"line_end":340,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108059,"byte_end":108101,"line_start":341,"line_end":341,"column_start":5,"column_end":47}},{"value":"/         .trim(Trim::All)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108106,"byte_end":108134,"line_start":342,"line_end":342,"column_start":5,"column_end":33}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108139,"byte_end":108181,"line_start":343,"line_end":343,"column_start":5,"column_end":47}},{"value":"/     let records = rdr","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108186,"byte_end":108211,"line_start":344,"line_end":344,"column_start":5,"column_end":30}},{"value":"/         .records()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108216,"byte_end":108238,"line_start":345,"line_end":345,"column_start":5,"column_end":27}},{"value":"/         .collect::<Result<Vec<StringRecord>, csv::Error>>()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108243,"byte_end":108308,"line_start":346,"line_end":346,"column_start":5,"column_end":70}},{"value":"/     assert_eq!(records, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108313,"byte_end":108346,"line_start":347,"line_end":347,"column_start":5,"column_end":38}},{"value":"/         vec![\"Boston\", \"United States\", \"4628910\"],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108351,"byte_end":108406,"line_start":348,"line_end":348,"column_start":5,"column_end":60}},{"value":"/         vec![\"Concord\", \"United States\", \"42695\"],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108411,"byte_end":108465,"line_start":349,"line_end":349,"column_start":5,"column_end":59}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108470,"byte_end":108481,"line_start":350,"line_end":350,"column_start":5,"column_end":16}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108486,"byte_end":108500,"line_start":351,"line_end":351,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108505,"byte_end":108510,"line_start":352,"line_end":352,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108515,"byte_end":108522,"line_start":353,"line_end":353,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109722,"byte_end":109732,"line_start":387,"line_end":387,"column_start":12,"column_end":22},"name":"terminator","qualname":"<ReaderBuilder>::terminator","value":"pub fn terminator(&mut Self, Terminator) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The record terminator to use when parsing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108636,"byte_end":108686,"line_start":359,"line_end":359,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108691,"byte_end":108694,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ A record terminator can be any single byte. The default is a special","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108699,"byte_end":108771,"line_start":361,"line_end":361,"column_start":5,"column_end":77}},{"value":"/ value, `Terminator::CRLF`, which treats any occurrence of `\\r`, `\\n`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108776,"byte_end":108848,"line_start":362,"line_end":362,"column_start":5,"column_end":77}},{"value":"/ or `\\r\\n` as a single record terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108853,"byte_end":108897,"line_start":363,"line_end":363,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108902,"byte_end":108905,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example: `$` as a record terminator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108910,"byte_end":108951,"line_start":365,"line_end":365,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108956,"byte_end":108959,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108964,"byte_end":108971,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":108976,"byte_end":109002,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/ use csv::{ReaderBuilder, Terminator};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109007,"byte_end":109048,"line_start":369,"line_end":369,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109053,"byte_end":109056,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109061,"byte_end":109100,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109105,"byte_end":109153,"line_start":372,"line_end":372,"column_start":5,"column_end":53}},{"value":"/     let data = \"city,country,pop$Boston,United States,4628910\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109158,"byte_end":109225,"line_start":373,"line_end":373,"column_start":5,"column_end":72}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109230,"byte_end":109272,"line_start":374,"line_end":374,"column_start":5,"column_end":47}},{"value":"/         .terminator(Terminator::Any(b'$'))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109277,"byte_end":109323,"line_start":375,"line_end":375,"column_start":5,"column_end":51}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109328,"byte_end":109370,"line_start":376,"line_end":376,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109375,"byte_end":109378,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109383,"byte_end":109435,"line_start":378,"line_end":378,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109440,"byte_end":109473,"line_start":379,"line_end":379,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109478,"byte_end":109553,"line_start":380,"line_end":380,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109558,"byte_end":109576,"line_start":381,"line_end":381,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109581,"byte_end":109597,"line_start":382,"line_end":382,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109602,"byte_end":109674,"line_start":383,"line_end":383,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109679,"byte_end":109688,"line_start":384,"line_end":384,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109693,"byte_end":109698,"line_start":385,"line_end":385,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109703,"byte_end":109710,"line_start":386,"line_end":386,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":487},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110777,"byte_end":110782,"line_start":421,"line_end":421,"column_start":12,"column_end":17},"name":"quote","qualname":"<ReaderBuilder>::quote","value":"pub fn quote(&mut Self, u8) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The quote character to use when parsing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109859,"byte_end":109907,"line_start":392,"line_end":392,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109912,"byte_end":109915,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The default is `b'\"'`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109920,"byte_end":109946,"line_start":394,"line_end":394,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109951,"byte_end":109954,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ # Example: single quotes instead of double quotes","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":109959,"byte_end":110012,"line_start":396,"line_end":396,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110017,"byte_end":110020,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110025,"byte_end":110032,"line_start":398,"line_end":398,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110037,"byte_end":110063,"line_start":399,"line_end":399,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110068,"byte_end":110095,"line_start":400,"line_end":400,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110100,"byte_end":110103,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110108,"byte_end":110147,"line_start":402,"line_end":402,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110152,"byte_end":110200,"line_start":403,"line_end":403,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110205,"byte_end":110226,"line_start":404,"line_end":404,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110231,"byte_end":110251,"line_start":405,"line_end":405,"column_start":5,"column_end":25}},{"value":"/ Boston,'United States',4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110256,"byte_end":110290,"line_start":406,"line_end":406,"column_start":5,"column_end":39}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110295,"byte_end":110301,"line_start":407,"line_end":407,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110306,"byte_end":110348,"line_start":408,"line_end":408,"column_start":5,"column_end":47}},{"value":"/         .quote(b'\\'')","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110353,"byte_end":110378,"line_start":409,"line_end":409,"column_start":5,"column_end":30}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110383,"byte_end":110425,"line_start":410,"line_end":410,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110430,"byte_end":110433,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110438,"byte_end":110490,"line_start":412,"line_end":412,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110495,"byte_end":110528,"line_start":413,"line_end":413,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110533,"byte_end":110608,"line_start":414,"line_end":414,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110613,"byte_end":110631,"line_start":415,"line_end":415,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110636,"byte_end":110652,"line_start":416,"line_end":416,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110657,"byte_end":110729,"line_start":417,"line_end":417,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110734,"byte_end":110743,"line_start":418,"line_end":418,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110748,"byte_end":110753,"line_start":419,"line_end":419,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110758,"byte_end":110765,"line_start":420,"line_end":420,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112034,"byte_end":112040,"line_start":460,"line_end":460,"column_start":12,"column_end":18},"name":"escape","qualname":"<ReaderBuilder>::escape","value":"pub fn escape(&mut Self, Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The escape character to use when parsing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110888,"byte_end":110937,"line_start":426,"line_end":426,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110942,"byte_end":110945,"line_start":427,"line_end":427,"column_start":5,"column_end":8}},{"value":"/ In some variants of CSV, quotes are escaped using a special escape","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":110950,"byte_end":111020,"line_start":428,"line_end":428,"column_start":5,"column_end":75}},{"value":"/ character like `\\` (instead of escaping quotes by doubling them).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111025,"byte_end":111094,"line_start":429,"line_end":429,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111099,"byte_end":111102,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ By default, recognizing these idiosyncratic escapes is disabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111107,"byte_end":111175,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111180,"byte_end":111183,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111188,"byte_end":111201,"line_start":433,"line_end":433,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111206,"byte_end":111209,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111214,"byte_end":111221,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111226,"byte_end":111252,"line_start":436,"line_end":436,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111257,"byte_end":111284,"line_start":437,"line_end":437,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111289,"byte_end":111292,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111297,"byte_end":111336,"line_start":439,"line_end":439,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111341,"byte_end":111389,"line_start":440,"line_end":440,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111394,"byte_end":111415,"line_start":441,"line_end":441,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111420,"byte_end":111440,"line_start":442,"line_end":442,"column_start":5,"column_end":25}},{"value":"/ Boston,\\\"The \\\\\\\"United\\\\\\\" States\\\",4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111445,"byte_end":111493,"line_start":443,"line_end":443,"column_start":5,"column_end":53}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111498,"byte_end":111504,"line_start":444,"line_end":444,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111509,"byte_end":111551,"line_start":445,"line_end":445,"column_start":5,"column_end":47}},{"value":"/         .escape(Some(b'\\\\'))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111556,"byte_end":111588,"line_start":446,"line_end":446,"column_start":5,"column_end":37}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111593,"byte_end":111635,"line_start":447,"line_end":447,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111640,"byte_end":111643,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111648,"byte_end":111700,"line_start":449,"line_end":449,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111705,"byte_end":111738,"line_start":450,"line_end":450,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111743,"byte_end":111779,"line_start":451,"line_end":451,"column_start":5,"column_end":41}},{"value":"/             \"Boston\", \"The \\\"United\\\" States\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111784,"byte_end":111845,"line_start":452,"line_end":452,"column_start":5,"column_end":66}},{"value":"/         ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111850,"byte_end":111865,"line_start":453,"line_end":453,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111870,"byte_end":111888,"line_start":454,"line_end":454,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111893,"byte_end":111909,"line_start":455,"line_end":455,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111914,"byte_end":111986,"line_start":456,"line_end":456,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":111991,"byte_end":112000,"line_start":457,"line_end":457,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112005,"byte_end":112010,"line_start":458,"line_end":458,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112015,"byte_end":112022,"line_start":459,"line_end":459,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113190,"byte_end":113202,"line_start":497,"line_end":497,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<ReaderBuilder>::double_quote","value":"pub fn double_quote(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[{"value":"/ Enable double quote escapes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112157,"byte_end":112189,"line_start":465,"line_end":465,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112194,"byte_end":112197,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default, but it may be disabled. When disabled,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112202,"byte_end":112272,"line_start":467,"line_end":467,"column_start":5,"column_end":75}},{"value":"/ doubled quotes are not interpreted as escapes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112277,"byte_end":112327,"line_start":468,"line_end":468,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112332,"byte_end":112335,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112340,"byte_end":112353,"line_start":470,"line_end":470,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112358,"byte_end":112361,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112366,"byte_end":112373,"line_start":472,"line_end":472,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112378,"byte_end":112404,"line_start":473,"line_end":473,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112409,"byte_end":112436,"line_start":474,"line_end":474,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112441,"byte_end":112444,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112449,"byte_end":112488,"line_start":476,"line_end":476,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112493,"byte_end":112541,"line_start":477,"line_end":477,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112546,"byte_end":112567,"line_start":478,"line_end":478,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112572,"byte_end":112592,"line_start":479,"line_end":479,"column_start":5,"column_end":25}},{"value":"/ Boston,\\\"The \\\"\\\"United\\\"\\\" States\\\",4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112597,"byte_end":112645,"line_start":480,"line_end":480,"column_start":5,"column_end":53}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112650,"byte_end":112656,"line_start":481,"line_end":481,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112661,"byte_end":112703,"line_start":482,"line_end":482,"column_start":5,"column_end":47}},{"value":"/         .double_quote(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112708,"byte_end":112740,"line_start":483,"line_end":483,"column_start":5,"column_end":37}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112745,"byte_end":112787,"line_start":484,"line_end":484,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112792,"byte_end":112795,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112800,"byte_end":112852,"line_start":486,"line_end":486,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112857,"byte_end":112890,"line_start":487,"line_end":487,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112895,"byte_end":112931,"line_start":488,"line_end":488,"column_start":5,"column_end":41}},{"value":"/             \"Boston\", \"The \\\"United\\\"\\\" States\\\"\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":112936,"byte_end":113001,"line_start":489,"line_end":489,"column_start":5,"column_end":70}},{"value":"/         ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113006,"byte_end":113021,"line_start":490,"line_end":490,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113026,"byte_end":113044,"line_start":491,"line_end":491,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113049,"byte_end":113065,"line_start":492,"line_end":492,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113070,"byte_end":113142,"line_start":493,"line_end":493,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113147,"byte_end":113156,"line_start":494,"line_end":494,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113161,"byte_end":113166,"line_start":495,"line_end":495,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113171,"byte_end":113178,"line_start":496,"line_end":496,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114310,"byte_end":114317,"line_start":534,"line_end":534,"column_start":12,"column_end":19},"name":"quoting","qualname":"<ReaderBuilder>::quoting","value":"pub fn quoting(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable quoting.","sig":null,"attributes":[{"value":"/ Enable or disable quoting.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113313,"byte_end":113343,"line_start":502,"line_end":502,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113348,"byte_end":113351,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default, but it may be disabled. When disabled,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113356,"byte_end":113426,"line_start":504,"line_end":504,"column_start":5,"column_end":75}},{"value":"/ quotes are not treated specially.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113431,"byte_end":113468,"line_start":505,"line_end":505,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113473,"byte_end":113476,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113481,"byte_end":113494,"line_start":507,"line_end":507,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113499,"byte_end":113502,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113507,"byte_end":113514,"line_start":509,"line_end":509,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113519,"byte_end":113545,"line_start":510,"line_end":510,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113550,"byte_end":113577,"line_start":511,"line_end":511,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113582,"byte_end":113585,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113590,"byte_end":113629,"line_start":513,"line_end":513,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113634,"byte_end":113682,"line_start":514,"line_end":514,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113687,"byte_end":113708,"line_start":515,"line_end":515,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113713,"byte_end":113733,"line_start":516,"line_end":516,"column_start":5,"column_end":25}},{"value":"/ Boston,\\\"The United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113738,"byte_end":113776,"line_start":517,"line_end":517,"column_start":5,"column_end":43}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113781,"byte_end":113787,"line_start":518,"line_end":518,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113792,"byte_end":113834,"line_start":519,"line_end":519,"column_start":5,"column_end":47}},{"value":"/         .quoting(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113839,"byte_end":113866,"line_start":520,"line_end":520,"column_start":5,"column_end":32}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113871,"byte_end":113913,"line_start":521,"line_end":521,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113918,"byte_end":113921,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113926,"byte_end":113978,"line_start":523,"line_end":523,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":113983,"byte_end":114016,"line_start":524,"line_end":524,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114021,"byte_end":114057,"line_start":525,"line_end":525,"column_start":5,"column_end":41}},{"value":"/             \"Boston\", \"\\\"The United States\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114062,"byte_end":114121,"line_start":526,"line_end":526,"column_start":5,"column_end":64}},{"value":"/         ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114126,"byte_end":114141,"line_start":527,"line_end":527,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114146,"byte_end":114164,"line_start":528,"line_end":528,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114169,"byte_end":114185,"line_start":529,"line_end":529,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114190,"byte_end":114262,"line_start":530,"line_end":530,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114267,"byte_end":114276,"line_start":531,"line_end":531,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114281,"byte_end":114286,"line_start":532,"line_end":532,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114291,"byte_end":114298,"line_start":533,"line_end":533,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115478,"byte_end":115485,"line_start":572,"line_end":572,"column_start":12,"column_end":19},"name":"comment","qualname":"<ReaderBuilder>::comment","value":"pub fn comment(&mut Self, Option<u8>) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" The comment character to use when parsing CSV.","sig":null,"attributes":[{"value":"/ The comment character to use when parsing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114423,"byte_end":114473,"line_start":539,"line_end":539,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114478,"byte_end":114481,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ If the start of a record begins with the byte given here, then that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114486,"byte_end":114557,"line_start":541,"line_end":541,"column_start":5,"column_end":76}},{"value":"/ line is ignored by the CSV parser.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114562,"byte_end":114600,"line_start":542,"line_end":542,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114605,"byte_end":114608,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ This is disabled by default.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114613,"byte_end":114645,"line_start":544,"line_end":544,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114650,"byte_end":114653,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114658,"byte_end":114671,"line_start":546,"line_end":546,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114676,"byte_end":114679,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114684,"byte_end":114691,"line_start":548,"line_end":548,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114696,"byte_end":114722,"line_start":549,"line_end":549,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114727,"byte_end":114754,"line_start":550,"line_end":550,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114759,"byte_end":114762,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114767,"byte_end":114806,"line_start":552,"line_end":552,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114811,"byte_end":114859,"line_start":553,"line_end":553,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114864,"byte_end":114885,"line_start":554,"line_end":554,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114890,"byte_end":114910,"line_start":555,"line_end":555,"column_start":5,"column_end":25}},{"value":"/ #Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114915,"byte_end":114947,"line_start":556,"line_end":556,"column_start":5,"column_end":37}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114952,"byte_end":114984,"line_start":557,"line_end":557,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":114989,"byte_end":114995,"line_start":558,"line_end":558,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115000,"byte_end":115042,"line_start":559,"line_end":559,"column_start":5,"column_end":47}},{"value":"/         .comment(Some(b'#'))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115047,"byte_end":115079,"line_start":560,"line_end":560,"column_start":5,"column_end":37}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115084,"byte_end":115126,"line_start":561,"line_end":561,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115131,"byte_end":115134,"line_start":562,"line_end":562,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115139,"byte_end":115191,"line_start":563,"line_end":563,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115196,"byte_end":115229,"line_start":564,"line_end":564,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115234,"byte_end":115309,"line_start":565,"line_end":565,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115314,"byte_end":115332,"line_start":566,"line_end":566,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115337,"byte_end":115353,"line_start":567,"line_end":567,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115358,"byte_end":115430,"line_start":568,"line_end":568,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115435,"byte_end":115444,"line_start":569,"line_end":569,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115449,"byte_end":115454,"line_start":570,"line_end":570,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115459,"byte_end":115466,"line_start":571,"line_end":571,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116632,"byte_end":116637,"line_start":606,"line_end":606,"column_start":12,"column_end":17},"name":"ascii","qualname":"<ReaderBuilder>::ascii","value":"pub fn ascii(&mut Self) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" A convenience method for specifying a configuration to read ASCII\n delimited text.","sig":null,"attributes":[{"value":"/ A convenience method for specifying a configuration to read ASCII","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115605,"byte_end":115674,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ delimited text.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115679,"byte_end":115698,"line_start":578,"line_end":578,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115703,"byte_end":115706,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ This sets the delimiter and record terminator to the ASCII unit","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115711,"byte_end":115778,"line_start":580,"line_end":580,"column_start":5,"column_end":72}},{"value":"/ separator (`\\x1F`) and record separator (`\\x1E`), respectively.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115783,"byte_end":115850,"line_start":581,"line_end":581,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115855,"byte_end":115858,"line_start":582,"line_end":582,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115863,"byte_end":115876,"line_start":583,"line_end":583,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115881,"byte_end":115884,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115889,"byte_end":115896,"line_start":585,"line_end":585,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115901,"byte_end":115927,"line_start":586,"line_end":586,"column_start":5,"column_end":31}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115932,"byte_end":115959,"line_start":587,"line_end":587,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115964,"byte_end":115967,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":115972,"byte_end":116011,"line_start":589,"line_end":589,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116016,"byte_end":116064,"line_start":590,"line_end":590,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116069,"byte_end":116090,"line_start":591,"line_end":591,"column_start":5,"column_end":26}},{"value":"/ city\\x1Fcountry\\x1Fpop\\x1EBoston\\x1FUnited States\\x1F4628910\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116095,"byte_end":116161,"line_start":592,"line_end":592,"column_start":5,"column_end":71}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116166,"byte_end":116208,"line_start":593,"line_end":593,"column_start":5,"column_end":47}},{"value":"/         .ascii()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116213,"byte_end":116233,"line_start":594,"line_end":594,"column_start":5,"column_end":25}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116238,"byte_end":116280,"line_start":595,"line_end":595,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116285,"byte_end":116288,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116293,"byte_end":116345,"line_start":597,"line_end":597,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116350,"byte_end":116383,"line_start":598,"line_end":598,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116388,"byte_end":116463,"line_start":599,"line_end":599,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116468,"byte_end":116486,"line_start":600,"line_end":600,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116491,"byte_end":116507,"line_start":601,"line_end":601,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116512,"byte_end":116584,"line_start":602,"line_end":602,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116589,"byte_end":116598,"line_start":603,"line_end":603,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116603,"byte_end":116608,"line_start":604,"line_end":604,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116613,"byte_end":116620,"line_start":605,"line_end":605,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116855,"byte_end":116870,"line_start":613,"line_end":613,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<ReaderBuilder>::buffer_capacity","value":"pub fn buffer_capacity(&mut Self, usize) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the buffer used in the CSV reader.\n This defaults to a reasonable setting.\n","sig":null,"attributes":[{"value":"/ Set the capacity (in bytes) of the buffer used in the CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116727,"byte_end":116796,"line_start":611,"line_end":611,"column_start":5,"column_end":74}},{"value":"/ This defaults to a reasonable setting.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116801,"byte_end":116843,"line_start":612,"line_end":612,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117160,"byte_end":117163,"line_start":623,"line_end":623,"column_start":12,"column_end":15},"name":"nfa","qualname":"<ReaderBuilder>::nfa","value":"pub fn nfa(&mut Self, bool) -> &mut ReaderBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable or disable the NFA for parsing CSV.","sig":null,"attributes":[{"value":"/ Enable or disable the NFA for parsing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":116981,"byte_end":117027,"line_start":618,"line_end":618,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117032,"byte_end":117035,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ This is intended to be a debug option. The NFA is always slower than","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117040,"byte_end":117112,"line_start":620,"line_end":620,"column_start":5,"column_end":77}},{"value":"/ the DFA.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117117,"byte_end":117129,"line_start":621,"line_end":621,"column_start":5,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":1315},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":121053,"byte_end":121059,"line_start":707,"line_end":707,"column_start":12,"column_end":18},"name":"Reader","qualname":"::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319}],"decl_id":null,"docs":" A already configured CSV reader.","sig":null,"attributes":[{"value":"/ A already configured CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117263,"byte_end":117299,"line_start":629,"line_end":629,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117300,"byte_end":117303,"line_start":630,"line_end":630,"column_start":1,"column_end":4}},{"value":"/ A CSV reader takes as input CSV data and transforms that into standard Rust","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117304,"byte_end":117383,"line_start":631,"line_end":631,"column_start":1,"column_end":80}},{"value":"/ values. The most flexible way to read CSV data is as a sequence of records,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117384,"byte_end":117463,"line_start":632,"line_end":632,"column_start":1,"column_end":80}},{"value":"/ where a record is a sequence of fields and each field is a string. However,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117464,"byte_end":117543,"line_start":633,"line_end":633,"column_start":1,"column_end":80}},{"value":"/ a reader can also deserialize CSV data into Rust types like `i64` or","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117544,"byte_end":117616,"line_start":634,"line_end":634,"column_start":1,"column_end":73}},{"value":"/ `(String, f64, f64, f64)` or even a custom struct automatically using","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117617,"byte_end":117690,"line_start":635,"line_end":635,"column_start":1,"column_end":74}},{"value":"/ Serde.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117691,"byte_end":117701,"line_start":636,"line_end":636,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117702,"byte_end":117705,"line_start":637,"line_end":637,"column_start":1,"column_end":4}},{"value":"/ # Configuration","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117706,"byte_end":117725,"line_start":638,"line_end":638,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117726,"byte_end":117729,"line_start":639,"line_end":639,"column_start":1,"column_end":4}},{"value":"/ A CSV reader has a couple convenient constructor methods like `from_path`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117730,"byte_end":117807,"line_start":640,"line_end":640,"column_start":1,"column_end":78}},{"value":"/ and `from_reader`. However, if you want to configure the CSV reader to use","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117808,"byte_end":117886,"line_start":641,"line_end":641,"column_start":1,"column_end":79}},{"value":"/ a different delimiter or quote character (among many other things), then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117887,"byte_end":117963,"line_start":642,"line_end":642,"column_start":1,"column_end":77}},{"value":"/ you should use a [`ReaderBuilder`](struct.ReaderBuilder.html) to construct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":117964,"byte_end":118042,"line_start":643,"line_end":643,"column_start":1,"column_end":79}},{"value":"/ a `Reader`. For example, to change the field delimiter:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118043,"byte_end":118102,"line_start":644,"line_end":644,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118103,"byte_end":118106,"line_start":645,"line_end":645,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118107,"byte_end":118114,"line_start":646,"line_end":646,"column_start":1,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118115,"byte_end":118141,"line_start":647,"line_end":647,"column_start":1,"column_end":27}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118142,"byte_end":118169,"line_start":648,"line_end":648,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118170,"byte_end":118173,"line_start":649,"line_end":649,"column_start":1,"column_end":4}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118174,"byte_end":118213,"line_start":650,"line_end":650,"column_start":1,"column_end":40}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118214,"byte_end":118262,"line_start":651,"line_end":651,"column_start":1,"column_end":49}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118263,"byte_end":118284,"line_start":652,"line_end":652,"column_start":1,"column_end":22}},{"value":"/ city;country;pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118285,"byte_end":118305,"line_start":653,"line_end":653,"column_start":1,"column_end":21}},{"value":"/ Boston;United States;4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118306,"byte_end":118338,"line_start":654,"line_end":654,"column_start":1,"column_end":33}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118339,"byte_end":118345,"line_start":655,"line_end":655,"column_start":1,"column_end":7}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118346,"byte_end":118388,"line_start":656,"line_end":656,"column_start":1,"column_end":43}},{"value":"/         .delimiter(b';')","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118389,"byte_end":118417,"line_start":657,"line_end":657,"column_start":1,"column_end":29}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118418,"byte_end":118460,"line_start":658,"line_end":658,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118461,"byte_end":118464,"line_start":659,"line_end":659,"column_start":1,"column_end":4}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118465,"byte_end":118517,"line_start":660,"line_end":660,"column_start":1,"column_end":53}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118518,"byte_end":118551,"line_start":661,"line_end":661,"column_start":1,"column_end":34}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118552,"byte_end":118627,"line_start":662,"line_end":662,"column_start":1,"column_end":76}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118628,"byte_end":118646,"line_start":663,"line_end":663,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118647,"byte_end":118663,"line_start":664,"line_end":664,"column_start":1,"column_end":17}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118664,"byte_end":118736,"line_start":665,"line_end":665,"column_start":1,"column_end":73}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118737,"byte_end":118746,"line_start":666,"line_end":666,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118747,"byte_end":118752,"line_start":667,"line_end":667,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118753,"byte_end":118760,"line_start":668,"line_end":668,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118761,"byte_end":118764,"line_start":669,"line_end":669,"column_start":1,"column_end":4}},{"value":"/ # Error handling","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118765,"byte_end":118785,"line_start":670,"line_end":670,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118786,"byte_end":118789,"line_start":671,"line_end":671,"column_start":1,"column_end":4}},{"value":"/ In general, CSV *parsing* does not ever return an error. That is, there is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118790,"byte_end":118868,"line_start":672,"line_end":672,"column_start":1,"column_end":79}},{"value":"/ no such thing as malformed CSV data. Instead, this reader will prioritize","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118869,"byte_end":118946,"line_start":673,"line_end":673,"column_start":1,"column_end":78}},{"value":"/ finding a parse over rejecting CSV data that it does not understand. This","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":118947,"byte_end":119024,"line_start":674,"line_end":674,"column_start":1,"column_end":78}},{"value":"/ choice was inspired by other popular CSV parsers, but also because it is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119025,"byte_end":119101,"line_start":675,"line_end":675,"column_start":1,"column_end":77}},{"value":"/ pragmatic. CSV data varies wildly, so even if the CSV data is malformed,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119102,"byte_end":119178,"line_start":676,"line_end":676,"column_start":1,"column_end":77}},{"value":"/ it might still be possible to work with the data. In the land of CSV, there","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119179,"byte_end":119258,"line_start":677,"line_end":677,"column_start":1,"column_end":80}},{"value":"/ is no \"right\" or \"wrong,\" only \"right\" and \"less right.\"","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119259,"byte_end":119319,"line_start":678,"line_end":678,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119320,"byte_end":119323,"line_start":679,"line_end":679,"column_start":1,"column_end":4}},{"value":"/ With that said, a number of errors can occur while reading CSV data:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119324,"byte_end":119396,"line_start":680,"line_end":680,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119397,"byte_end":119400,"line_start":681,"line_end":681,"column_start":1,"column_end":4}},{"value":"/ * By default, all records in CSV data must have the same number of fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119401,"byte_end":119479,"line_start":682,"line_end":682,"column_start":1,"column_end":79}},{"value":"/   If a record is found with a different number of fields than a prior","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119480,"byte_end":119553,"line_start":683,"line_end":683,"column_start":1,"column_end":74}},{"value":"/   record, then an error is returned. This behavior can be disabled by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119554,"byte_end":119627,"line_start":684,"line_end":684,"column_start":1,"column_end":74}},{"value":"/   enabling flexible parsing via the `flexible` method on","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119628,"byte_end":119688,"line_start":685,"line_end":685,"column_start":1,"column_end":61}},{"value":"/   [`ReaderBuilder`](struct.ReaderBuilder.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119689,"byte_end":119740,"line_start":686,"line_end":686,"column_start":1,"column_end":52}},{"value":"/ * When reading CSV data from a resource (like a file), it is possible for","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119741,"byte_end":119818,"line_start":687,"line_end":687,"column_start":1,"column_end":78}},{"value":"/   reading from the underlying resource to fail. This will return an error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119819,"byte_end":119897,"line_start":688,"line_end":688,"column_start":1,"column_end":79}},{"value":"/   For subsequent calls to the `Reader` after encountering a such error","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119898,"byte_end":119972,"line_start":689,"line_end":689,"column_start":1,"column_end":75}},{"value":"/   (unless `seek` is used), it will behave as if end of file had been","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":119973,"byte_end":120045,"line_start":690,"line_end":690,"column_start":1,"column_end":73}},{"value":"/   reached, in order to avoid running into infinite loops when still","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120046,"byte_end":120117,"line_start":691,"line_end":691,"column_start":1,"column_end":72}},{"value":"/   attempting to read the next record when one has errored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120118,"byte_end":120180,"line_start":692,"line_end":692,"column_start":1,"column_end":63}},{"value":"/ * When reading CSV data into `String` or `&str` fields (e.g., via a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120181,"byte_end":120252,"line_start":693,"line_end":693,"column_start":1,"column_end":72}},{"value":"/   [`StringRecord`](struct.StringRecord.html)), UTF-8 is strictly","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120253,"byte_end":120321,"line_start":694,"line_end":694,"column_start":1,"column_end":69}},{"value":"/   enforced. If CSV data is invalid UTF-8, then an error is returned. If","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120322,"byte_end":120397,"line_start":695,"line_end":695,"column_start":1,"column_end":76}},{"value":"/   you want to read invalid UTF-8, then you should use the byte oriented","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120398,"byte_end":120473,"line_start":696,"line_end":696,"column_start":1,"column_end":76}},{"value":"/   APIs such as [`ByteRecord`](struct.ByteRecord.html). If you need explicit","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120474,"byte_end":120553,"line_start":697,"line_end":697,"column_start":1,"column_end":80}},{"value":"/   support for another encoding entirely, then you'll need to use another","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120554,"byte_end":120630,"line_start":698,"line_end":698,"column_start":1,"column_end":77}},{"value":"/   crate to transcode your CSV data to UTF-8 before parsing it.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120631,"byte_end":120697,"line_start":699,"line_end":699,"column_start":1,"column_end":67}},{"value":"/ * When using Serde to deserialize CSV data into Rust types, it is possible","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120698,"byte_end":120776,"line_start":700,"line_end":700,"column_start":1,"column_end":79}},{"value":"/   for a number of additional errors to occur. For example, deserializing","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120777,"byte_end":120853,"line_start":701,"line_end":701,"column_start":1,"column_end":77}},{"value":"/   a field `xyz` into an `i32` field will result in an error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120854,"byte_end":120918,"line_start":702,"line_end":702,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120919,"byte_end":120922,"line_start":703,"line_end":703,"column_start":1,"column_end":4}},{"value":"/ For more details on the precise semantics of errors, see the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120923,"byte_end":120987,"line_start":704,"line_end":704,"column_start":1,"column_end":65}},{"value":"/ [`Error`](enum.Error.html) type.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":120988,"byte_end":121024,"line_start":705,"line_end":705,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124769,"byte_end":124778,"line_start":811,"line_end":811,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Reader<Reader<File>>>::from_path","value":"pub fn from_path<P: AsRef<Path>>(P) -> Result<Reader<File>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n file path.","sig":null,"attributes":[{"value":"/ Create a new CSV parser with a default configuration for the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124156,"byte_end":124226,"line_start":790,"line_end":790,"column_start":5,"column_end":75}},{"value":"/ file path.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124231,"byte_end":124245,"line_start":791,"line_end":791,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124250,"byte_end":124253,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ To customize CSV parsing, use a `ReaderBuilder`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124258,"byte_end":124310,"line_start":793,"line_end":793,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124315,"byte_end":124318,"line_start":794,"line_end":794,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124323,"byte_end":124336,"line_start":795,"line_end":795,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124341,"byte_end":124344,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124349,"byte_end":124362,"line_start":797,"line_end":797,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124367,"byte_end":124393,"line_start":798,"line_end":798,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124398,"byte_end":124418,"line_start":799,"line_end":799,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124423,"byte_end":124426,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124431,"byte_end":124470,"line_start":801,"line_end":801,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124475,"byte_end":124523,"line_start":802,"line_end":802,"column_start":5,"column_end":53}},{"value":"/     let mut rdr = Reader::from_path(\"foo.csv\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124528,"byte_end":124580,"line_start":803,"line_end":803,"column_start":5,"column_end":57}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124585,"byte_end":124622,"line_start":804,"line_end":804,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124627,"byte_end":124660,"line_start":805,"line_end":805,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124665,"byte_end":124702,"line_start":806,"line_end":806,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124707,"byte_end":124716,"line_start":807,"line_end":807,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124721,"byte_end":124735,"line_start":808,"line_end":808,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124740,"byte_end":124745,"line_start":809,"line_end":809,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124750,"byte_end":124757,"line_start":810,"line_end":810,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126368,"byte_end":126379,"line_start":863,"line_end":863,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Reader<R>>::from_reader","value":"pub fn from_reader(R) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CSV parser with a default configuration for the given\n reader.","sig":null,"attributes":[{"value":"/ Create a new CSV parser with a default configuration for the given","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125622,"byte_end":125692,"line_start":837,"line_end":837,"column_start":5,"column_end":75}},{"value":"/ reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125697,"byte_end":125708,"line_start":838,"line_end":838,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125713,"byte_end":125716,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ To customize CSV parsing, use a `ReaderBuilder`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125721,"byte_end":125773,"line_start":840,"line_end":840,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125778,"byte_end":125781,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125786,"byte_end":125799,"line_start":842,"line_end":842,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125804,"byte_end":125807,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125812,"byte_end":125819,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125824,"byte_end":125850,"line_start":845,"line_end":845,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125855,"byte_end":125875,"line_start":846,"line_end":846,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125880,"byte_end":125883,"line_start":847,"line_end":847,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125888,"byte_end":125927,"line_start":848,"line_end":848,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125932,"byte_end":125980,"line_start":849,"line_end":849,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":125985,"byte_end":126006,"line_start":850,"line_end":850,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126011,"byte_end":126031,"line_start":851,"line_end":851,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126036,"byte_end":126068,"line_start":852,"line_end":852,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126073,"byte_end":126104,"line_start":853,"line_end":853,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126109,"byte_end":126115,"line_start":854,"line_end":854,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126120,"byte_end":126179,"line_start":855,"line_end":855,"column_start":5,"column_end":64}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126184,"byte_end":126221,"line_start":856,"line_end":856,"column_start":5,"column_end":42}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126226,"byte_end":126259,"line_start":857,"line_end":857,"column_start":5,"column_end":38}},{"value":"/         println!(\"{:?}\", record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126264,"byte_end":126301,"line_start":858,"line_end":858,"column_start":5,"column_end":42}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126306,"byte_end":126315,"line_start":859,"line_end":859,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126320,"byte_end":126334,"line_start":860,"line_end":860,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126339,"byte_end":126344,"line_start":861,"line_end":861,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126349,"byte_end":126356,"line_start":862,"line_end":862,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133266,"byte_end":133277,"line_start":1051,"line_end":1051,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Reader<R>>::deserialize","value":"pub fn deserialize<D>(&mut Self) -> DeserializeRecordsIter<, R, D> where\nD: DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over deserialized records.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over deserialized records.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126460,"byte_end":126518,"line_start":867,"line_end":867,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126523,"byte_end":126526,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<D, Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126531,"byte_end":126594,"line_start":869,"line_end":869,"column_start":5,"column_end":68}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126599,"byte_end":126668,"line_start":870,"line_end":870,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126673,"byte_end":126729,"line_start":871,"line_end":871,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126734,"byte_end":126737,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126742,"byte_end":126810,"line_start":873,"line_end":873,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record. Additionally,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126815,"byte_end":126887,"line_start":874,"line_end":874,"column_start":5,"column_end":77}},{"value":"/ if `has_headers` is enabled, then deserializing into a struct will","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126892,"byte_end":126962,"line_start":875,"line_end":875,"column_start":5,"column_end":75}},{"value":"/ automatically align the values in each row to the fields of a struct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":126967,"byte_end":127039,"line_start":876,"line_end":876,"column_start":5,"column_end":77}},{"value":"/ based on the header row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127044,"byte_end":127072,"line_start":877,"line_end":877,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127077,"byte_end":127080,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127085,"byte_end":127098,"line_start":879,"line_end":879,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127103,"byte_end":127106,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ This shows how to deserialize CSV data into normal Rust structs. The","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127111,"byte_end":127183,"line_start":881,"line_end":881,"column_start":5,"column_end":77}},{"value":"/ fields of the header row are used to match up the values in each row","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127188,"byte_end":127260,"line_start":882,"line_end":882,"column_start":5,"column_end":77}},{"value":"/ to the fields of the struct.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127265,"byte_end":127297,"line_start":883,"line_end":883,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127302,"byte_end":127305,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127310,"byte_end":127317,"line_start":885,"line_end":885,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127322,"byte_end":127348,"line_start":886,"line_end":886,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127353,"byte_end":127356,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127361,"byte_end":127381,"line_start":888,"line_end":888,"column_start":5,"column_end":25}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127386,"byte_end":127413,"line_start":889,"line_end":889,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127418,"byte_end":127421,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127426,"byte_end":127474,"line_start":891,"line_end":891,"column_start":5,"column_end":53}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127479,"byte_end":127495,"line_start":892,"line_end":892,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127500,"byte_end":127521,"line_start":893,"line_end":893,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127526,"byte_end":127550,"line_start":894,"line_end":894,"column_start":5,"column_end":29}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127555,"byte_end":127592,"line_start":895,"line_end":895,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127597,"byte_end":127621,"line_start":896,"line_end":896,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127626,"byte_end":127631,"line_start":897,"line_end":897,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127636,"byte_end":127639,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127644,"byte_end":127683,"line_start":899,"line_end":899,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127688,"byte_end":127736,"line_start":900,"line_end":900,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127741,"byte_end":127762,"line_start":901,"line_end":901,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127767,"byte_end":127792,"line_start":902,"line_end":902,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127797,"byte_end":127829,"line_start":903,"line_end":903,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127834,"byte_end":127840,"line_start":904,"line_end":904,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127845,"byte_end":127904,"line_start":905,"line_end":905,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.deserialize();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127909,"byte_end":127950,"line_start":906,"line_end":906,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127955,"byte_end":127958,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":127963,"byte_end":128006,"line_start":908,"line_end":908,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128011,"byte_end":128049,"line_start":909,"line_end":909,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128054,"byte_end":128090,"line_start":910,"line_end":910,"column_start":5,"column_end":41}},{"value":"/             city: \"Boston\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128095,"byte_end":128138,"line_start":911,"line_end":911,"column_start":5,"column_end":48}},{"value":"/             country: \"United States\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128143,"byte_end":128196,"line_start":912,"line_end":912,"column_start":5,"column_end":58}},{"value":"/             population: 4628910,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128201,"byte_end":128237,"line_start":913,"line_end":913,"column_start":5,"column_end":41}},{"value":"/         });","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128242,"byte_end":128257,"line_start":914,"line_end":914,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128262,"byte_end":128280,"line_start":915,"line_end":915,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128285,"byte_end":128301,"line_start":916,"line_end":916,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128306,"byte_end":128378,"line_start":917,"line_end":917,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128383,"byte_end":128392,"line_start":918,"line_end":918,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128397,"byte_end":128402,"line_start":919,"line_end":919,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128407,"byte_end":128414,"line_start":920,"line_end":920,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128419,"byte_end":128422,"line_start":921,"line_end":921,"column_start":5,"column_end":8}},{"value":"/ # Rules","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128427,"byte_end":128438,"line_start":922,"line_end":922,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128443,"byte_end":128446,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ For the most part, any Rust type that maps straight-forwardly to a CSV","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128451,"byte_end":128525,"line_start":924,"line_end":924,"column_start":5,"column_end":79}},{"value":"/ record is supported. This includes maps, structs, tuples and tuple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128530,"byte_end":128600,"line_start":925,"line_end":925,"column_start":5,"column_end":75}},{"value":"/ structs. Other Rust types, such as `Vec`s, arrays, and enums have","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128605,"byte_end":128674,"line_start":926,"line_end":926,"column_start":5,"column_end":74}},{"value":"/ a more complicated story. In general, when working with CSV data, one","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128679,"byte_end":128752,"line_start":927,"line_end":927,"column_start":5,"column_end":78}},{"value":"/ should avoid *nested sequences* as much as possible.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128757,"byte_end":128813,"line_start":928,"line_end":928,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128818,"byte_end":128821,"line_start":929,"line_end":929,"column_start":5,"column_end":8}},{"value":"/ Maps, structs, tuples and tuple structs map to CSV records in a simple","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128826,"byte_end":128900,"line_start":930,"line_end":930,"column_start":5,"column_end":79}},{"value":"/ way. Tuples and tuple structs decode their fields in the order that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128905,"byte_end":128976,"line_start":931,"line_end":931,"column_start":5,"column_end":76}},{"value":"/ they are defined. Structs will do the same only if `has_headers` has","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":128981,"byte_end":129053,"line_start":932,"line_end":932,"column_start":5,"column_end":77}},{"value":"/ been disabled using [`ReaderBuilder`](struct.ReaderBuilder.html),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129058,"byte_end":129127,"line_start":933,"line_end":933,"column_start":5,"column_end":74}},{"value":"/ otherwise, structs and maps are deserialized based on the fields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129132,"byte_end":129200,"line_start":934,"line_end":934,"column_start":5,"column_end":73}},{"value":"/ defined in the header row. (If there is no header row, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129205,"byte_end":129268,"line_start":935,"line_end":935,"column_start":5,"column_end":68}},{"value":"/ deserializing into a map will result in an error.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129273,"byte_end":129327,"line_start":936,"line_end":936,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129332,"byte_end":129335,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Nested sequences are supported in a limited capacity. Namely, they","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129340,"byte_end":129410,"line_start":938,"line_end":938,"column_start":5,"column_end":75}},{"value":"/ are flattened. As a result, it's often useful to use a `Vec` to capture","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129415,"byte_end":129490,"line_start":939,"line_end":939,"column_start":5,"column_end":80}},{"value":"/ a \"tail\" of fields in a record:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129495,"byte_end":129530,"line_start":940,"line_end":940,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129535,"byte_end":129538,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129543,"byte_end":129550,"line_start":942,"line_end":942,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129555,"byte_end":129581,"line_start":943,"line_end":943,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129586,"byte_end":129589,"line_start":944,"line_end":944,"column_start":5,"column_end":8}},{"value":"/ use csv::ReaderBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129594,"byte_end":129621,"line_start":945,"line_end":945,"column_start":5,"column_end":32}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129626,"byte_end":129653,"line_start":946,"line_end":946,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129658,"byte_end":129661,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129666,"byte_end":129714,"line_start":948,"line_end":948,"column_start":5,"column_end":53}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129719,"byte_end":129735,"line_start":949,"line_end":949,"column_start":5,"column_end":21}},{"value":"/     label: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129740,"byte_end":129762,"line_start":950,"line_end":950,"column_start":5,"column_end":27}},{"value":"/     values: Vec<i32>,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129767,"byte_end":129792,"line_start":951,"line_end":951,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129797,"byte_end":129802,"line_start":952,"line_end":952,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129807,"byte_end":129810,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129815,"byte_end":129854,"line_start":954,"line_end":954,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129859,"byte_end":129907,"line_start":955,"line_end":955,"column_start":5,"column_end":53}},{"value":"/     let data = \"foo,1,2,3\";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129912,"byte_end":129943,"line_start":956,"line_end":956,"column_start":5,"column_end":36}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129948,"byte_end":129990,"line_start":957,"line_end":957,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":129995,"byte_end":130026,"line_start":958,"line_end":958,"column_start":5,"column_end":36}},{"value":"/         .from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130031,"byte_end":130073,"line_start":959,"line_end":959,"column_start":5,"column_end":47}},{"value":"/     let mut iter = rdr.deserialize();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130078,"byte_end":130119,"line_start":960,"line_end":960,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130124,"byte_end":130127,"line_start":961,"line_end":961,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130132,"byte_end":130175,"line_start":962,"line_end":962,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130180,"byte_end":130218,"line_start":963,"line_end":963,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130223,"byte_end":130259,"line_start":964,"line_end":964,"column_start":5,"column_end":41}},{"value":"/             label: \"foo\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130264,"byte_end":130305,"line_start":965,"line_end":965,"column_start":5,"column_end":46}},{"value":"/             values: vec![1, 2, 3],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130310,"byte_end":130348,"line_start":966,"line_end":966,"column_start":5,"column_end":43}},{"value":"/         });","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130353,"byte_end":130368,"line_start":967,"line_end":967,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130373,"byte_end":130391,"line_start":968,"line_end":968,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130396,"byte_end":130412,"line_start":969,"line_end":969,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130417,"byte_end":130489,"line_start":970,"line_end":970,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130494,"byte_end":130503,"line_start":971,"line_end":971,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130508,"byte_end":130513,"line_start":972,"line_end":972,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130518,"byte_end":130525,"line_start":973,"line_end":973,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130530,"byte_end":130533,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ In the above example, adding another field to the `Row` struct after","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130538,"byte_end":130610,"line_start":975,"line_end":975,"column_start":5,"column_end":77}},{"value":"/ the `values` field will result in a deserialization error. This is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130615,"byte_end":130685,"line_start":976,"line_end":976,"column_start":5,"column_end":75}},{"value":"/ because the deserializer doesn't know when to stop reading fields","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130690,"byte_end":130759,"line_start":977,"line_end":977,"column_start":5,"column_end":74}},{"value":"/ into the `values` vector, so it will consume the rest of the fields in","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130764,"byte_end":130838,"line_start":978,"line_end":978,"column_start":5,"column_end":79}},{"value":"/ the record leaving none left over for the additional field.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130843,"byte_end":130906,"line_start":979,"line_end":979,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130911,"byte_end":130914,"line_start":980,"line_end":980,"column_start":5,"column_end":8}},{"value":"/ Finally, simple enums in Rust can be deserialized as well. Namely,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130919,"byte_end":130989,"line_start":981,"line_end":981,"column_start":5,"column_end":75}},{"value":"/ enums must either be variants with no arguments or variants with a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":130994,"byte_end":131064,"line_start":982,"line_end":982,"column_start":5,"column_end":75}},{"value":"/ single argument. Variants with no arguments are deserialized based on","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131069,"byte_end":131142,"line_start":983,"line_end":983,"column_start":5,"column_end":78}},{"value":"/ which variant name the field matches. Variants with a single argument","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131147,"byte_end":131220,"line_start":984,"line_end":984,"column_start":5,"column_end":78}},{"value":"/ are deserialized based on which variant can store the data. The latter","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131225,"byte_end":131299,"line_start":985,"line_end":985,"column_start":5,"column_end":79}},{"value":"/ is only supported when using \"untagged\" enum deserialization. The","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131304,"byte_end":131373,"line_start":986,"line_end":986,"column_start":5,"column_end":74}},{"value":"/ following example shows both forms in action:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131378,"byte_end":131427,"line_start":987,"line_end":987,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131432,"byte_end":131435,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131440,"byte_end":131447,"line_start":989,"line_end":989,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131452,"byte_end":131478,"line_start":990,"line_end":990,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131483,"byte_end":131486,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131491,"byte_end":131511,"line_start":992,"line_end":992,"column_start":5,"column_end":25}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131516,"byte_end":131543,"line_start":993,"line_end":993,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131548,"byte_end":131551,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131556,"byte_end":131600,"line_start":995,"line_end":995,"column_start":5,"column_end":49}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131605,"byte_end":131621,"line_start":996,"line_end":996,"column_start":5,"column_end":21}},{"value":"/     label: Label,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131626,"byte_end":131647,"line_start":997,"line_end":997,"column_start":5,"column_end":26}},{"value":"/     value: Number,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131652,"byte_end":131674,"line_start":998,"line_end":998,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131679,"byte_end":131684,"line_start":999,"line_end":999,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131689,"byte_end":131692,"line_start":1000,"line_end":1000,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131697,"byte_end":131741,"line_start":1001,"line_end":1001,"column_start":5,"column_end":49}},{"value":"/ #[serde(rename_all = \"lowercase\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131746,"byte_end":131784,"line_start":1002,"line_end":1002,"column_start":5,"column_end":43}},{"value":"/ enum Label {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131789,"byte_end":131805,"line_start":1003,"line_end":1003,"column_start":5,"column_end":21}},{"value":"/     Celsius,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131810,"byte_end":131826,"line_start":1004,"line_end":1004,"column_start":5,"column_end":21}},{"value":"/     Fahrenheit,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131831,"byte_end":131850,"line_start":1005,"line_end":1005,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131855,"byte_end":131860,"line_start":1006,"line_end":1006,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131865,"byte_end":131868,"line_start":1007,"line_end":1007,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131873,"byte_end":131917,"line_start":1008,"line_end":1008,"column_start":5,"column_end":49}},{"value":"/ #[serde(untagged)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131922,"byte_end":131944,"line_start":1009,"line_end":1009,"column_start":5,"column_end":27}},{"value":"/ enum Number {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131949,"byte_end":131966,"line_start":1010,"line_end":1010,"column_start":5,"column_end":22}},{"value":"/     Integer(i64),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131971,"byte_end":131992,"line_start":1011,"line_end":1011,"column_start":5,"column_end":26}},{"value":"/     Float(f64),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":131997,"byte_end":132016,"line_start":1012,"line_end":1012,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132021,"byte_end":132026,"line_start":1013,"line_end":1013,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132031,"byte_end":132034,"line_start":1014,"line_end":1014,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132039,"byte_end":132078,"line_start":1015,"line_end":1015,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132083,"byte_end":132131,"line_start":1016,"line_end":1016,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132136,"byte_end":132157,"line_start":1017,"line_end":1017,"column_start":5,"column_end":26}},{"value":"/ label,value","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132162,"byte_end":132177,"line_start":1018,"line_end":1018,"column_start":5,"column_end":20}},{"value":"/ celsius,22.2222","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132182,"byte_end":132201,"line_start":1019,"line_end":1019,"column_start":5,"column_end":24}},{"value":"/ fahrenheit,72","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132206,"byte_end":132223,"line_start":1020,"line_end":1020,"column_start":5,"column_end":22}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132228,"byte_end":132234,"line_start":1021,"line_end":1021,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132239,"byte_end":132298,"line_start":1022,"line_end":1022,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.deserialize();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132303,"byte_end":132344,"line_start":1023,"line_end":1023,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132349,"byte_end":132352,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/     // Read the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132357,"byte_end":132390,"line_start":1025,"line_end":1025,"column_start":5,"column_end":38}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132395,"byte_end":132438,"line_start":1026,"line_end":1026,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132443,"byte_end":132481,"line_start":1027,"line_end":1027,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132486,"byte_end":132522,"line_start":1028,"line_end":1028,"column_start":5,"column_end":41}},{"value":"/             label: Label::Celsius,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132527,"byte_end":132565,"line_start":1029,"line_end":1029,"column_start":5,"column_end":43}},{"value":"/             value: Number::Float(22.2222),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132570,"byte_end":132616,"line_start":1030,"line_end":1030,"column_start":5,"column_end":51}},{"value":"/         });","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132621,"byte_end":132636,"line_start":1031,"line_end":1031,"column_start":5,"column_end":20}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132641,"byte_end":132657,"line_start":1032,"line_end":1032,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132662,"byte_end":132696,"line_start":1033,"line_end":1033,"column_start":5,"column_end":39}},{"value":"/             \"expected at least two records but got none\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132701,"byte_end":132764,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132769,"byte_end":132778,"line_start":1035,"line_end":1035,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132783,"byte_end":132786,"line_start":1036,"line_end":1036,"column_start":5,"column_end":8}},{"value":"/     // Read the second record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132791,"byte_end":132825,"line_start":1037,"line_end":1037,"column_start":5,"column_end":39}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132830,"byte_end":132873,"line_start":1038,"line_end":1038,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132878,"byte_end":132916,"line_start":1039,"line_end":1039,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132921,"byte_end":132957,"line_start":1040,"line_end":1040,"column_start":5,"column_end":41}},{"value":"/             label: Label::Fahrenheit,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":132962,"byte_end":133003,"line_start":1041,"line_end":1041,"column_start":5,"column_end":46}},{"value":"/             value: Number::Integer(72),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133008,"byte_end":133051,"line_start":1042,"line_end":1042,"column_start":5,"column_end":48}},{"value":"/         });","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133056,"byte_end":133071,"line_start":1043,"line_end":1043,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133076,"byte_end":133094,"line_start":1044,"line_end":1044,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133099,"byte_end":133115,"line_start":1045,"line_end":1045,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133120,"byte_end":133147,"line_start":1046,"line_end":1046,"column_start":5,"column_end":32}},{"value":"/             \"expected at least two records but got only one\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133152,"byte_end":133218,"line_start":1047,"line_end":1047,"column_start":5,"column_end":71}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133223,"byte_end":133232,"line_start":1048,"line_end":1048,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133237,"byte_end":133242,"line_start":1049,"line_end":1049,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133247,"byte_end":133254,"line_start":1050,"line_end":1050,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135412,"byte_end":135428,"line_start":1114,"line_end":1114,"column_start":12,"column_end":28},"name":"into_deserialize","qualname":"<Reader<R>>::into_deserialize","value":"pub fn into_deserialize<D>(Self) -> DeserializeRecordsIntoIter<R, D> where\nD: DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over deserialized records.","sig":null,"attributes":[{"value":"/ Returns an owned iterator over deserialized records.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133422,"byte_end":133478,"line_start":1058,"line_end":1058,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133483,"byte_end":133486,"line_start":1059,"line_end":1059,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<D, Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133491,"byte_end":133554,"line_start":1060,"line_end":1060,"column_start":5,"column_end":68}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133559,"byte_end":133628,"line_start":1061,"line_end":1061,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133633,"byte_end":133689,"line_start":1062,"line_end":1062,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133694,"byte_end":133697,"line_start":1063,"line_end":1063,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful when you want to return a CSV iterator or store","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133702,"byte_end":133775,"line_start":1064,"line_end":1064,"column_start":5,"column_end":78}},{"value":"/ it somewhere.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133780,"byte_end":133797,"line_start":1065,"line_end":1065,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133802,"byte_end":133805,"line_start":1066,"line_end":1066,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133810,"byte_end":133878,"line_start":1067,"line_end":1067,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record. Additionally,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133883,"byte_end":133955,"line_start":1068,"line_end":1068,"column_start":5,"column_end":77}},{"value":"/ if `has_headers` is enabled, then deserializing into a struct will","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":133960,"byte_end":134030,"line_start":1069,"line_end":1069,"column_start":5,"column_end":75}},{"value":"/ automatically align the values in each row to the fields of a struct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134035,"byte_end":134107,"line_start":1070,"line_end":1070,"column_start":5,"column_end":77}},{"value":"/ based on the header row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134112,"byte_end":134140,"line_start":1071,"line_end":1071,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134145,"byte_end":134148,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ For more detailed deserialization rules, see the documentation on the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134153,"byte_end":134226,"line_start":1073,"line_end":1073,"column_start":5,"column_end":78}},{"value":"/ `deserialize` method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134231,"byte_end":134256,"line_start":1074,"line_end":1074,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134261,"byte_end":134264,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134269,"byte_end":134282,"line_start":1076,"line_end":1076,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134287,"byte_end":134290,"line_start":1077,"line_end":1077,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134295,"byte_end":134302,"line_start":1078,"line_end":1078,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134307,"byte_end":134333,"line_start":1079,"line_end":1079,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134338,"byte_end":134341,"line_start":1080,"line_end":1080,"column_start":5,"column_end":8}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134346,"byte_end":134366,"line_start":1081,"line_end":1081,"column_start":5,"column_end":25}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134371,"byte_end":134398,"line_start":1082,"line_end":1082,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134403,"byte_end":134406,"line_start":1083,"line_end":1083,"column_start":5,"column_end":8}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134411,"byte_end":134459,"line_start":1084,"line_end":1084,"column_start":5,"column_end":53}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134464,"byte_end":134480,"line_start":1085,"line_end":1085,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134485,"byte_end":134506,"line_start":1086,"line_end":1086,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134511,"byte_end":134535,"line_start":1087,"line_end":1087,"column_start":5,"column_end":29}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134540,"byte_end":134577,"line_start":1088,"line_end":1088,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134582,"byte_end":134606,"line_start":1089,"line_end":1089,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134611,"byte_end":134616,"line_start":1090,"line_end":1090,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134621,"byte_end":134624,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134629,"byte_end":134668,"line_start":1092,"line_end":1092,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134673,"byte_end":134721,"line_start":1093,"line_end":1093,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134726,"byte_end":134747,"line_start":1094,"line_end":1094,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134752,"byte_end":134777,"line_start":1095,"line_end":1095,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134782,"byte_end":134814,"line_start":1096,"line_end":1096,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134819,"byte_end":134825,"line_start":1097,"line_end":1097,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134830,"byte_end":134885,"line_start":1098,"line_end":1098,"column_start":5,"column_end":60}},{"value":"/     let mut iter = rdr.into_deserialize();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134890,"byte_end":134936,"line_start":1099,"line_end":1099,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134941,"byte_end":134944,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134949,"byte_end":134992,"line_start":1101,"line_end":1101,"column_start":5,"column_end":48}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":134997,"byte_end":135035,"line_start":1102,"line_end":1102,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(record, Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135040,"byte_end":135076,"line_start":1103,"line_end":1103,"column_start":5,"column_end":41}},{"value":"/             city: \"Boston\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135081,"byte_end":135124,"line_start":1104,"line_end":1104,"column_start":5,"column_end":48}},{"value":"/             country: \"United States\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135129,"byte_end":135182,"line_start":1105,"line_end":1105,"column_start":5,"column_end":58}},{"value":"/             population: 4628910,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135187,"byte_end":135223,"line_start":1106,"line_end":1106,"column_start":5,"column_end":41}},{"value":"/         });","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135228,"byte_end":135243,"line_start":1107,"line_end":1107,"column_start":5,"column_end":20}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135248,"byte_end":135266,"line_start":1108,"line_end":1108,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135271,"byte_end":135287,"line_start":1109,"line_end":1109,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135292,"byte_end":135364,"line_start":1110,"line_end":1110,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135369,"byte_end":135378,"line_start":1111,"line_end":1111,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135383,"byte_end":135388,"line_start":1112,"line_end":1112,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135393,"byte_end":135400,"line_start":1113,"line_end":1113,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136757,"byte_end":136764,"line_start":1154,"line_end":1154,"column_start":12,"column_end":19},"name":"records","qualname":"<Reader<R>>::records","value":"pub fn records(&mut Self) -> StringRecordsIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as strings.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over all records as strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135576,"byte_end":135636,"line_start":1121,"line_end":1121,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135641,"byte_end":135644,"line_start":1122,"line_end":1122,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<StringRecord, Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135649,"byte_end":135723,"line_start":1123,"line_end":1123,"column_start":5,"column_end":79}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135728,"byte_end":135797,"line_start":1124,"line_end":1124,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135802,"byte_end":135858,"line_start":1125,"line_end":1125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135863,"byte_end":135866,"line_start":1126,"line_end":1126,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135871,"byte_end":135939,"line_start":1127,"line_end":1127,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":135944,"byte_end":136002,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136007,"byte_end":136010,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136015,"byte_end":136028,"line_start":1130,"line_end":1130,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136033,"byte_end":136036,"line_start":1131,"line_end":1131,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136041,"byte_end":136048,"line_start":1132,"line_end":1132,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136053,"byte_end":136079,"line_start":1133,"line_end":1133,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136084,"byte_end":136104,"line_start":1134,"line_end":1134,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136109,"byte_end":136112,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136117,"byte_end":136156,"line_start":1136,"line_end":1136,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136161,"byte_end":136209,"line_start":1137,"line_end":1137,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136214,"byte_end":136235,"line_start":1138,"line_end":1138,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136240,"byte_end":136260,"line_start":1139,"line_end":1139,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136265,"byte_end":136297,"line_start":1140,"line_end":1140,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136302,"byte_end":136308,"line_start":1141,"line_end":1141,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136313,"byte_end":136372,"line_start":1142,"line_end":1142,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136377,"byte_end":136414,"line_start":1143,"line_end":1143,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136419,"byte_end":136422,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136427,"byte_end":136470,"line_start":1145,"line_end":1145,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136475,"byte_end":136508,"line_start":1146,"line_end":1146,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136513,"byte_end":136588,"line_start":1147,"line_end":1147,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136593,"byte_end":136611,"line_start":1148,"line_end":1148,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136616,"byte_end":136632,"line_start":1149,"line_end":1149,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136637,"byte_end":136709,"line_start":1150,"line_end":1150,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136714,"byte_end":136723,"line_start":1151,"line_end":1151,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136728,"byte_end":136733,"line_start":1152,"line_end":1152,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136738,"byte_end":136745,"line_start":1153,"line_end":1153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138138,"byte_end":138150,"line_start":1194,"line_end":1194,"column_start":12,"column_end":24},"name":"into_records","qualname":"<Reader<R>>::into_records","value":"pub fn into_records(Self) -> StringRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as strings.","sig":null,"attributes":[{"value":"/ Returns an owned iterator over all records as strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136850,"byte_end":136908,"line_start":1158,"line_end":1158,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136913,"byte_end":136916,"line_start":1159,"line_end":1159,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<StringRecord, Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":136921,"byte_end":136995,"line_start":1160,"line_end":1160,"column_start":5,"column_end":79}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137000,"byte_end":137069,"line_start":1161,"line_end":1161,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137074,"byte_end":137130,"line_start":1162,"line_end":1162,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137135,"byte_end":137138,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful when you want to return a CSV iterator or store","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137143,"byte_end":137216,"line_start":1164,"line_end":1164,"column_start":5,"column_end":78}},{"value":"/ it somewhere.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137221,"byte_end":137238,"line_start":1165,"line_end":1165,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137243,"byte_end":137246,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137251,"byte_end":137319,"line_start":1167,"line_end":1167,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137324,"byte_end":137382,"line_start":1168,"line_end":1168,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137387,"byte_end":137390,"line_start":1169,"line_end":1169,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137395,"byte_end":137408,"line_start":1170,"line_end":1170,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137413,"byte_end":137416,"line_start":1171,"line_end":1171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137421,"byte_end":137428,"line_start":1172,"line_end":1172,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137433,"byte_end":137459,"line_start":1173,"line_end":1173,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137464,"byte_end":137484,"line_start":1174,"line_end":1174,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137489,"byte_end":137492,"line_start":1175,"line_end":1175,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137497,"byte_end":137536,"line_start":1176,"line_end":1176,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137541,"byte_end":137589,"line_start":1177,"line_end":1177,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137594,"byte_end":137615,"line_start":1178,"line_end":1178,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137620,"byte_end":137640,"line_start":1179,"line_end":1179,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137645,"byte_end":137677,"line_start":1180,"line_end":1180,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137682,"byte_end":137688,"line_start":1181,"line_end":1181,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137693,"byte_end":137748,"line_start":1182,"line_end":1182,"column_start":5,"column_end":60}},{"value":"/     let mut iter = rdr.into_records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137753,"byte_end":137795,"line_start":1183,"line_end":1183,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137800,"byte_end":137803,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137808,"byte_end":137851,"line_start":1185,"line_end":1185,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137856,"byte_end":137889,"line_start":1186,"line_end":1186,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137894,"byte_end":137969,"line_start":1187,"line_end":1187,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137974,"byte_end":137992,"line_start":1188,"line_end":1188,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":137997,"byte_end":138013,"line_start":1189,"line_end":1189,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138018,"byte_end":138090,"line_start":1190,"line_end":1190,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138095,"byte_end":138104,"line_start":1191,"line_end":1191,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138109,"byte_end":138114,"line_start":1192,"line_end":1192,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138119,"byte_end":138126,"line_start":1193,"line_end":1193,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139425,"byte_end":139437,"line_start":1231,"line_end":1231,"column_start":12,"column_end":24},"name":"byte_records","qualname":"<Reader<R>>::byte_records","value":"pub fn byte_records(&mut Self) -> ByteRecordsIter<, R>","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed iterator over all records as raw bytes.","sig":null,"attributes":[{"value":"/ Returns a borrowed iterator over all records as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138239,"byte_end":138301,"line_start":1198,"line_end":1198,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138306,"byte_end":138309,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<ByteRecord, Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138314,"byte_end":138386,"line_start":1200,"line_end":1200,"column_start":5,"column_end":77}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138391,"byte_end":138460,"line_start":1201,"line_end":1201,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138465,"byte_end":138521,"line_start":1202,"line_end":1202,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138526,"byte_end":138529,"line_start":1203,"line_end":1203,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138534,"byte_end":138602,"line_start":1204,"line_end":1204,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138607,"byte_end":138665,"line_start":1205,"line_end":1205,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138670,"byte_end":138673,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138678,"byte_end":138691,"line_start":1207,"line_end":1207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138696,"byte_end":138699,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138704,"byte_end":138711,"line_start":1209,"line_end":1209,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138716,"byte_end":138742,"line_start":1210,"line_end":1210,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138747,"byte_end":138767,"line_start":1211,"line_end":1211,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138772,"byte_end":138775,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138780,"byte_end":138819,"line_start":1213,"line_end":1213,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138824,"byte_end":138872,"line_start":1214,"line_end":1214,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138877,"byte_end":138898,"line_start":1215,"line_end":1215,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138903,"byte_end":138923,"line_start":1216,"line_end":1216,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138928,"byte_end":138960,"line_start":1217,"line_end":1217,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138965,"byte_end":138971,"line_start":1218,"line_end":1218,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":138976,"byte_end":139035,"line_start":1219,"line_end":1219,"column_start":5,"column_end":64}},{"value":"/     let mut iter = rdr.byte_records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139040,"byte_end":139082,"line_start":1220,"line_end":1220,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139087,"byte_end":139090,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139095,"byte_end":139138,"line_start":1222,"line_end":1222,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139143,"byte_end":139176,"line_start":1223,"line_end":1223,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139181,"byte_end":139256,"line_start":1224,"line_end":1224,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139261,"byte_end":139279,"line_start":1225,"line_end":1225,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139284,"byte_end":139300,"line_start":1226,"line_end":1226,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139305,"byte_end":139377,"line_start":1227,"line_end":1227,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139382,"byte_end":139391,"line_start":1228,"line_end":1228,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139396,"byte_end":139401,"line_start":1229,"line_end":1229,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139406,"byte_end":139413,"line_start":1230,"line_end":1230,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140812,"byte_end":140829,"line_start":1271,"line_end":1271,"column_start":12,"column_end":29},"name":"into_byte_records","qualname":"<Reader<R>>::into_byte_records","value":"pub fn into_byte_records(Self) -> ByteRecordsIntoIter<R>","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned iterator over all records as raw bytes.","sig":null,"attributes":[{"value":"/ Returns an owned iterator over all records as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139519,"byte_end":139579,"line_start":1235,"line_end":1235,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139584,"byte_end":139587,"line_start":1236,"line_end":1236,"column_start":5,"column_end":8}},{"value":"/ Each item yielded by this iterator is a `Result<ByteRecord, Error>`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139592,"byte_end":139664,"line_start":1237,"line_end":1237,"column_start":5,"column_end":77}},{"value":"/ Therefore, in order to access the record, callers must handle the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139669,"byte_end":139738,"line_start":1238,"line_end":1238,"column_start":5,"column_end":74}},{"value":"/ possibility of error (typically with `try!` or `?`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139743,"byte_end":139799,"line_start":1239,"line_end":1239,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139804,"byte_end":139807,"line_start":1240,"line_end":1240,"column_start":5,"column_end":8}},{"value":"/ This is mostly useful when you want to return a CSV iterator or store","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139812,"byte_end":139885,"line_start":1241,"line_end":1241,"column_start":5,"column_end":78}},{"value":"/ it somewhere.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139890,"byte_end":139907,"line_start":1242,"line_end":1242,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139912,"byte_end":139915,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139920,"byte_end":139988,"line_start":1244,"line_end":1244,"column_start":5,"column_end":73}},{"value":"/ default), then this does not include the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":139993,"byte_end":140051,"line_start":1245,"line_end":1245,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140056,"byte_end":140059,"line_start":1246,"line_end":1246,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140064,"byte_end":140077,"line_start":1247,"line_end":1247,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140082,"byte_end":140085,"line_start":1248,"line_end":1248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140090,"byte_end":140097,"line_start":1249,"line_end":1249,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140102,"byte_end":140128,"line_start":1250,"line_end":1250,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140133,"byte_end":140153,"line_start":1251,"line_end":1251,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140158,"byte_end":140161,"line_start":1252,"line_end":1252,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140166,"byte_end":140205,"line_start":1253,"line_end":1253,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140210,"byte_end":140258,"line_start":1254,"line_end":1254,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140263,"byte_end":140284,"line_start":1255,"line_end":1255,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140289,"byte_end":140309,"line_start":1256,"line_end":1256,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140314,"byte_end":140346,"line_start":1257,"line_end":1257,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140351,"byte_end":140357,"line_start":1258,"line_end":1258,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140362,"byte_end":140417,"line_start":1259,"line_end":1259,"column_start":5,"column_end":60}},{"value":"/     let mut iter = rdr.into_byte_records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140422,"byte_end":140469,"line_start":1260,"line_end":1260,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140474,"byte_end":140477,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140482,"byte_end":140525,"line_start":1262,"line_end":1262,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140530,"byte_end":140563,"line_start":1263,"line_end":1263,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140568,"byte_end":140643,"line_start":1264,"line_end":1264,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140648,"byte_end":140666,"line_start":1265,"line_end":1265,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140671,"byte_end":140687,"line_start":1266,"line_end":1266,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140692,"byte_end":140764,"line_start":1267,"line_end":1267,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140769,"byte_end":140778,"line_start":1268,"line_end":1268,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140783,"byte_end":140788,"line_start":1269,"line_end":1269,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140793,"byte_end":140800,"line_start":1270,"line_end":1270,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142953,"byte_end":142960,"line_start":1329,"line_end":1329,"column_start":12,"column_end":19},"name":"headers","qualname":"<Reader<R>>::headers","value":"pub fn headers(&mut Self) -> Result<&StringRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser.","sig":null,"attributes":[{"value":"/ Returns a reference to the first row read by this parser.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140914,"byte_end":140975,"line_start":1275,"line_end":1275,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140980,"byte_end":140983,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ If no row has been read yet, then this will force parsing of the first","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":140988,"byte_end":141062,"line_start":1277,"line_end":1277,"column_start":5,"column_end":79}},{"value":"/ row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141067,"byte_end":141075,"line_start":1278,"line_end":1278,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141080,"byte_end":141083,"line_start":1279,"line_end":1279,"column_start":5,"column_end":8}},{"value":"/ If there was a problem parsing the row or if it wasn't valid UTF-8,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141088,"byte_end":141159,"line_start":1280,"line_end":1280,"column_start":5,"column_end":76}},{"value":"/ then this returns an error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141164,"byte_end":141195,"line_start":1281,"line_end":1281,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141200,"byte_end":141203,"line_start":1282,"line_end":1282,"column_start":5,"column_end":8}},{"value":"/ If the underlying reader emits EOF before any data, then this returns","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141208,"byte_end":141281,"line_start":1283,"line_end":1283,"column_start":5,"column_end":78}},{"value":"/ an empty record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141286,"byte_end":141306,"line_start":1284,"line_end":1284,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141311,"byte_end":141314,"line_start":1285,"line_end":1285,"column_start":5,"column_end":8}},{"value":"/ Note that this method may be used regardless of whether `has_headers`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141319,"byte_end":141392,"line_start":1286,"line_end":1286,"column_start":5,"column_end":78}},{"value":"/ was enabled (but it is enabled by default).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141397,"byte_end":141444,"line_start":1287,"line_end":1287,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141449,"byte_end":141452,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141457,"byte_end":141470,"line_start":1289,"line_end":1289,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141475,"byte_end":141478,"line_start":1290,"line_end":1290,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the header row of CSV data. Notice that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141483,"byte_end":141556,"line_start":1291,"line_end":1291,"column_start":5,"column_end":78}},{"value":"/ the header row does not appear as a record in the iterator!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141561,"byte_end":141624,"line_start":1292,"line_end":1292,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141629,"byte_end":141632,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141637,"byte_end":141644,"line_start":1294,"line_end":1294,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141649,"byte_end":141675,"line_start":1295,"line_end":1295,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141680,"byte_end":141700,"line_start":1296,"line_end":1296,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141705,"byte_end":141708,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141713,"byte_end":141752,"line_start":1298,"line_end":1298,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141757,"byte_end":141805,"line_start":1299,"line_end":1299,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141810,"byte_end":141831,"line_start":1300,"line_end":1300,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141836,"byte_end":141856,"line_start":1301,"line_end":1301,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141861,"byte_end":141893,"line_start":1302,"line_end":1302,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141898,"byte_end":141904,"line_start":1303,"line_end":1303,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141909,"byte_end":141968,"line_start":1304,"line_end":1304,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141973,"byte_end":141976,"line_start":1305,"line_end":1305,"column_start":5,"column_end":8}},{"value":"/     // We can read the headers before iterating.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":141981,"byte_end":142033,"line_start":1306,"line_end":1306,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142038,"byte_end":142047,"line_start":1307,"line_end":1307,"column_start":5,"column_end":14}},{"value":"/         // `headers` borrows from the reader, so we put this in its","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142052,"byte_end":142123,"line_start":1308,"line_end":1308,"column_start":5,"column_end":76}},{"value":"/         // own scope. That way, the borrow ends before we try iterating","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142128,"byte_end":142203,"line_start":1309,"line_end":1309,"column_start":5,"column_end":80}},{"value":"/         // below. Alternatively, we could clone the headers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142208,"byte_end":142272,"line_start":1310,"line_end":1310,"column_start":5,"column_end":69}},{"value":"/         let headers = rdr.headers()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142277,"byte_end":142318,"line_start":1311,"line_end":1311,"column_start":5,"column_end":46}},{"value":"/         assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142323,"byte_end":142387,"line_start":1312,"line_end":1312,"column_start":5,"column_end":69}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142392,"byte_end":142401,"line_start":1313,"line_end":1313,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142406,"byte_end":142409,"line_start":1314,"line_end":1314,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142414,"byte_end":142466,"line_start":1315,"line_end":1315,"column_start":5,"column_end":57}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142471,"byte_end":142504,"line_start":1316,"line_end":1316,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142509,"byte_end":142584,"line_start":1317,"line_end":1317,"column_start":5,"column_end":80}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142589,"byte_end":142605,"line_start":1318,"line_end":1318,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142610,"byte_end":142644,"line_start":1319,"line_end":1319,"column_start":5,"column_end":39}},{"value":"/             \"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142649,"byte_end":142710,"line_start":1320,"line_end":1320,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142715,"byte_end":142724,"line_start":1321,"line_end":1321,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142729,"byte_end":142732,"line_start":1322,"line_end":1322,"column_start":5,"column_end":8}},{"value":"/     // We can also read the headers after iterating.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142737,"byte_end":142793,"line_start":1323,"line_end":1323,"column_start":5,"column_end":61}},{"value":"/     let headers = rdr.headers()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142798,"byte_end":142835,"line_start":1324,"line_end":1324,"column_start":5,"column_end":42}},{"value":"/     assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142840,"byte_end":142900,"line_start":1325,"line_end":1325,"column_start":5,"column_end":65}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142905,"byte_end":142919,"line_start":1326,"line_end":1326,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142924,"byte_end":142929,"line_start":1327,"line_end":1327,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":142934,"byte_end":142941,"line_start":1328,"line_end":1328,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145575,"byte_end":145587,"line_start":1398,"line_end":1398,"column_start":12,"column_end":24},"name":"byte_headers","qualname":"<Reader<R>>::byte_headers","value":"pub fn byte_headers(&mut Self) -> Result<&ByteRecord>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the first row read by this parser as raw bytes.","sig":null,"attributes":[{"value":"/ Returns a reference to the first row read by this parser as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143545,"byte_end":143619,"line_start":1345,"line_end":1345,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143624,"byte_end":143627,"line_start":1346,"line_end":1346,"column_start":5,"column_end":8}},{"value":"/ If no row has been read yet, then this will force parsing of the first","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143632,"byte_end":143706,"line_start":1347,"line_end":1347,"column_start":5,"column_end":79}},{"value":"/ row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143711,"byte_end":143719,"line_start":1348,"line_end":1348,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143724,"byte_end":143727,"line_start":1349,"line_end":1349,"column_start":5,"column_end":8}},{"value":"/ If there was a problem parsing the row then this returns an error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143732,"byte_end":143802,"line_start":1350,"line_end":1350,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143807,"byte_end":143810,"line_start":1351,"line_end":1351,"column_start":5,"column_end":8}},{"value":"/ If the underlying reader emits EOF before any data, then this returns","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143815,"byte_end":143888,"line_start":1352,"line_end":1352,"column_start":5,"column_end":78}},{"value":"/ an empty record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143893,"byte_end":143913,"line_start":1353,"line_end":1353,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143918,"byte_end":143921,"line_start":1354,"line_end":1354,"column_start":5,"column_end":8}},{"value":"/ Note that this method may be used regardless of whether `has_headers`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":143926,"byte_end":143999,"line_start":1355,"line_end":1355,"column_start":5,"column_end":78}},{"value":"/ was enabled (but it is enabled by default).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144004,"byte_end":144051,"line_start":1356,"line_end":1356,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144056,"byte_end":144059,"line_start":1357,"line_end":1357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144064,"byte_end":144077,"line_start":1358,"line_end":1358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144082,"byte_end":144085,"line_start":1359,"line_end":1359,"column_start":5,"column_end":8}},{"value":"/ This example shows how to get the header row of CSV data. Notice that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144090,"byte_end":144163,"line_start":1360,"line_end":1360,"column_start":5,"column_end":78}},{"value":"/ the header row does not appear as a record in the iterator!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144168,"byte_end":144231,"line_start":1361,"line_end":1361,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144236,"byte_end":144239,"line_start":1362,"line_end":1362,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144244,"byte_end":144251,"line_start":1363,"line_end":1363,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144256,"byte_end":144282,"line_start":1364,"line_end":1364,"column_start":5,"column_end":31}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144287,"byte_end":144307,"line_start":1365,"line_end":1365,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144312,"byte_end":144315,"line_start":1366,"line_end":1366,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144320,"byte_end":144359,"line_start":1367,"line_end":1367,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144364,"byte_end":144412,"line_start":1368,"line_end":1368,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144417,"byte_end":144438,"line_start":1369,"line_end":1369,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144443,"byte_end":144463,"line_start":1370,"line_end":1370,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144468,"byte_end":144500,"line_start":1371,"line_end":1371,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144505,"byte_end":144511,"line_start":1372,"line_end":1372,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144516,"byte_end":144575,"line_start":1373,"line_end":1373,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144580,"byte_end":144583,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/     // We can read the headers before iterating.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144588,"byte_end":144640,"line_start":1375,"line_end":1375,"column_start":5,"column_end":57}},{"value":"/     {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144645,"byte_end":144654,"line_start":1376,"line_end":1376,"column_start":5,"column_end":14}},{"value":"/         // `headers` borrows from the reader, so we put this in its","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144659,"byte_end":144730,"line_start":1377,"line_end":1377,"column_start":5,"column_end":76}},{"value":"/         // own scope. That way, the borrow ends before we try iterating","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144735,"byte_end":144810,"line_start":1378,"line_end":1378,"column_start":5,"column_end":80}},{"value":"/         // below. Alternatively, we could clone the headers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144815,"byte_end":144879,"line_start":1379,"line_end":1379,"column_start":5,"column_end":69}},{"value":"/         let headers = rdr.byte_headers()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144884,"byte_end":144930,"line_start":1380,"line_end":1380,"column_start":5,"column_end":51}},{"value":"/         assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":144935,"byte_end":144999,"line_start":1381,"line_end":1381,"column_start":5,"column_end":69}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145004,"byte_end":145013,"line_start":1382,"line_end":1382,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145018,"byte_end":145021,"line_start":1383,"line_end":1383,"column_start":5,"column_end":8}},{"value":"/     if let Some(result) = rdr.byte_records().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145026,"byte_end":145083,"line_start":1384,"line_end":1384,"column_start":5,"column_end":62}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145088,"byte_end":145121,"line_start":1385,"line_end":1385,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145126,"byte_end":145201,"line_start":1386,"line_end":1386,"column_start":5,"column_end":80}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145206,"byte_end":145222,"line_start":1387,"line_end":1387,"column_start":5,"column_end":21}},{"value":"/         return Err(From::from(","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145227,"byte_end":145261,"line_start":1388,"line_end":1388,"column_start":5,"column_end":39}},{"value":"/             \"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145266,"byte_end":145327,"line_start":1389,"line_end":1389,"column_start":5,"column_end":66}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145332,"byte_end":145341,"line_start":1390,"line_end":1390,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145346,"byte_end":145349,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/     // We can also read the headers after iterating.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145354,"byte_end":145410,"line_start":1392,"line_end":1392,"column_start":5,"column_end":61}},{"value":"/     let headers = rdr.byte_headers()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145415,"byte_end":145457,"line_start":1393,"line_end":1393,"column_start":5,"column_end":47}},{"value":"/     assert_eq!(headers, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145462,"byte_end":145522,"line_start":1394,"line_end":1394,"column_start":5,"column_end":65}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145527,"byte_end":145541,"line_start":1395,"line_end":1395,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145546,"byte_end":145551,"line_start":1396,"line_end":1396,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145556,"byte_end":145563,"line_start":1397,"line_end":1397,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146782,"byte_end":146793,"line_start":1434,"line_end":1434,"column_start":12,"column_end":23},"name":"set_headers","qualname":"<Reader<R>>::set_headers","value":"pub fn set_headers(&mut Self, StringRecord)","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually.","sig":null,"attributes":[{"value":"/ Set the headers of this CSV parser manually.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145899,"byte_end":145947,"line_start":1407,"line_end":1407,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145952,"byte_end":145955,"line_start":1408,"line_end":1408,"column_start":5,"column_end":8}},{"value":"/ This overrides any other setting (including `set_byte_headers`). Any","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":145960,"byte_end":146032,"line_start":1409,"line_end":1409,"column_start":5,"column_end":77}},{"value":"/ automatic detection of headers is disabled. This may be called at any","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146037,"byte_end":146110,"line_start":1410,"line_end":1410,"column_start":5,"column_end":78}},{"value":"/ time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146115,"byte_end":146124,"line_start":1411,"line_end":1411,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146129,"byte_end":146132,"line_start":1412,"line_end":1412,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146137,"byte_end":146150,"line_start":1413,"line_end":1413,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146155,"byte_end":146158,"line_start":1414,"line_end":1414,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146163,"byte_end":146170,"line_start":1415,"line_end":1415,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146175,"byte_end":146201,"line_start":1416,"line_end":1416,"column_start":5,"column_end":31}},{"value":"/ use csv::{Reader, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146206,"byte_end":146242,"line_start":1417,"line_end":1417,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146247,"byte_end":146250,"line_start":1418,"line_end":1418,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146255,"byte_end":146294,"line_start":1419,"line_end":1419,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146299,"byte_end":146347,"line_start":1420,"line_end":1420,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146352,"byte_end":146373,"line_start":1421,"line_end":1421,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146378,"byte_end":146398,"line_start":1422,"line_end":1422,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146403,"byte_end":146435,"line_start":1423,"line_end":1423,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146440,"byte_end":146446,"line_start":1424,"line_end":1424,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146451,"byte_end":146510,"line_start":1425,"line_end":1425,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146515,"byte_end":146518,"line_start":1426,"line_end":1426,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(rdr.headers()?, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146523,"byte_end":146590,"line_start":1427,"line_end":1427,"column_start":5,"column_end":72}},{"value":"/     rdr.set_headers(StringRecord::from(vec![\"a\", \"b\", \"c\"]));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146595,"byte_end":146660,"line_start":1428,"line_end":1428,"column_start":5,"column_end":70}},{"value":"/     assert_eq!(rdr.headers()?, vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146665,"byte_end":146721,"line_start":1429,"line_end":1429,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146726,"byte_end":146729,"line_start":1430,"line_end":1430,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146734,"byte_end":146748,"line_start":1431,"line_end":1431,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146753,"byte_end":146758,"line_start":1432,"line_end":1432,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146763,"byte_end":146770,"line_start":1433,"line_end":1433,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":513},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147787,"byte_end":147803,"line_start":1465,"line_end":1465,"column_start":12,"column_end":28},"name":"set_byte_headers","qualname":"<Reader<R>>::set_byte_headers","value":"pub fn set_byte_headers(&mut Self, ByteRecord)","parent":null,"children":[],"decl_id":null,"docs":" Set the headers of this CSV parser manually as raw bytes.","sig":null,"attributes":[{"value":"/ Set the headers of this CSV parser manually as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146885,"byte_end":146946,"line_start":1438,"line_end":1438,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146951,"byte_end":146954,"line_start":1439,"line_end":1439,"column_start":5,"column_end":8}},{"value":"/ This overrides any other setting (including `set_headers`). Any","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":146959,"byte_end":147026,"line_start":1440,"line_end":1440,"column_start":5,"column_end":72}},{"value":"/ automatic detection of headers is disabled. This may be called at any","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147031,"byte_end":147104,"line_start":1441,"line_end":1441,"column_start":5,"column_end":78}},{"value":"/ time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147109,"byte_end":147118,"line_start":1442,"line_end":1442,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147123,"byte_end":147126,"line_start":1443,"line_end":1443,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147131,"byte_end":147144,"line_start":1444,"line_end":1444,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147149,"byte_end":147152,"line_start":1445,"line_end":1445,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147157,"byte_end":147164,"line_start":1446,"line_end":1446,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147169,"byte_end":147195,"line_start":1447,"line_end":1447,"column_start":5,"column_end":31}},{"value":"/ use csv::{Reader, ByteRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147200,"byte_end":147234,"line_start":1448,"line_end":1448,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147239,"byte_end":147242,"line_start":1449,"line_end":1449,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147247,"byte_end":147286,"line_start":1450,"line_end":1450,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147291,"byte_end":147339,"line_start":1451,"line_end":1451,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147344,"byte_end":147365,"line_start":1452,"line_end":1452,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147370,"byte_end":147390,"line_start":1453,"line_end":1453,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147395,"byte_end":147427,"line_start":1454,"line_end":1454,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147432,"byte_end":147438,"line_start":1455,"line_end":1455,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147443,"byte_end":147502,"line_start":1456,"line_end":1456,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147507,"byte_end":147510,"line_start":1457,"line_end":1457,"column_start":5,"column_end":8}},{"value":"/     assert_eq!(rdr.byte_headers()?, vec![\"city\", \"country\", \"pop\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147515,"byte_end":147587,"line_start":1458,"line_end":1458,"column_start":5,"column_end":77}},{"value":"/     rdr.set_byte_headers(ByteRecord::from(vec![\"a\", \"b\", \"c\"]));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147592,"byte_end":147660,"line_start":1459,"line_end":1459,"column_start":5,"column_end":73}},{"value":"/     assert_eq!(rdr.byte_headers()?, vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147665,"byte_end":147726,"line_start":1460,"line_end":1460,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147731,"byte_end":147734,"line_start":1461,"line_end":1461,"column_start":5,"column_end":8}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147739,"byte_end":147753,"line_start":1462,"line_end":1462,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147758,"byte_end":147763,"line_start":1463,"line_end":1463,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":147768,"byte_end":147775,"line_start":1464,"line_end":1464,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":515},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150399,"byte_end":150410,"line_start":1536,"line_end":1536,"column_start":12,"column_end":23},"name":"read_record","qualname":"<Reader<R>>::read_record","value":"pub fn read_record(&mut Self, &mut StringRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given record. Returns false when no more\n records could be read.","sig":null,"attributes":[{"value":"/ Read a single row into the given record. Returns false when no more","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":148993,"byte_end":149064,"line_start":1499,"line_end":1499,"column_start":5,"column_end":76}},{"value":"/ records could be read.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149069,"byte_end":149095,"line_start":1500,"line_end":1500,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149100,"byte_end":149103,"line_start":1501,"line_end":1501,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149108,"byte_end":149176,"line_start":1502,"line_end":1502,"column_start":5,"column_end":73}},{"value":"/ default), then this will never read the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149181,"byte_end":149238,"line_start":1503,"line_end":1503,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149243,"byte_end":149246,"line_start":1504,"line_end":1504,"column_start":5,"column_end":8}},{"value":"/ This method is useful when you want to read records as fast as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149251,"byte_end":149317,"line_start":1505,"line_end":1505,"column_start":5,"column_end":71}},{"value":"/ as possible. It's less ergonomic than an iterator, but it permits the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149322,"byte_end":149395,"line_start":1506,"line_end":1506,"column_start":5,"column_end":78}},{"value":"/ caller to reuse the `StringRecord` allocation, which usually results","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149400,"byte_end":149472,"line_start":1507,"line_end":1507,"column_start":5,"column_end":77}},{"value":"/ in higher throughput.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149477,"byte_end":149502,"line_start":1508,"line_end":1508,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149507,"byte_end":149510,"line_start":1509,"line_end":1509,"column_start":5,"column_end":8}},{"value":"/ Records read via this method are guaranteed to have a position set","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149515,"byte_end":149585,"line_start":1510,"line_end":1510,"column_start":5,"column_end":75}},{"value":"/ on them, even if the reader is at EOF or if an error is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149590,"byte_end":149659,"line_start":1511,"line_end":1511,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149664,"byte_end":149667,"line_start":1512,"line_end":1512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149672,"byte_end":149685,"line_start":1513,"line_end":1513,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149690,"byte_end":149693,"line_start":1514,"line_end":1514,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149698,"byte_end":149705,"line_start":1515,"line_end":1515,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149710,"byte_end":149736,"line_start":1516,"line_end":1516,"column_start":5,"column_end":31}},{"value":"/ use csv::{Reader, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149741,"byte_end":149777,"line_start":1517,"line_end":1517,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149782,"byte_end":149785,"line_start":1518,"line_end":1518,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149790,"byte_end":149829,"line_start":1519,"line_end":1519,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149834,"byte_end":149882,"line_start":1520,"line_end":1520,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149887,"byte_end":149908,"line_start":1521,"line_end":1521,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149913,"byte_end":149933,"line_start":1522,"line_end":1522,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149938,"byte_end":149970,"line_start":1523,"line_end":1523,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149975,"byte_end":149981,"line_start":1524,"line_end":1524,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":149986,"byte_end":150045,"line_start":1525,"line_end":1525,"column_start":5,"column_end":64}},{"value":"/     let mut record = StringRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150050,"byte_end":150095,"line_start":1526,"line_end":1526,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150100,"byte_end":150103,"line_start":1527,"line_end":1527,"column_start":5,"column_end":8}},{"value":"/     if rdr.read_record(&mut record)? {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150108,"byte_end":150150,"line_start":1528,"line_end":1528,"column_start":5,"column_end":47}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150155,"byte_end":150230,"line_start":1529,"line_end":1529,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150235,"byte_end":150253,"line_start":1530,"line_end":1530,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150258,"byte_end":150274,"line_start":1531,"line_end":1531,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150279,"byte_end":150351,"line_start":1532,"line_end":1532,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150356,"byte_end":150365,"line_start":1533,"line_end":1533,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150370,"byte_end":150375,"line_start":1534,"line_end":1534,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150380,"byte_end":150387,"line_start":1535,"line_end":1535,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152200,"byte_end":152216,"line_start":1584,"line_end":1584,"column_start":12,"column_end":28},"name":"read_byte_record","qualname":"<Reader<R>>::read_byte_record","value":"pub fn read_byte_record(&mut Self, &mut ByteRecord) -> Result<bool>","parent":null,"children":[],"decl_id":null,"docs":" Read a single row into the given byte record. Returns false when no\n more records could be read.","sig":null,"attributes":[{"value":"/ Read a single row into the given byte record. Returns false when no","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150790,"byte_end":150861,"line_start":1547,"line_end":1547,"column_start":5,"column_end":76}},{"value":"/ more records could be read.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150866,"byte_end":150897,"line_start":1548,"line_end":1548,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150902,"byte_end":150905,"line_start":1549,"line_end":1549,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` was enabled via a `ReaderBuilder` (which is the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150910,"byte_end":150978,"line_start":1550,"line_end":1550,"column_start":5,"column_end":73}},{"value":"/ default), then this will never read the first record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":150983,"byte_end":151040,"line_start":1551,"line_end":1551,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151045,"byte_end":151048,"line_start":1552,"line_end":1552,"column_start":5,"column_end":8}},{"value":"/ This method is useful when you want to read records as fast as","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151053,"byte_end":151119,"line_start":1553,"line_end":1553,"column_start":5,"column_end":71}},{"value":"/ as possible. It's less ergonomic than an iterator, but it permits the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151124,"byte_end":151197,"line_start":1554,"line_end":1554,"column_start":5,"column_end":78}},{"value":"/ caller to reuse the `ByteRecord` allocation, which usually results","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151202,"byte_end":151272,"line_start":1555,"line_end":1555,"column_start":5,"column_end":75}},{"value":"/ in higher throughput.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151277,"byte_end":151302,"line_start":1556,"line_end":1556,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151307,"byte_end":151310,"line_start":1557,"line_end":1557,"column_start":5,"column_end":8}},{"value":"/ Records read via this method are guaranteed to have a position set","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151315,"byte_end":151385,"line_start":1558,"line_end":1558,"column_start":5,"column_end":75}},{"value":"/ on them, even if the reader is at EOF or if an error is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151390,"byte_end":151459,"line_start":1559,"line_end":1559,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151464,"byte_end":151467,"line_start":1560,"line_end":1560,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151472,"byte_end":151485,"line_start":1561,"line_end":1561,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151490,"byte_end":151493,"line_start":1562,"line_end":1562,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151498,"byte_end":151505,"line_start":1563,"line_end":1563,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151510,"byte_end":151536,"line_start":1564,"line_end":1564,"column_start":5,"column_end":31}},{"value":"/ use csv::{ByteRecord, Reader};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151541,"byte_end":151575,"line_start":1565,"line_end":1565,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151580,"byte_end":151583,"line_start":1566,"line_end":1566,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151588,"byte_end":151627,"line_start":1567,"line_end":1567,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151632,"byte_end":151680,"line_start":1568,"line_end":1568,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151685,"byte_end":151706,"line_start":1569,"line_end":1569,"column_start":5,"column_end":26}},{"value":"/ city,country,pop","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151711,"byte_end":151731,"line_start":1570,"line_end":1570,"column_start":5,"column_end":25}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151736,"byte_end":151768,"line_start":1571,"line_end":1571,"column_start":5,"column_end":37}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151773,"byte_end":151779,"line_start":1572,"line_end":1572,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151784,"byte_end":151843,"line_start":1573,"line_end":1573,"column_start":5,"column_end":64}},{"value":"/     let mut record = ByteRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151848,"byte_end":151891,"line_start":1574,"line_end":1574,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151896,"byte_end":151899,"line_start":1575,"line_end":1575,"column_start":5,"column_end":8}},{"value":"/     if rdr.read_byte_record(&mut record)? {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151904,"byte_end":151951,"line_start":1576,"line_end":1576,"column_start":5,"column_end":52}},{"value":"/         assert_eq!(record, vec![\"Boston\", \"United States\", \"4628910\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":151956,"byte_end":152031,"line_start":1577,"line_end":1577,"column_start":5,"column_end":80}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152036,"byte_end":152054,"line_start":1578,"line_end":1578,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152059,"byte_end":152075,"line_start":1579,"line_end":1579,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152080,"byte_end":152152,"line_start":1580,"line_end":1580,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152157,"byte_end":152166,"line_start":1581,"line_end":1581,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152171,"byte_end":152176,"line_start":1582,"line_end":1582,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":152181,"byte_end":152188,"line_start":1583,"line_end":1583,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":519},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157031,"byte_end":157039,"line_start":1721,"line_end":1721,"column_start":12,"column_end":20},"name":"position","qualname":"<Reader<R>>::position","value":"pub fn position(&Self) -> &Position","parent":null,"children":[],"decl_id":null,"docs":" Return the current position of this CSV reader.","sig":null,"attributes":[{"value":"/ Return the current position of this CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155628,"byte_end":155679,"line_start":1681,"line_end":1681,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155684,"byte_end":155687,"line_start":1682,"line_end":1682,"column_start":5,"column_end":8}},{"value":"/ The byte offset in the position returned can be used to `seek` this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155692,"byte_end":155763,"line_start":1683,"line_end":1683,"column_start":5,"column_end":76}},{"value":"/ reader. In particular, seeking to a position returned here on the same","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155768,"byte_end":155842,"line_start":1684,"line_end":1684,"column_start":5,"column_end":79}},{"value":"/ data will result in parsing the same subsequent record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155847,"byte_end":155906,"line_start":1685,"line_end":1685,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155911,"byte_end":155914,"line_start":1686,"line_end":1686,"column_start":5,"column_end":8}},{"value":"/ # Example: reading the position","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155919,"byte_end":155954,"line_start":1687,"line_end":1687,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155959,"byte_end":155962,"line_start":1688,"line_end":1688,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155967,"byte_end":155974,"line_start":1689,"line_end":1689,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":155979,"byte_end":156005,"line_start":1690,"line_end":1690,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156010,"byte_end":156026,"line_start":1691,"line_end":1691,"column_start":5,"column_end":21}},{"value":"/ use csv::{Reader, Position};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156031,"byte_end":156063,"line_start":1692,"line_end":1692,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156068,"byte_end":156071,"line_start":1693,"line_end":1693,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156076,"byte_end":156115,"line_start":1694,"line_end":1694,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156120,"byte_end":156168,"line_start":1695,"line_end":1695,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156173,"byte_end":156194,"line_start":1696,"line_end":1696,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156199,"byte_end":156224,"line_start":1697,"line_end":1697,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156229,"byte_end":156261,"line_start":1698,"line_end":1698,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156266,"byte_end":156297,"line_start":1699,"line_end":1699,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156302,"byte_end":156308,"line_start":1700,"line_end":1700,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(io::Cursor::new(data));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156313,"byte_end":156374,"line_start":1701,"line_end":1701,"column_start":5,"column_end":66}},{"value":"/     let mut iter = rdr.into_records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156379,"byte_end":156421,"line_start":1702,"line_end":1702,"column_start":5,"column_end":47}},{"value":"/     let mut pos = Position::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156426,"byte_end":156464,"line_start":1703,"line_end":1703,"column_start":5,"column_end":43}},{"value":"/     loop {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156469,"byte_end":156483,"line_start":1704,"line_end":1704,"column_start":5,"column_end":19}},{"value":"/         // Read the position immediately before each record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156488,"byte_end":156552,"line_start":1705,"line_end":1705,"column_start":5,"column_end":69}},{"value":"/         let next_pos = iter.reader().position().clone();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156557,"byte_end":156617,"line_start":1706,"line_end":1706,"column_start":5,"column_end":65}},{"value":"/         if iter.next().is_none() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156622,"byte_end":156660,"line_start":1707,"line_end":1707,"column_start":5,"column_end":43}},{"value":"/             break;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156665,"byte_end":156687,"line_start":1708,"line_end":1708,"column_start":5,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156692,"byte_end":156705,"line_start":1709,"line_end":1709,"column_start":5,"column_end":18}},{"value":"/         pos = next_pos;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156710,"byte_end":156737,"line_start":1710,"line_end":1710,"column_start":5,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156742,"byte_end":156751,"line_start":1711,"line_end":1711,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156756,"byte_end":156759,"line_start":1712,"line_end":1712,"column_start":5,"column_end":8}},{"value":"/     // `pos` should now be the position immediately before the last","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156764,"byte_end":156835,"line_start":1713,"line_end":1713,"column_start":5,"column_end":76}},{"value":"/     // record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156840,"byte_end":156858,"line_start":1714,"line_end":1714,"column_start":5,"column_end":23}},{"value":"/     assert_eq!(pos.byte(), 51);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156863,"byte_end":156898,"line_start":1715,"line_end":1715,"column_start":5,"column_end":40}},{"value":"/     assert_eq!(pos.line(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156903,"byte_end":156937,"line_start":1716,"line_end":1716,"column_start":5,"column_end":39}},{"value":"/     assert_eq!(pos.record(), 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156942,"byte_end":156978,"line_start":1717,"line_end":1717,"column_start":5,"column_end":41}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":156983,"byte_end":156997,"line_start":1718,"line_end":1718,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157002,"byte_end":157007,"line_start":1719,"line_end":1719,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157012,"byte_end":157019,"line_start":1720,"line_end":1720,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157971,"byte_end":157978,"line_start":1753,"line_end":1753,"column_start":12,"column_end":19},"name":"is_done","qualname":"<Reader<R>>::is_done","value":"pub fn is_done(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been exhausted.","sig":null,"attributes":[{"value":"/ Returns true if and only if this reader has been exhausted.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157101,"byte_end":157164,"line_start":1725,"line_end":1725,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157169,"byte_end":157172,"line_start":1726,"line_end":1726,"column_start":5,"column_end":8}},{"value":"/ When this returns true, no more records can be read from this reader","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157177,"byte_end":157249,"line_start":1727,"line_end":1727,"column_start":5,"column_end":77}},{"value":"/ (unless it has been seeked to another position).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157254,"byte_end":157306,"line_start":1728,"line_end":1728,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157311,"byte_end":157314,"line_start":1729,"line_end":1729,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157319,"byte_end":157332,"line_start":1730,"line_end":1730,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157337,"byte_end":157340,"line_start":1731,"line_end":1731,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157345,"byte_end":157352,"line_start":1732,"line_end":1732,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157357,"byte_end":157383,"line_start":1733,"line_end":1733,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157388,"byte_end":157404,"line_start":1734,"line_end":1734,"column_start":5,"column_end":21}},{"value":"/ use csv::{Reader, Position};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157409,"byte_end":157441,"line_start":1735,"line_end":1735,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157446,"byte_end":157449,"line_start":1736,"line_end":1736,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157454,"byte_end":157493,"line_start":1737,"line_end":1737,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157498,"byte_end":157546,"line_start":1738,"line_end":1738,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157551,"byte_end":157572,"line_start":1739,"line_end":1739,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157577,"byte_end":157602,"line_start":1740,"line_end":1740,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157607,"byte_end":157639,"line_start":1741,"line_end":1741,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157644,"byte_end":157675,"line_start":1742,"line_end":1742,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157680,"byte_end":157686,"line_start":1743,"line_end":1743,"column_start":5,"column_end":11}},{"value":"/     let mut rdr = Reader::from_reader(io::Cursor::new(data));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157691,"byte_end":157756,"line_start":1744,"line_end":1744,"column_start":5,"column_end":70}},{"value":"/     assert!(!rdr.is_done());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157761,"byte_end":157793,"line_start":1745,"line_end":1745,"column_start":5,"column_end":37}},{"value":"/     for result in rdr.records() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157798,"byte_end":157835,"line_start":1746,"line_end":1746,"column_start":5,"column_end":42}},{"value":"/         let _ = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157840,"byte_end":157868,"line_start":1747,"line_end":1747,"column_start":5,"column_end":33}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157873,"byte_end":157882,"line_start":1748,"line_end":1748,"column_start":5,"column_end":14}},{"value":"/     assert!(rdr.is_done());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157887,"byte_end":157918,"line_start":1749,"line_end":1749,"column_start":5,"column_end":36}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157923,"byte_end":157937,"line_start":1750,"line_end":1750,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157942,"byte_end":157947,"line_start":1751,"line_end":1751,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":157952,"byte_end":157959,"line_start":1752,"line_end":1752,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":521},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158189,"byte_end":158200,"line_start":1759,"line_end":1759,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<Reader<R>>::has_headers","value":"pub fn has_headers(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this reader has been configured to\n interpret the first record as a header record.\n","sig":null,"attributes":[{"value":"/ Returns true if and only if this reader has been configured to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158056,"byte_end":158122,"line_start":1757,"line_end":1757,"column_start":5,"column_end":71}},{"value":"/ interpret the first record as a header record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158127,"byte_end":158177,"line_start":1758,"line_end":1758,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158321,"byte_end":158328,"line_start":1764,"line_end":1764,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<Reader<R>>::get_ref","value":"pub fn get_ref(&Self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158260,"byte_end":158309,"line_start":1763,"line_end":1763,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":523},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158451,"byte_end":158458,"line_start":1769,"line_end":1769,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Reader<R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying reader.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158382,"byte_end":158439,"line_start":1768,"line_end":1768,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158691,"byte_end":158701,"line_start":1777,"line_end":1777,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwraps this CSV reader, returning the underlying reader.","sig":null,"attributes":[{"value":"/ Unwraps this CSV reader, returning the underlying reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158520,"byte_end":158581,"line_start":1773,"line_end":1773,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158586,"byte_end":158589,"line_start":1774,"line_end":1774,"column_start":5,"column_end":8}},{"value":"/ Note that any leftover data inside this reader's internal buffer is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158594,"byte_end":158665,"line_start":1775,"line_end":1775,"column_start":5,"column_end":76}},{"value":"/ lost.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158670,"byte_end":158679,"line_start":1776,"line_end":1776,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161345,"byte_end":161349,"line_start":1845,"line_end":1845,"column_start":12,"column_end":16},"name":"seek","qualname":"<Reader<R>>::seek","value":"pub fn seek(&mut Self, Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Seeks the underlying reader to the position given.","sig":null,"attributes":[{"value":"/ Seeks the underlying reader to the position given.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158799,"byte_end":158853,"line_start":1783,"line_end":1783,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158858,"byte_end":158861,"line_start":1784,"line_end":1784,"column_start":5,"column_end":8}},{"value":"/ This comes with a few caveats:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158866,"byte_end":158900,"line_start":1785,"line_end":1785,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158905,"byte_end":158908,"line_start":1786,"line_end":1786,"column_start":5,"column_end":8}},{"value":"/ * Any internal buffer associated with this reader is cleared.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158913,"byte_end":158978,"line_start":1787,"line_end":1787,"column_start":5,"column_end":70}},{"value":"/ * If the given position does not correspond to a position immediately","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158983,"byte_end":159056,"line_start":1788,"line_end":1788,"column_start":5,"column_end":78}},{"value":"/   before the start of a record, then the behavior of this reader is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159061,"byte_end":159132,"line_start":1789,"line_end":1789,"column_start":5,"column_end":76}},{"value":"/   unspecified.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159137,"byte_end":159155,"line_start":1790,"line_end":1790,"column_start":5,"column_end":23}},{"value":"/ * Any special logic that skips the first record in the CSV reader","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159160,"byte_end":159229,"line_start":1791,"line_end":1791,"column_start":5,"column_end":74}},{"value":"/   when reading or iterating over records is disabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159234,"byte_end":159291,"line_start":1792,"line_end":1792,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159296,"byte_end":159299,"line_start":1793,"line_end":1793,"column_start":5,"column_end":8}},{"value":"/ If the given position has a byte offset equivalent to the current","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159304,"byte_end":159373,"line_start":1794,"line_end":1794,"column_start":5,"column_end":74}},{"value":"/ position, then no seeking is performed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159378,"byte_end":159421,"line_start":1795,"line_end":1795,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159426,"byte_end":159429,"line_start":1796,"line_end":1796,"column_start":5,"column_end":8}},{"value":"/ If the header row has not already been read, then this will attempt","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159434,"byte_end":159505,"line_start":1797,"line_end":1797,"column_start":5,"column_end":76}},{"value":"/ to read the header row before seeking. Therefore, it is possible that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159510,"byte_end":159583,"line_start":1798,"line_end":1798,"column_start":5,"column_end":78}},{"value":"/ this returns an error associated with reading CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159588,"byte_end":159647,"line_start":1799,"line_end":1799,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159652,"byte_end":159655,"line_start":1800,"line_end":1800,"column_start":5,"column_end":8}},{"value":"/ Note that seeking is performed based only on the byte offset in the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159660,"byte_end":159731,"line_start":1801,"line_end":1801,"column_start":5,"column_end":76}},{"value":"/ given position. Namely, the record or line numbers in the position may","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159736,"byte_end":159810,"line_start":1802,"line_end":1802,"column_start":5,"column_end":79}},{"value":"/ be incorrect, but this will cause any future position generated by","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159815,"byte_end":159885,"line_start":1803,"line_end":1803,"column_start":5,"column_end":75}},{"value":"/ this CSV reader to be similarly incorrect.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159890,"byte_end":159936,"line_start":1804,"line_end":1804,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159941,"byte_end":159944,"line_start":1805,"line_end":1805,"column_start":5,"column_end":8}},{"value":"/ # Example: seek to parse a record twice","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159949,"byte_end":159992,"line_start":1806,"line_end":1806,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":159997,"byte_end":160000,"line_start":1807,"line_end":1807,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160005,"byte_end":160012,"line_start":1808,"line_end":1808,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160017,"byte_end":160043,"line_start":1809,"line_end":1809,"column_start":5,"column_end":31}},{"value":"/ use std::io;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160048,"byte_end":160064,"line_start":1810,"line_end":1810,"column_start":5,"column_end":21}},{"value":"/ use csv::{Reader, Position};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160069,"byte_end":160101,"line_start":1811,"line_end":1811,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160106,"byte_end":160109,"line_start":1812,"line_end":1812,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160114,"byte_end":160153,"line_start":1813,"line_end":1813,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160158,"byte_end":160206,"line_start":1814,"line_end":1814,"column_start":5,"column_end":53}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160211,"byte_end":160232,"line_start":1815,"line_end":1815,"column_start":5,"column_end":26}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160237,"byte_end":160262,"line_start":1816,"line_end":1816,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160267,"byte_end":160299,"line_start":1817,"line_end":1817,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160304,"byte_end":160335,"line_start":1818,"line_end":1818,"column_start":5,"column_end":36}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160340,"byte_end":160346,"line_start":1819,"line_end":1819,"column_start":5,"column_end":11}},{"value":"/     let rdr = Reader::from_reader(io::Cursor::new(data));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160351,"byte_end":160412,"line_start":1820,"line_end":1820,"column_start":5,"column_end":66}},{"value":"/     let mut iter = rdr.into_records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160417,"byte_end":160459,"line_start":1821,"line_end":1821,"column_start":5,"column_end":47}},{"value":"/     let mut pos = Position::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160464,"byte_end":160502,"line_start":1822,"line_end":1822,"column_start":5,"column_end":43}},{"value":"/     loop {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160507,"byte_end":160521,"line_start":1823,"line_end":1823,"column_start":5,"column_end":19}},{"value":"/         // Read the position immediately before each record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160526,"byte_end":160590,"line_start":1824,"line_end":1824,"column_start":5,"column_end":69}},{"value":"/         let next_pos = iter.reader().position().clone();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160595,"byte_end":160655,"line_start":1825,"line_end":1825,"column_start":5,"column_end":65}},{"value":"/         if iter.next().is_none() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160660,"byte_end":160698,"line_start":1826,"line_end":1826,"column_start":5,"column_end":43}},{"value":"/             break;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160703,"byte_end":160725,"line_start":1827,"line_end":1827,"column_start":5,"column_end":27}},{"value":"/         }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160730,"byte_end":160743,"line_start":1828,"line_end":1828,"column_start":5,"column_end":18}},{"value":"/         pos = next_pos;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160748,"byte_end":160775,"line_start":1829,"line_end":1829,"column_start":5,"column_end":32}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160780,"byte_end":160789,"line_start":1830,"line_end":1830,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160794,"byte_end":160797,"line_start":1831,"line_end":1831,"column_start":5,"column_end":8}},{"value":"/     // Now seek the reader back to `pos`. This will let us read the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160802,"byte_end":160873,"line_start":1832,"line_end":1832,"column_start":5,"column_end":76}},{"value":"/     // last record again.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160878,"byte_end":160907,"line_start":1833,"line_end":1833,"column_start":5,"column_end":34}},{"value":"/     iter.reader_mut().seek(pos)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160912,"byte_end":160949,"line_start":1834,"line_end":1834,"column_start":5,"column_end":42}},{"value":"/     let mut iter = iter.into_reader().into_records();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":160954,"byte_end":161011,"line_start":1835,"line_end":1835,"column_start":5,"column_end":62}},{"value":"/     if let Some(result) = iter.next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161016,"byte_end":161059,"line_start":1836,"line_end":1836,"column_start":5,"column_end":48}},{"value":"/         let record = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161064,"byte_end":161097,"line_start":1837,"line_end":1837,"column_start":5,"column_end":38}},{"value":"/         assert_eq!(record, vec![\"Concord\", \"United States\", \"42695\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161102,"byte_end":161176,"line_start":1838,"line_end":1838,"column_start":5,"column_end":79}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161181,"byte_end":161199,"line_start":1839,"line_end":1839,"column_start":5,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161204,"byte_end":161220,"line_start":1840,"line_end":1840,"column_start":5,"column_end":21}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161225,"byte_end":161297,"line_start":1841,"line_end":1841,"column_start":5,"column_end":77}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161302,"byte_end":161311,"line_start":1842,"line_end":1842,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161316,"byte_end":161321,"line_start":1843,"line_end":1843,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161326,"byte_end":161333,"line_start":1844,"line_end":1844,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162505,"byte_end":162513,"line_start":1872,"line_end":1872,"column_start":12,"column_end":20},"name":"seek_raw","qualname":"<Reader<R>>::seek_raw","value":"pub fn seek_raw(&mut Self, io::SeekFrom, Position) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" This is like `seek`, but provides direct control over how the seeking\n operation is performed via `io::SeekFrom`.","sig":null,"attributes":[{"value":"/ This is like `seek`, but provides direct control over how the seeking","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161779,"byte_end":161852,"line_start":1859,"line_end":1859,"column_start":5,"column_end":78}},{"value":"/ operation is performed via `io::SeekFrom`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161857,"byte_end":161903,"line_start":1860,"line_end":1860,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161908,"byte_end":161911,"line_start":1861,"line_end":1861,"column_start":5,"column_end":8}},{"value":"/ The `pos` position given *should* correspond the position indicated","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161916,"byte_end":161987,"line_start":1862,"line_end":1862,"column_start":5,"column_end":76}},{"value":"/ by `seek_from`, but there is no requirement. If the `pos` position","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":161992,"byte_end":162062,"line_start":1863,"line_end":1863,"column_start":5,"column_end":75}},{"value":"/ given is incorrect, then the position information returned by this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162067,"byte_end":162137,"line_start":1864,"line_end":1864,"column_start":5,"column_end":75}},{"value":"/ reader will be similarly incorrect.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162142,"byte_end":162181,"line_start":1865,"line_end":1865,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162186,"byte_end":162189,"line_start":1866,"line_end":1866,"column_start":5,"column_end":8}},{"value":"/ If the header row has not already been read, then this will attempt","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162194,"byte_end":162265,"line_start":1867,"line_end":1867,"column_start":5,"column_end":76}},{"value":"/ to read the header row before seeking. Therefore, it is possible that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162270,"byte_end":162343,"line_start":1868,"line_end":1868,"column_start":5,"column_end":78}},{"value":"/ this returns an error associated with reading CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162348,"byte_end":162407,"line_start":1869,"line_end":1869,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162412,"byte_end":162415,"line_start":1870,"line_end":1870,"column_start":5,"column_end":8}},{"value":"/ Unlike `seek`, this will always cause an actual seek to be performed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162420,"byte_end":162493,"line_start":1871,"line_end":1871,"column_start":5,"column_end":78}}]},{"kind":"Struct","id":{"krate":0,"index":531},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":163913,"byte_end":163939,"line_start":1915,"line_end":1915,"column_start":12,"column_end":38},"name":"DeserializeRecordsIntoIter","qualname":"::reader::DeserializeRecordsIntoIter","value":"DeserializeRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536},{"krate":0,"index":537}],"decl_id":null,"docs":" An owned iterator over deserialized records.","sig":null,"attributes":[{"value":"/ An owned iterator over deserialized records.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":163698,"byte_end":163746,"line_start":1911,"line_end":1911,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":163747,"byte_end":163750,"line_start":1912,"line_end":1912,"column_start":1,"column_end":4}},{"value":"/ The type parameter `R` refers to the underlying `io::Read` type, and `D`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":163751,"byte_end":163827,"line_start":1913,"line_end":1913,"column_start":1,"column_end":77}},{"value":"/ refers to the type that this iterator will deserialize a record into.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":163828,"byte_end":163901,"line_start":1914,"line_end":1914,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164587,"byte_end":164593,"line_start":1938,"line_end":1938,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164523,"byte_end":164575,"line_start":1937,"line_end":1937,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":543},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164718,"byte_end":164728,"line_start":1943,"line_end":1943,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIntoIter<R, D>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164646,"byte_end":164706,"line_start":1942,"line_end":1942,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164865,"byte_end":164876,"line_start":1948,"line_end":1948,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<DeserializeRecordsIntoIter<R, D>>::into_reader","value":"pub fn into_reader(Self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Drop this iterator and return the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164793,"byte_end":164853,"line_start":1947,"line_end":1947,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":550},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165614,"byte_end":165636,"line_start":1973,"line_end":1973,"column_start":12,"column_end":34},"name":"DeserializeRecordsIter","qualname":"::reader::DeserializeRecordsIter","value":"DeserializeRecordsIter {  }","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557}],"decl_id":null,"docs":" A borrowed iterator over deserialized records.","sig":null,"attributes":[{"value":"/ A borrowed iterator over deserialized records.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165306,"byte_end":165356,"line_start":1967,"line_end":1967,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165357,"byte_end":165360,"line_start":1968,"line_end":1968,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'r` refers to the lifetime of the underlying","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165361,"byte_end":165433,"line_start":1969,"line_end":1969,"column_start":1,"column_end":73}},{"value":"/ CSV `Reader`. The type parameter `R` refers to the underlying `io::Read`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165434,"byte_end":165510,"line_start":1970,"line_end":1970,"column_start":1,"column_end":77}},{"value":"/ type, and `D` refers to the type that this iterator will deserialize a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165511,"byte_end":165585,"line_start":1971,"line_end":1971,"column_start":1,"column_end":75}},{"value":"/ record into.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165586,"byte_end":165602,"line_start":1972,"line_end":1972,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166304,"byte_end":166310,"line_start":1996,"line_end":1996,"column_start":12,"column_end":18},"name":"reader","qualname":"<DeserializeRecordsIter>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166240,"byte_end":166292,"line_start":1995,"line_end":1995,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166435,"byte_end":166445,"line_start":2001,"line_end":2001,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<DeserializeRecordsIter>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166363,"byte_end":166423,"line_start":2000,"line_end":2000,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":571},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166952,"byte_end":166973,"line_start":2021,"line_end":2021,"column_start":12,"column_end":33},"name":"StringRecordsIntoIter","qualname":"::reader::StringRecordsIntoIter","value":"StringRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574}],"decl_id":null,"docs":" An owned iterator over records as strings.\n","sig":null,"attributes":[{"value":"/ An owned iterator over records as strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166894,"byte_end":166940,"line_start":2020,"line_end":2020,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167271,"byte_end":167277,"line_start":2032,"line_end":2032,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIntoIter<R>>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167207,"byte_end":167259,"line_start":2031,"line_end":2031,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167402,"byte_end":167412,"line_start":2037,"line_end":2037,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIntoIter<R>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167330,"byte_end":167390,"line_start":2036,"line_end":2036,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167549,"byte_end":167560,"line_start":2042,"line_end":2042,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<StringRecordsIntoIter<R>>::into_reader","value":"pub fn into_reader(Self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Drop this iterator and return the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167477,"byte_end":167537,"line_start":2041,"line_end":2041,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":585},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168111,"byte_end":168128,"line_start":2063,"line_end":2063,"column_start":12,"column_end":29},"name":"StringRecordsIter","qualname":"::reader::StringRecordsIter","value":"StringRecordsIter {  }","parent":null,"children":[{"krate":0,"index":588},{"krate":0,"index":589}],"decl_id":null,"docs":" A borrowed iterator over records as strings.","sig":null,"attributes":[{"value":"/ A borrowed iterator over records as strings.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167956,"byte_end":168004,"line_start":2059,"line_end":2059,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168005,"byte_end":168008,"line_start":2060,"line_end":2060,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'r` refers to the lifetime of the underlying","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168009,"byte_end":168081,"line_start":2061,"line_end":2061,"column_start":1,"column_end":73}},{"value":"/ CSV `Reader`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168082,"byte_end":168099,"line_start":2062,"line_end":2062,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168450,"byte_end":168456,"line_start":2074,"line_end":2074,"column_start":12,"column_end":18},"name":"reader","qualname":"<StringRecordsIter>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168386,"byte_end":168438,"line_start":2073,"line_end":2073,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168581,"byte_end":168591,"line_start":2079,"line_end":2079,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<StringRecordsIter>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168509,"byte_end":168569,"line_start":2078,"line_end":2078,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":601},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169066,"byte_end":169085,"line_start":2097,"line_end":2097,"column_start":12,"column_end":31},"name":"ByteRecordsIntoIter","qualname":"::reader::ByteRecordsIntoIter","value":"ByteRecordsIntoIter {  }","parent":null,"children":[{"krate":0,"index":603},{"krate":0,"index":604}],"decl_id":null,"docs":" An owned iterator over records as raw bytes.\n","sig":null,"attributes":[{"value":"/ An owned iterator over records as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169006,"byte_end":169054,"line_start":2096,"line_end":2096,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169373,"byte_end":169379,"line_start":2108,"line_end":2108,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIntoIter<R>>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169309,"byte_end":169361,"line_start":2107,"line_end":2107,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169504,"byte_end":169514,"line_start":2113,"line_end":2113,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIntoIter<R>>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169432,"byte_end":169492,"line_start":2112,"line_end":2112,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169651,"byte_end":169662,"line_start":2118,"line_end":2118,"column_start":12,"column_end":23},"name":"into_reader","qualname":"<ByteRecordsIntoIter<R>>::into_reader","value":"pub fn into_reader(Self) -> Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Drop this iterator and return the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Drop this iterator and return the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169579,"byte_end":169639,"line_start":2117,"line_end":2117,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":615},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170214,"byte_end":170229,"line_start":2139,"line_end":2139,"column_start":12,"column_end":27},"name":"ByteRecordsIter","qualname":"::reader::ByteRecordsIter","value":"ByteRecordsIter {  }","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"decl_id":null,"docs":" A borrowed iterator over records as raw bytes.","sig":null,"attributes":[{"value":"/ A borrowed iterator over records as raw bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170057,"byte_end":170107,"line_start":2135,"line_end":2135,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170108,"byte_end":170111,"line_start":2136,"line_end":2136,"column_start":1,"column_end":4}},{"value":"/ The lifetime parameter `'r` refers to the lifetime of the underlying","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170112,"byte_end":170184,"line_start":2137,"line_end":2137,"column_start":1,"column_end":73}},{"value":"/ CSV `Reader`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170185,"byte_end":170202,"line_start":2138,"line_end":2138,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170541,"byte_end":170547,"line_start":2150,"line_end":2150,"column_start":12,"column_end":18},"name":"reader","qualname":"<ByteRecordsIter>::reader","value":"pub fn reader(&Self) -> &Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170477,"byte_end":170529,"line_start":2149,"line_end":2149,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170672,"byte_end":170682,"line_start":2155,"line_end":2155,"column_start":12,"column_end":22},"name":"reader_mut","qualname":"<ByteRecordsIter>::reader_mut","value":"pub fn reader_mut(&mut Self) -> &mut Reader<R>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to the underlying CSV reader.\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to the underlying CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170600,"byte_end":170660,"line_start":2154,"line_end":2154,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":1362},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225421,"byte_end":225433,"line_start":36,"line_end":36,"column_start":12,"column_end":24},"name":"StringRecord","qualname":"::string_record::StringRecord","value":"","parent":null,"children":[],"decl_id":null,"docs":" A single CSV record stored as valid UTF-8 bytes.","sig":null,"attributes":[{"value":"/ A single CSV record stored as valid UTF-8 bytes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224180,"byte_end":224232,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224233,"byte_end":224236,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ A string record permits reading or writing CSV rows that are valid UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224237,"byte_end":224314,"line_start":17,"line_end":17,"column_start":1,"column_end":78}},{"value":"/ If string records are used to read CSV data that is not valid UTF-8, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224315,"byte_end":224392,"line_start":18,"line_end":18,"column_start":1,"column_end":78}},{"value":"/ the CSV reader will return an invalid UTF-8 error. If you do need to read","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224393,"byte_end":224470,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ possibly invalid UTF-8 data, then you should prefer using a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224471,"byte_end":224534,"line_start":20,"line_end":20,"column_start":1,"column_end":64}},{"value":"/ [`ByteRecord`](struct.ByteRecord.html),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224535,"byte_end":224578,"line_start":21,"line_end":21,"column_start":1,"column_end":44}},{"value":"/ since it makes no assumptions about UTF-8.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224579,"byte_end":224625,"line_start":22,"line_end":22,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224626,"byte_end":224629,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ If you are using the Serde (de)serialization APIs, then you probably never","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224630,"byte_end":224708,"line_start":24,"line_end":24,"column_start":1,"column_end":79}},{"value":"/ need to interact with a `ByteRecord` or a `StringRecord`. However, there","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224709,"byte_end":224785,"line_start":25,"line_end":25,"column_start":1,"column_end":77}},{"value":"/ are some circumstances in which you might need to use a raw record type","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224786,"byte_end":224861,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ while still using Serde. For example, if you need to deserialize possibly","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224862,"byte_end":224939,"line_start":27,"line_end":27,"column_start":1,"column_end":78}},{"value":"/ invalid UTF-8 fields, then you'll need to first read your record into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":224940,"byte_end":225015,"line_start":28,"line_end":28,"column_start":1,"column_end":76}},{"value":"/ `ByteRecord`, and then use `ByteRecord::deserialize` to run Serde. Another","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225016,"byte_end":225094,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ reason for using the raw record deserialization APIs is if you're using","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225095,"byte_end":225170,"line_start":30,"line_end":30,"column_start":1,"column_end":76}},{"value":"/ Serde to read into borrowed data such as a `&'a str` or a `&'a [u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225171,"byte_end":225244,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225245,"byte_end":225248,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Two `StringRecord`s are compared on the basis of their field data. Any","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225249,"byte_end":225323,"line_start":33,"line_end":33,"column_start":1,"column_end":75}},{"value":"/ position information associated with the records is ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225324,"byte_end":225388,"line_start":34,"line_end":34,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227130,"byte_end":227133,"line_start":106,"line_end":106,"column_start":12,"column_end":15},"name":"new","qualname":"<StringRecord>::new","value":"pub fn new() -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord`.","sig":null,"attributes":[{"value":"/ Create a new empty `StringRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226485,"byte_end":226523,"line_start":83,"line_end":83,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226528,"byte_end":226531,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Note that you may find the `StringRecord::from` constructor more","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226536,"byte_end":226604,"line_start":85,"line_end":85,"column_start":5,"column_end":73}},{"value":"/ convenient, which is provided by an impl on the `From` trait.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226609,"byte_end":226674,"line_start":86,"line_end":86,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226679,"byte_end":226682,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ # Example: create an empty record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226687,"byte_end":226724,"line_start":88,"line_end":88,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226729,"byte_end":226732,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226737,"byte_end":226744,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226749,"byte_end":226775,"line_start":91,"line_end":91,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226780,"byte_end":226783,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226788,"byte_end":226825,"line_start":93,"line_end":93,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226830,"byte_end":226862,"line_start":94,"line_end":94,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226867,"byte_end":226874,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226879,"byte_end":226882,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Example: initialize a record from a `Vec`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226887,"byte_end":226934,"line_start":97,"line_end":97,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226939,"byte_end":226942,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226947,"byte_end":226954,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226959,"byte_end":226985,"line_start":100,"line_end":100,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226990,"byte_end":226993,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226998,"byte_end":227055,"line_start":102,"line_end":102,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227060,"byte_end":227092,"line_start":103,"line_end":103,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227097,"byte_end":227104,"line_start":104,"line_end":104,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227109,"byte_end":227118,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227477,"byte_end":227490,"line_start":116,"line_end":116,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<StringRecord>::with_capacity","value":"pub fn with_capacity(usize, usize) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Create a new empty `StringRecord` with the given capacity.","sig":null,"attributes":[{"value":"/ Create a new empty `StringRecord` with the given capacity.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227205,"byte_end":227267,"line_start":110,"line_end":110,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227272,"byte_end":227275,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ `buffer` refers to the capacity of the buffer used to store the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227280,"byte_end":227347,"line_start":112,"line_end":112,"column_start":5,"column_end":72}},{"value":"/ actual row contents. `fields` refers to the number of fields one","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227352,"byte_end":227420,"line_start":113,"line_end":113,"column_start":5,"column_end":73}},{"value":"/ might expect to store.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227425,"byte_end":227451,"line_start":114,"line_end":114,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227456,"byte_end":227465,"line_start":115,"line_end":115,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228806,"byte_end":228822,"line_start":154,"line_end":154,"column_start":12,"column_end":28},"name":"from_byte_record","qualname":"<StringRecord>::from_byte_record","value":"pub fn from_byte_record(ByteRecord)\n-> result::Result<StringRecord, FromUtf8Error>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"/ Create a new `StringRecord` from a `ByteRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227614,"byte_end":227666,"line_start":120,"line_end":120,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227671,"byte_end":227674,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Note that this does UTF-8 validation. If the given `ByteRecord` does","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227679,"byte_end":227751,"line_start":122,"line_end":122,"column_start":5,"column_end":77}},{"value":"/ not contain valid UTF-8, then this returns an error. The error includes","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227756,"byte_end":227831,"line_start":123,"line_end":123,"column_start":5,"column_end":80}},{"value":"/ the UTF-8 error and the original `ByteRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227836,"byte_end":227886,"line_start":124,"line_end":124,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227891,"byte_end":227894,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example: valid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227899,"byte_end":227925,"line_start":126,"line_end":126,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227930,"byte_end":227933,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227938,"byte_end":227945,"line_start":128,"line_end":128,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227950,"byte_end":227976,"line_start":129,"line_end":129,"column_start":5,"column_end":31}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":227981,"byte_end":228021,"line_start":130,"line_end":130,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228026,"byte_end":228029,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228034,"byte_end":228073,"line_start":132,"line_end":132,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228078,"byte_end":228126,"line_start":133,"line_end":133,"column_start":5,"column_end":53}},{"value":"/     let byte_record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228131,"byte_end":228195,"line_start":134,"line_end":134,"column_start":5,"column_end":69}},{"value":"/     let str_record = StringRecord::from_byte_record(byte_record)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228200,"byte_end":228270,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"/     assert_eq!(str_record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228275,"byte_end":228315,"line_start":136,"line_end":136,"column_start":5,"column_end":45}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228320,"byte_end":228334,"line_start":137,"line_end":137,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228339,"byte_end":228344,"line_start":138,"line_end":138,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228349,"byte_end":228356,"line_start":139,"line_end":139,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228361,"byte_end":228364,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Example: invalid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228369,"byte_end":228397,"line_start":141,"line_end":141,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228402,"byte_end":228405,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228410,"byte_end":228417,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228422,"byte_end":228462,"line_start":144,"line_end":144,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228467,"byte_end":228470,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ let byte_record = ByteRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228475,"byte_end":228519,"line_start":146,"line_end":146,"column_start":5,"column_end":49}},{"value":"/     &b\"quux\"[..], &b\"foo\\xFFbar\"[..], &b\"c\"[..],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228524,"byte_end":228576,"line_start":147,"line_end":147,"column_start":5,"column_end":57}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228581,"byte_end":228588,"line_start":148,"line_end":148,"column_start":5,"column_end":12}},{"value":"/ let err = StringRecord::from_byte_record(byte_record).unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228593,"byte_end":228664,"line_start":149,"line_end":149,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(err.utf8_error().field(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228669,"byte_end":228713,"line_start":150,"line_end":150,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(err.utf8_error().valid_up_to(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228718,"byte_end":228768,"line_start":151,"line_end":151,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228773,"byte_end":228780,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":228785,"byte_end":228794,"line_start":153,"line_end":153,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":961},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230114,"byte_end":230136,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"from_byte_record_lossy","qualname":"<StringRecord>::from_byte_record_lossy","value":"pub fn from_byte_record_lossy(ByteRecord) -> StringRecord","parent":null,"children":[],"decl_id":null,"docs":" Lossily create a new `StringRecord` from a `ByteRecord`.","sig":null,"attributes":[{"value":"/ Lossily create a new `StringRecord` from a `ByteRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229072,"byte_end":229132,"line_start":163,"line_end":163,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229137,"byte_end":229140,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ This is like `StringRecord::from_byte_record`, except all invalid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229145,"byte_end":229220,"line_start":165,"line_end":165,"column_start":5,"column_end":80}},{"value":"/ sequences are replaced with the `U+FFFD REPLACEMENT CHARACTER`, which","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229225,"byte_end":229298,"line_start":166,"line_end":166,"column_start":5,"column_end":78}},{"value":"/ looks like this: �.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229303,"byte_end":229328,"line_start":167,"line_end":167,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229333,"byte_end":229336,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Example: valid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229341,"byte_end":229367,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229372,"byte_end":229375,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229380,"byte_end":229387,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229392,"byte_end":229432,"line_start":172,"line_end":172,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229437,"byte_end":229440,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ let byte_record = ByteRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229445,"byte_end":229505,"line_start":174,"line_end":174,"column_start":5,"column_end":65}},{"value":"/ let str_record = StringRecord::from_byte_record_lossy(byte_record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229510,"byte_end":229581,"line_start":175,"line_end":175,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(str_record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229586,"byte_end":229622,"line_start":176,"line_end":176,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229627,"byte_end":229634,"line_start":177,"line_end":177,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229639,"byte_end":229642,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Example: invalid UTF-8","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229647,"byte_end":229675,"line_start":179,"line_end":179,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229680,"byte_end":229683,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229688,"byte_end":229695,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229700,"byte_end":229740,"line_start":182,"line_end":182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229745,"byte_end":229748,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let byte_record = ByteRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229753,"byte_end":229797,"line_start":184,"line_end":184,"column_start":5,"column_end":49}},{"value":"/     &b\"quux\"[..], &b\"foo\\xFFbar\"[..], &b\"c\"[..],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229802,"byte_end":229854,"line_start":185,"line_end":185,"column_start":5,"column_end":57}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229859,"byte_end":229866,"line_start":186,"line_end":186,"column_start":5,"column_end":12}},{"value":"/ let str_record = StringRecord::from_byte_record_lossy(byte_record);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229871,"byte_end":229942,"line_start":187,"line_end":187,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(&str_record[0], \"quux\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229947,"byte_end":229986,"line_start":188,"line_end":188,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(&str_record[1], \"foo�bar\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":229991,"byte_end":230035,"line_start":189,"line_end":189,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(&str_record[2], \"c\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230040,"byte_end":230076,"line_start":190,"line_end":190,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230081,"byte_end":230088,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230093,"byte_end":230102,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233629,"byte_end":233640,"line_start":292,"line_end":292,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<StringRecord>::deserialize","value":"pub fn deserialize<'de, D: Deserialize>(&'de Self, Option<&'de StringRecord>)\n-> Result<D>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize this record.","sig":null,"attributes":[{"value":"/ Deserialize this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230651,"byte_end":230679,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230684,"byte_end":230687,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ The `D` type parameter refers to the type that this record should be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230692,"byte_end":230764,"line_start":209,"line_end":209,"column_start":5,"column_end":77}},{"value":"/ deserialized into. The `'de` lifetime refers to the lifetime of the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230769,"byte_end":230840,"line_start":210,"line_end":210,"column_start":5,"column_end":76}},{"value":"/ `StringRecord`. The `'de` lifetime permits deserializing into structs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230845,"byte_end":230918,"line_start":211,"line_end":211,"column_start":5,"column_end":78}},{"value":"/ that borrow field data from this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230923,"byte_end":230967,"line_start":212,"line_end":212,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230972,"byte_end":230975,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ An optional `headers` parameter permits deserializing into a struct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":230980,"byte_end":231051,"line_start":214,"line_end":214,"column_start":5,"column_end":76}},{"value":"/ based on its field names (corresponding to header values) rather than","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231056,"byte_end":231129,"line_start":215,"line_end":215,"column_start":5,"column_end":78}},{"value":"/ the order in which the fields are defined.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231134,"byte_end":231180,"line_start":216,"line_end":216,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231185,"byte_end":231188,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example: without headers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231193,"byte_end":231223,"line_start":218,"line_end":218,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231228,"byte_end":231231,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ This shows how to deserialize a single row into a struct based on the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231236,"byte_end":231309,"line_start":220,"line_end":220,"column_start":5,"column_end":78}},{"value":"/ order in which fields occur. This example also shows how to borrow","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231314,"byte_end":231384,"line_start":221,"line_end":221,"column_start":5,"column_end":75}},{"value":"/ fields from the `StringRecord`, which results in zero allocation","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231389,"byte_end":231457,"line_start":222,"line_end":222,"column_start":5,"column_end":73}},{"value":"/ deserialization.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231462,"byte_end":231482,"line_start":223,"line_end":223,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231487,"byte_end":231490,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231495,"byte_end":231502,"line_start":225,"line_end":225,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231507,"byte_end":231533,"line_start":226,"line_end":226,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231538,"byte_end":231541,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231546,"byte_end":231572,"line_start":228,"line_end":228,"column_start":5,"column_end":31}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231577,"byte_end":231604,"line_start":229,"line_end":229,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231609,"byte_end":231612,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231617,"byte_end":231643,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231648,"byte_end":231668,"line_start":232,"line_end":232,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231673,"byte_end":231695,"line_start":233,"line_end":233,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231700,"byte_end":231725,"line_start":234,"line_end":234,"column_start":5,"column_end":30}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231730,"byte_end":231754,"line_start":235,"line_end":235,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231759,"byte_end":231764,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231769,"byte_end":231772,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231777,"byte_end":231815,"line_start":238,"line_end":238,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231820,"byte_end":231868,"line_start":239,"line_end":239,"column_start":5,"column_end":53}},{"value":"/     let record = StringRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231873,"byte_end":231918,"line_start":240,"line_end":240,"column_start":5,"column_end":50}},{"value":"/         \"Boston\", \"United States\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231923,"byte_end":231972,"line_start":241,"line_end":241,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231977,"byte_end":231988,"line_start":242,"line_end":242,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":231993,"byte_end":231996,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(None)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232001,"byte_end":232050,"line_start":244,"line_end":244,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232055,"byte_end":232094,"line_start":245,"line_end":245,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232099,"byte_end":232148,"line_start":246,"line_end":246,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232153,"byte_end":232197,"line_start":247,"line_end":247,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232202,"byte_end":232216,"line_start":248,"line_end":248,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232221,"byte_end":232226,"line_start":249,"line_end":249,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232231,"byte_end":232238,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232243,"byte_end":232246,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example: with headers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232251,"byte_end":232278,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232283,"byte_end":232286,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ This example is like the previous one, but shows how to deserialize","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232291,"byte_end":232362,"line_start":254,"line_end":254,"column_start":5,"column_end":76}},{"value":"/ into a struct based on the struct's field names. For this to work,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232367,"byte_end":232437,"line_start":255,"line_end":255,"column_start":5,"column_end":75}},{"value":"/ you must provide a header row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232442,"byte_end":232476,"line_start":256,"line_end":256,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232481,"byte_end":232484,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ This example also shows that you can deserialize into owned data","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232489,"byte_end":232557,"line_start":258,"line_end":258,"column_start":5,"column_end":73}},{"value":"/ types (e.g., `String`) instead of borrowed data types (e.g., `&str`).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232562,"byte_end":232635,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232640,"byte_end":232643,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232648,"byte_end":232655,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232660,"byte_end":232686,"line_start":262,"line_end":262,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232691,"byte_end":232694,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232699,"byte_end":232725,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232730,"byte_end":232757,"line_start":265,"line_end":265,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232762,"byte_end":232765,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ #[derive(Deserialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232770,"byte_end":232796,"line_start":267,"line_end":267,"column_start":5,"column_end":31}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232801,"byte_end":232817,"line_start":268,"line_end":268,"column_start":5,"column_end":21}},{"value":"/     city: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232822,"byte_end":232843,"line_start":269,"line_end":269,"column_start":5,"column_end":26}},{"value":"/     country: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232848,"byte_end":232872,"line_start":270,"line_end":270,"column_start":5,"column_end":29}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232877,"byte_end":232901,"line_start":271,"line_end":271,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232906,"byte_end":232911,"line_start":272,"line_end":272,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232916,"byte_end":232919,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap() }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232924,"byte_end":232962,"line_start":274,"line_end":274,"column_start":5,"column_end":43}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":232967,"byte_end":233015,"line_start":275,"line_end":275,"column_start":5,"column_end":53}},{"value":"/     // Notice that the fields are not in the same order","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233020,"byte_end":233079,"line_start":276,"line_end":276,"column_start":5,"column_end":64}},{"value":"/     // as the fields in the struct!","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233084,"byte_end":233123,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/     let header = StringRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233128,"byte_end":233173,"line_start":278,"line_end":278,"column_start":5,"column_end":50}},{"value":"/         \"country\", \"city\", \"population\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233178,"byte_end":233222,"line_start":279,"line_end":279,"column_start":5,"column_end":49}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233227,"byte_end":233238,"line_start":280,"line_end":280,"column_start":5,"column_end":16}},{"value":"/     let record = StringRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233243,"byte_end":233288,"line_start":281,"line_end":281,"column_start":5,"column_end":50}},{"value":"/         \"United States\", \"Boston\", \"4628910\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233293,"byte_end":233342,"line_start":282,"line_end":282,"column_start":5,"column_end":54}},{"value":"/     ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233347,"byte_end":233358,"line_start":283,"line_end":283,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233363,"byte_end":233366,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/     let row: Row = record.deserialize(Some(&header))?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233371,"byte_end":233429,"line_start":285,"line_end":285,"column_start":5,"column_end":63}},{"value":"/     assert_eq!(row.city, \"Boston\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233434,"byte_end":233473,"line_start":286,"line_end":286,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(row.country, \"United States\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233478,"byte_end":233527,"line_start":287,"line_end":287,"column_start":5,"column_end":54}},{"value":"/     assert_eq!(row.population, 4628910);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233532,"byte_end":233576,"line_start":288,"line_end":288,"column_start":5,"column_end":49}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233581,"byte_end":233595,"line_start":289,"line_end":289,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233600,"byte_end":233605,"line_start":290,"line_end":290,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233610,"byte_end":233617,"line_start":291,"line_end":291,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":965},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234253,"byte_end":234257,"line_start":314,"line_end":314,"column_start":12,"column_end":16},"name":"iter","qualname":"<StringRecord>::iter","value":"pub fn iter(&Self) -> StringRecordIter","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all fields in this record.","sig":null,"attributes":[{"value":"/ Returns an iterator over all fields in this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233812,"byte_end":233867,"line_start":299,"line_end":299,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233872,"byte_end":233875,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233880,"byte_end":233893,"line_start":301,"line_end":301,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233898,"byte_end":233901,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ This example shows how to iterate over each field in a `StringRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233906,"byte_end":233980,"line_start":303,"line_end":303,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233985,"byte_end":233988,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":233993,"byte_end":234000,"line_start":305,"line_end":305,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234005,"byte_end":234031,"line_start":306,"line_end":306,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234036,"byte_end":234039,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234044,"byte_end":234101,"line_start":308,"line_end":308,"column_start":5,"column_end":62}},{"value":"/ for field in record.iter() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234106,"byte_end":234138,"line_start":309,"line_end":309,"column_start":5,"column_end":37}},{"value":"/     assert!(field == \"a\" || field == \"b\" || field == \"c\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234143,"byte_end":234205,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234210,"byte_end":234215,"line_start":311,"line_end":311,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234220,"byte_end":234227,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234232,"byte_end":234241,"line_start":313,"line_end":313,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234704,"byte_end":234707,"line_start":332,"line_end":332,"column_start":12,"column_end":15},"name":"get","qualname":"<StringRecord>::get","value":"pub fn get(&Self, usize) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Return the field at index `i`.","sig":null,"attributes":[{"value":"/ Return the field at index `i`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234323,"byte_end":234357,"line_start":318,"line_end":318,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234362,"byte_end":234365,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ If no field at index `i` exists, then this returns `None`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234370,"byte_end":234432,"line_start":320,"line_end":320,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234437,"byte_end":234440,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234445,"byte_end":234458,"line_start":322,"line_end":322,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234463,"byte_end":234466,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234471,"byte_end":234478,"line_start":324,"line_end":324,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234483,"byte_end":234509,"line_start":325,"line_end":325,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234514,"byte_end":234517,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234522,"byte_end":234579,"line_start":327,"line_end":327,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(record.get(1), Some(\"b\"));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234584,"byte_end":234625,"line_start":328,"line_end":328,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(record.get(3), None);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234630,"byte_end":234666,"line_start":329,"line_end":329,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234671,"byte_end":234678,"line_start":330,"line_end":330,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":234683,"byte_end":234692,"line_start":331,"line_end":331,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235342,"byte_end":235350,"line_start":352,"line_end":352,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<StringRecord>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if and only if this record is empty.","sig":null,"attributes":[{"value":"/ Returns true if and only if this record is empty.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235117,"byte_end":235170,"line_start":342,"line_end":342,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235175,"byte_end":235178,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235183,"byte_end":235196,"line_start":344,"line_end":344,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235201,"byte_end":235204,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235209,"byte_end":235216,"line_start":346,"line_end":346,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235221,"byte_end":235247,"line_start":347,"line_end":347,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235252,"byte_end":235255,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ assert!(StringRecord::new().is_empty());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235260,"byte_end":235304,"line_start":349,"line_end":349,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235309,"byte_end":235316,"line_start":350,"line_end":350,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235321,"byte_end":235330,"line_start":351,"line_end":351,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":969},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235673,"byte_end":235676,"line_start":367,"line_end":367,"column_start":12,"column_end":15},"name":"len","qualname":"<StringRecord>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of fields in this record.","sig":null,"attributes":[{"value":"/ Returns the number of fields in this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235403,"byte_end":235451,"line_start":356,"line_end":356,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235456,"byte_end":235459,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235464,"byte_end":235477,"line_start":358,"line_end":358,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235482,"byte_end":235485,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235490,"byte_end":235497,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235502,"byte_end":235528,"line_start":361,"line_end":361,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235533,"byte_end":235536,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235541,"byte_end":235598,"line_start":363,"line_end":363,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235603,"byte_end":235635,"line_start":364,"line_end":364,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235640,"byte_end":235647,"line_start":365,"line_end":365,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235652,"byte_end":235661,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236205,"byte_end":236213,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"truncate","qualname":"<StringRecord>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Truncate this record to `n` fields.","sig":null,"attributes":[{"value":"/ Truncate this record to `n` fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235727,"byte_end":235766,"line_start":371,"line_end":371,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235771,"byte_end":235774,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ If `n` is greater than the number of fields in this record, then this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235779,"byte_end":235852,"line_start":373,"line_end":373,"column_start":5,"column_end":78}},{"value":"/ has no effect.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235857,"byte_end":235875,"line_start":374,"line_end":374,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235880,"byte_end":235883,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235888,"byte_end":235901,"line_start":376,"line_end":376,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235906,"byte_end":235909,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235914,"byte_end":235921,"line_start":378,"line_end":378,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235926,"byte_end":235952,"line_start":379,"line_end":379,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235957,"byte_end":235960,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":235965,"byte_end":236026,"line_start":381,"line_end":381,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236031,"byte_end":236063,"line_start":382,"line_end":382,"column_start":5,"column_end":37}},{"value":"/ record.truncate(1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236068,"byte_end":236091,"line_start":383,"line_end":383,"column_start":5,"column_end":28}},{"value":"/ assert_eq!(record.len(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236096,"byte_end":236128,"line_start":384,"line_end":384,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(record, vec![\"a\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236133,"byte_end":236167,"line_start":385,"line_end":385,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236172,"byte_end":236179,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236184,"byte_end":236193,"line_start":387,"line_end":387,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":971},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236719,"byte_end":236724,"line_start":408,"line_end":408,"column_start":12,"column_end":17},"name":"clear","qualname":"<StringRecord>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clear this record so that it has zero fields.","sig":null,"attributes":[{"value":"/ Clear this record so that it has zero fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236276,"byte_end":236325,"line_start":392,"line_end":392,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236330,"byte_end":236333,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ Note that it is not necessary to clear the record to reuse it with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236338,"byte_end":236408,"line_start":394,"line_end":394,"column_start":5,"column_end":75}},{"value":"/ the CSV reader.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236413,"byte_end":236432,"line_start":395,"line_end":395,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236437,"byte_end":236440,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236445,"byte_end":236458,"line_start":397,"line_end":397,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236463,"byte_end":236466,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236471,"byte_end":236478,"line_start":399,"line_end":399,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236483,"byte_end":236509,"line_start":400,"line_end":400,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236514,"byte_end":236517,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236522,"byte_end":236583,"line_start":402,"line_end":402,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236588,"byte_end":236620,"line_start":403,"line_end":403,"column_start":5,"column_end":37}},{"value":"/ record.clear();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236625,"byte_end":236644,"line_start":404,"line_end":404,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(record.len(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236649,"byte_end":236681,"line_start":405,"line_end":405,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236686,"byte_end":236693,"line_start":406,"line_end":406,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236698,"byte_end":236707,"line_start":407,"line_end":407,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237247,"byte_end":237251,"line_start":428,"line_end":428,"column_start":12,"column_end":16},"name":"trim","qualname":"<StringRecord>::trim","value":"pub fn trim(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Trim the fields of this record so that leading and trailing whitespace\n is removed.","sig":null,"attributes":[{"value":"/ Trim the fields of this record so that leading and trailing whitespace","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236773,"byte_end":236847,"line_start":412,"line_end":412,"column_start":5,"column_end":79}},{"value":"/ is removed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236852,"byte_end":236867,"line_start":413,"line_end":413,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236872,"byte_end":236875,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This method uses the Unicode definition of whitespace.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236880,"byte_end":236938,"line_start":415,"line_end":415,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236943,"byte_end":236946,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236951,"byte_end":236964,"line_start":417,"line_end":417,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236969,"byte_end":236972,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236977,"byte_end":236984,"line_start":419,"line_end":419,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":236989,"byte_end":237015,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237020,"byte_end":237023,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237028,"byte_end":237073,"line_start":422,"line_end":422,"column_start":5,"column_end":50}},{"value":"/     \"  \", \"\\u{3000}\\tfoo \", \"bar  \", \"b a z\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237078,"byte_end":237127,"line_start":423,"line_end":423,"column_start":5,"column_end":54}},{"value":"/ ]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237132,"byte_end":237139,"line_start":424,"line_end":424,"column_start":5,"column_end":12}},{"value":"/ record.trim();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237144,"byte_end":237162,"line_start":425,"line_end":425,"column_start":5,"column_end":23}},{"value":"/ assert_eq!(record, vec![\"\", \"foo\", \"bar\", \"b a z\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237167,"byte_end":237223,"line_start":426,"line_end":426,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237228,"byte_end":237235,"line_start":427,"line_end":427,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237987,"byte_end":237997,"line_start":455,"line_end":455,"column_start":12,"column_end":22},"name":"push_field","qualname":"<StringRecord>::push_field","value":"pub fn push_field(&mut Self, &str)","parent":null,"children":[],"decl_id":null,"docs":" Add a new field to this record.","sig":null,"attributes":[{"value":"/ Add a new field to this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237710,"byte_end":237745,"line_start":443,"line_end":443,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237750,"byte_end":237753,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237758,"byte_end":237771,"line_start":445,"line_end":445,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237776,"byte_end":237779,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237784,"byte_end":237791,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237796,"byte_end":237822,"line_start":448,"line_end":448,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237827,"byte_end":237830,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237835,"byte_end":237876,"line_start":450,"line_end":450,"column_start":5,"column_end":46}},{"value":"/ record.push_field(\"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237881,"byte_end":237910,"line_start":451,"line_end":451,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(&record[0], \"foo\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237915,"byte_end":237949,"line_start":452,"line_end":452,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237954,"byte_end":237961,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":237966,"byte_end":237975,"line_start":454,"line_end":454,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239320,"byte_end":239328,"line_start":496,"line_end":496,"column_start":12,"column_end":20},"name":"position","qualname":"<StringRecord>::position","value":"pub fn position(&Self) -> Option<&Position>","parent":null,"children":[],"decl_id":null,"docs":" Return the position of this record, if available.","sig":null,"attributes":[{"value":"/ Return the position of this record, if available.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238080,"byte_end":238133,"line_start":459,"line_end":459,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238138,"byte_end":238141,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238146,"byte_end":238159,"line_start":461,"line_end":461,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238164,"byte_end":238167,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238172,"byte_end":238179,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238184,"byte_end":238210,"line_start":464,"line_end":464,"column_start":5,"column_end":31}},{"value":"/ use csv::{StringRecord, ReaderBuilder};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238215,"byte_end":238258,"line_start":465,"line_end":465,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238263,"byte_end":238266,"line_start":466,"line_end":466,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238271,"byte_end":238310,"line_start":467,"line_end":467,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238315,"byte_end":238363,"line_start":468,"line_end":468,"column_start":5,"column_end":53}},{"value":"/     let mut record = StringRecord::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238368,"byte_end":238413,"line_start":469,"line_end":469,"column_start":5,"column_end":50}},{"value":"/     let mut rdr = ReaderBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238418,"byte_end":238460,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238465,"byte_end":238496,"line_start":471,"line_end":471,"column_start":5,"column_end":36}},{"value":"/         .from_reader(\"a,b,c\\nx,y,z\".as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238501,"byte_end":238553,"line_start":472,"line_end":472,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238558,"byte_end":238561,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_record(&mut record)?);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238566,"byte_end":238613,"line_start":474,"line_end":474,"column_start":5,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238618,"byte_end":238627,"line_start":475,"line_end":475,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238632,"byte_end":238700,"line_start":476,"line_end":476,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238705,"byte_end":238743,"line_start":477,"line_end":477,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238748,"byte_end":238786,"line_start":478,"line_end":478,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 0);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238791,"byte_end":238831,"line_start":479,"line_end":479,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238836,"byte_end":238845,"line_start":480,"line_end":480,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238850,"byte_end":238853,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/     assert!(rdr.read_record(&mut record)?);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238858,"byte_end":238905,"line_start":482,"line_end":482,"column_start":5,"column_end":52}},{"value":"/     {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238910,"byte_end":238919,"line_start":483,"line_end":483,"column_start":5,"column_end":14}},{"value":"/         let pos = record.position().expect(\"a record position\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238924,"byte_end":238992,"line_start":484,"line_end":484,"column_start":5,"column_end":73}},{"value":"/         assert_eq!(pos.byte(), 6);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":238997,"byte_end":239035,"line_start":485,"line_end":485,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.line(), 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239040,"byte_end":239078,"line_start":486,"line_end":486,"column_start":5,"column_end":43}},{"value":"/         assert_eq!(pos.record(), 1);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239083,"byte_end":239123,"line_start":487,"line_end":487,"column_start":5,"column_end":45}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239128,"byte_end":239137,"line_start":488,"line_end":488,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239142,"byte_end":239145,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/     // Finish the CSV reader for good measure.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239150,"byte_end":239200,"line_start":490,"line_end":490,"column_start":5,"column_end":55}},{"value":"/     assert!(!rdr.read_record(&mut record)?);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239205,"byte_end":239253,"line_start":491,"line_end":491,"column_start":5,"column_end":53}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239258,"byte_end":239272,"line_start":492,"line_end":492,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239277,"byte_end":239282,"line_start":493,"line_end":493,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239287,"byte_end":239294,"line_start":494,"line_end":494,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239299,"byte_end":239308,"line_start":495,"line_end":495,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":975},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239858,"byte_end":239870,"line_start":517,"line_end":517,"column_start":12,"column_end":24},"name":"set_position","qualname":"<StringRecord>::set_position","value":"pub fn set_position(&mut Self, Option<Position>)","parent":null,"children":[],"decl_id":null,"docs":" Set the position of this record.","sig":null,"attributes":[{"value":"/ Set the position of this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239396,"byte_end":239432,"line_start":500,"line_end":500,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239437,"byte_end":239440,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239445,"byte_end":239458,"line_start":502,"line_end":502,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239463,"byte_end":239466,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239471,"byte_end":239478,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ use csv::{StringRecord, Position};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239483,"byte_end":239521,"line_start":505,"line_end":505,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239526,"byte_end":239529,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let mut record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239534,"byte_end":239595,"line_start":507,"line_end":507,"column_start":5,"column_end":66}},{"value":"/ let mut pos = Position::new();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239600,"byte_end":239634,"line_start":508,"line_end":508,"column_start":5,"column_end":39}},{"value":"/ pos.set_byte(100);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239639,"byte_end":239661,"line_start":509,"line_end":509,"column_start":5,"column_end":27}},{"value":"/ pos.set_line(4);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239666,"byte_end":239686,"line_start":510,"line_end":510,"column_start":5,"column_end":25}},{"value":"/ pos.set_record(2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239691,"byte_end":239713,"line_start":511,"line_end":511,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239718,"byte_end":239721,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ record.set_position(Some(pos.clone()));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239726,"byte_end":239769,"line_start":513,"line_end":513,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(record.position(), Some(&pos));","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239774,"byte_end":239820,"line_start":514,"line_end":514,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239825,"byte_end":239832,"line_start":515,"line_end":515,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239837,"byte_end":239846,"line_start":516,"line_end":516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240599,"byte_end":240604,"line_start":539,"line_end":539,"column_start":12,"column_end":17},"name":"range","qualname":"<StringRecord>::range","value":"pub fn range(&Self, usize) -> Option<Range<usize>>","parent":null,"children":[],"decl_id":null,"docs":" Return the start and end position of a field in this record.","sig":null,"attributes":[{"value":"/ Return the start and end position of a field in this record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":239952,"byte_end":240016,"line_start":521,"line_end":521,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240021,"byte_end":240024,"line_start":522,"line_end":522,"column_start":5,"column_end":8}},{"value":"/ If no such field exists at the given index, then return `None`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240029,"byte_end":240096,"line_start":523,"line_end":523,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240101,"byte_end":240104,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ The range returned can be used with the slice returned by `as_slice`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240109,"byte_end":240182,"line_start":525,"line_end":525,"column_start":5,"column_end":78}},{"value":"/ Namely, the range returned is guaranteed to start and end at valid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240187,"byte_end":240257,"line_start":526,"line_end":526,"column_start":5,"column_end":75}},{"value":"/ UTF-8 sequence boundaries.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240262,"byte_end":240292,"line_start":527,"line_end":527,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240297,"byte_end":240300,"line_start":528,"line_end":528,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240305,"byte_end":240318,"line_start":529,"line_end":529,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240323,"byte_end":240326,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240331,"byte_end":240338,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240343,"byte_end":240369,"line_start":532,"line_end":532,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240374,"byte_end":240377,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240382,"byte_end":240444,"line_start":534,"line_end":534,"column_start":5,"column_end":67}},{"value":"/ let range = record.range(1).expect(\"a record range\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240449,"byte_end":240506,"line_start":535,"line_end":535,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(&record.as_slice()[range], \"quux\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240511,"byte_end":240561,"line_start":536,"line_end":536,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240566,"byte_end":240573,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240578,"byte_end":240587,"line_start":538,"line_end":538,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":977},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241113,"byte_end":241121,"line_start":556,"line_end":556,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<StringRecord>::as_slice","value":"pub fn as_slice(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Return the entire row as a single string slice. The slice returned\n stores all fields contiguously. The boundaries of each field can be\n determined via the `range` method.","sig":null,"attributes":[{"value":"/ Return the entire row as a single string slice. The slice returned","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240683,"byte_end":240753,"line_start":543,"line_end":543,"column_start":5,"column_end":75}},{"value":"/ stores all fields contiguously. The boundaries of each field can be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240758,"byte_end":240829,"line_start":544,"line_end":544,"column_start":5,"column_end":76}},{"value":"/ determined via the `range` method.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240834,"byte_end":240872,"line_start":545,"line_end":545,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240877,"byte_end":240880,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240885,"byte_end":240898,"line_start":547,"line_end":547,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240903,"byte_end":240906,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240911,"byte_end":240918,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240923,"byte_end":240949,"line_start":550,"line_end":550,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240954,"byte_end":240957,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ let record = StringRecord::from(vec![\"foo\", \"quux\", \"z\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":240962,"byte_end":241024,"line_start":552,"line_end":552,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(record.as_slice(), \"fooquuxz\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241029,"byte_end":241075,"line_start":553,"line_end":553,"column_start":5,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241080,"byte_end":241087,"line_start":554,"line_end":554,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241092,"byte_end":241101,"line_start":555,"line_end":555,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241869,"byte_end":241883,"line_start":577,"line_end":577,"column_start":12,"column_end":26},"name":"as_byte_record","qualname":"<StringRecord>::as_byte_record","value":"pub fn as_byte_record(&Self) -> &ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to this record's raw\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"/ Return a reference to this record's raw","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241491,"byte_end":241534,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ [`ByteRecord`](struct.ByteRecord.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241539,"byte_end":241582,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241587,"byte_end":241590,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241595,"byte_end":241608,"line_start":567,"line_end":567,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241613,"byte_end":241616,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241621,"byte_end":241628,"line_start":569,"line_end":569,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241633,"byte_end":241659,"line_start":570,"line_end":570,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241664,"byte_end":241667,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241672,"byte_end":241733,"line_start":572,"line_end":572,"column_start":5,"column_end":66}},{"value":"/ let byte_record = str_record.as_byte_record();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241738,"byte_end":241788,"line_start":573,"line_end":573,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(&byte_record[2], b\"c\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241793,"byte_end":241831,"line_start":574,"line_end":574,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241836,"byte_end":241843,"line_start":575,"line_end":575,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241848,"byte_end":241857,"line_start":576,"line_end":576,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":979},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242844,"byte_end":242860,"line_start":609,"line_end":609,"column_start":12,"column_end":28},"name":"into_byte_record","qualname":"<StringRecord>::into_byte_record","value":"pub fn into_byte_record(Self) -> ByteRecord","parent":null,"children":[],"decl_id":null,"docs":" Convert this `StringRecord` into a\n [`ByteRecord`](struct.ByteRecord.html).","sig":null,"attributes":[{"value":"/ Convert this `StringRecord` into a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241935,"byte_end":241973,"line_start":581,"line_end":581,"column_start":5,"column_end":43}},{"value":"/ [`ByteRecord`](struct.ByteRecord.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":241978,"byte_end":242021,"line_start":582,"line_end":582,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242026,"byte_end":242029,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242034,"byte_end":242047,"line_start":584,"line_end":584,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242052,"byte_end":242055,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242060,"byte_end":242067,"line_start":586,"line_end":586,"column_start":5,"column_end":12}},{"value":"/ use csv::StringRecord;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242072,"byte_end":242098,"line_start":587,"line_end":587,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242103,"byte_end":242106,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242111,"byte_end":242172,"line_start":589,"line_end":589,"column_start":5,"column_end":66}},{"value":"/ let byte_record = str_record.into_byte_record();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242177,"byte_end":242229,"line_start":590,"line_end":590,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(&byte_record[2], b\"c\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242234,"byte_end":242272,"line_start":591,"line_end":591,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242277,"byte_end":242284,"line_start":592,"line_end":592,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242289,"byte_end":242292,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ Note that this can also be achieved using the `From` impl:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242297,"byte_end":242359,"line_start":594,"line_end":594,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242364,"byte_end":242367,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242372,"byte_end":242379,"line_start":596,"line_end":596,"column_start":5,"column_end":12}},{"value":"/ use csv::{ByteRecord, StringRecord};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242384,"byte_end":242424,"line_start":597,"line_end":597,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242429,"byte_end":242432,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ // Using ByteRecord::from...","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242437,"byte_end":242469,"line_start":599,"line_end":599,"column_start":5,"column_end":37}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242474,"byte_end":242535,"line_start":600,"line_end":600,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(ByteRecord::from(str_record).len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242540,"byte_end":242594,"line_start":601,"line_end":601,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242599,"byte_end":242602,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ // Using StringRecord::into...","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242607,"byte_end":242641,"line_start":603,"line_end":603,"column_start":5,"column_end":39}},{"value":"/ let str_record = StringRecord::from(vec![\"a\", \"b\", \"c\"]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242646,"byte_end":242707,"line_start":604,"line_end":604,"column_start":5,"column_end":66}},{"value":"/ let byte_record: ByteRecord = str_record.into();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242712,"byte_end":242764,"line_start":605,"line_end":605,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(byte_record.len(), 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242769,"byte_end":242806,"line_start":606,"line_end":606,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242811,"byte_end":242818,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":242823,"byte_end":242832,"line_start":608,"line_end":608,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1370},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245657,"byte_end":245673,"line_start":703,"line_end":703,"column_start":12,"column_end":28},"name":"StringRecordIter","qualname":"::string_record::StringRecordIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" An iterator over the fields in a string record.","sig":null,"attributes":[{"value":"/ An iterator over the fields in a string record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245464,"byte_end":245515,"line_start":698,"line_end":698,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245516,"byte_end":245519,"line_start":699,"line_end":699,"column_start":1,"column_end":4}},{"value":"/ The `'r` lifetime variable refers to the lifetime of the `StringRecord`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245520,"byte_end":245595,"line_start":700,"line_end":700,"column_start":1,"column_end":76}},{"value":"/ that is being iterated over.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245596,"byte_end":245628,"line_start":701,"line_end":701,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":1016},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/tutorial.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tutorial","qualname":"::tutorial","value":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/tutorial.rs","parent":null,"children":[],"decl_id":null,"docs":"A tutorial for handling CSV data in Rust.","sig":null,"attributes":[{"value":"*\nA tutorial for handling CSV data in Rust.\n\nThis tutorial will cover basic CSV reading and writing, automatic\n(de)serialization with Serde, CSV transformations and performance.\n\nThis tutorial is targeted at beginner Rust programmers. Experienced Rust\nprogrammers may find this tutorial to be too verbose, but skimming may be\nuseful. There is also a\n[cookbook](../cookbook/index.html)\nof examples for those that prefer more information density.\n\nFor an introduction to Rust, please see the\n[official book](https://doc.rust-lang.org/book/second-edition/).\nIf you haven't written any Rust code yet but have written code in another\nlanguage, then this tutorial might be accessible to you without needing to read\nthe book first.\n\n# Table of contents\n\n1. [Setup](#setup)\n1. [Basic error handling](#basic-error-handling)\n    * [Switch to recoverable errors](#switch-to-recoverable-errors)\n1. [Reading CSV](#reading-csv)\n    * [Reading headers](#reading-headers)\n    * [Delimiters, quotes and variable length records](#delimiters-quotes-and-variable-length-records)\n    * [Reading with Serde](#reading-with-serde)\n    * [Handling invalid data with Serde](#handling-invalid-data-with-serde)\n1. [Writing CSV](#writing-csv)\n    * [Writing tab separated values](#writing-tab-separated-values)\n    * [Writing with Serde](#writing-with-serde)\n1. [Pipelining](#pipelining)\n    * [Filter by search](#filter-by-search)\n    * [Filter by population count](#filter-by-population-count)\n1. [Performance](#performance)\n    * [Amortizing allocations](#amortizing-allocations)\n    * [Serde and zero allocation](#serde-and-zero-allocation)\n    * [CSV parsing without the standard library](#csv-parsing-without-the-standard-library)\n1. [Closing thoughts](#closing-thoughts)\n\n# Setup\n\nIn this section, we'll get you setup with a simple program that reads CSV data\nand prints a \"debug\" version of each record. This assumes that you have the\n[Rust toolchain installed](https://www.rust-lang.org/install.html),\nwhich includes both Rust and Cargo.\n\nWe'll start by creating a new Cargo project:\n\n```text\n$ cargo new --bin csvtutor\n$ cd csvtutor\n```\n\nOnce inside `csvtutor`, open `Cargo.toml` in your favorite text editor and add\n`csv = \"1.1\"` to your `[dependencies]` section. At this point, your\n`Cargo.toml` should look something like this:\n\n```text\n[package]\nname = \"csvtutor\"\nversion = \"0.1.0\"\nauthors = [\"Your Name\"]\n\n[dependencies]\ncsv = \"1.1\"\n```\n\nNext, let's build your project. Since you added the `csv` crate as a\ndependency, Cargo will automatically download it and compile it for you. To\nbuild your project, use Cargo:\n\n```text\n$ cargo build\n```\n\nThis will produce a new binary, `csvtutor`, in your `target/debug` directory.\nIt won't do much at this point, but you can run it:\n\n```text\n$ ./target/debug/csvtutor\nHello, world!\n```\n\nLet's make our program do something useful. Our program will read CSV data on\nstdin and print debug output for each record on stdout. To write this program,\nopen `src/main.rs` in your favorite text editor and replace its contents with\nthis:\n\n```no_run\n//tutorial-setup-01.rs\n// Import the standard library's I/O module so we can read from stdin.\nuse std::io;\n\n// The `main` function is where your program starts executing.\nfn main() {\n    // Create a CSV parser that reads data from stdin.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    // Loop over each record.\n    for result in rdr.records() {\n        // An error may occur, so abort the program in an unfriendly way.\n        // We will make this more friendly later!\n        let record = result.expect(\"a CSV record\");\n        // Print a debug version of the record.\n        println!(\"{:?}\", record);\n    }\n}\n```\n\nDon't worry too much about what this code means; we'll dissect it in the next\nsection. For now, try rebuilding your project:\n\n```text\n$ cargo build\n```\n\nAssuming that succeeds, let's try running our program. But first, we will need\nsome CSV data to play with! For that, we will use a random selection of 100\nUS cities, along with their population size and geographical coordinates. (We\nwill use this same CSV data throughout the entire tutorial.) To get the data,\ndownload it from github:\n\n```text\n$ curl -LO 'https://raw.githubusercontent.com/BurntSushi/rust-csv/master/examples/data/uspop.csv'\n```\n\nAnd now finally, run your program on `uspop.csv`:\n\n```text\n$ ./target/debug/csvtutor < uspop.csv\nStringRecord([\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])\nStringRecord([\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])\nStringRecord([\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])\n# ... and much more\n```\n\n# Basic error handling\n\nSince reading CSV data can result in errors, error handling is pervasive\nthroughout the examples in this tutorial. Therefore, we're going to spend a\nlittle bit of time going over basic error handling, and in particular, fix\nour previous example to show errors in a more friendly way. **If you're already\ncomfortable with things like `Result` and `try!`/`?` in Rust, then you can\nsafely skip this section.**\n\nNote that\n[The Rust Programming Language Book](https://doc.rust-lang.org/book/second-edition/)\ncontains an\n[introduction to general error handling](https://doc.rust-lang.org/book/second-edition/ch09-00-error-handling.html).\nFor a deeper dive, see\n[my blog post on error handling in Rust](http://blog.burntsushi.net/rust-error-handling/).\nThe blog post is especially important if you plan on building Rust libraries.\n\nWith that out of the way, error handling in Rust comes in two different forms:\nunrecoverable errors and recoverable errors.\n\nUnrecoverable errors generally correspond to things like bugs in your program,\nwhich might occur when an invariant or contract is broken. At that point, the\nstate of your program is unpredictable, and there's typically little recourse\nother than *panicking*. In Rust, a panic is similar to simply aborting your\nprogram, but it will unwind the stack and clean up resources before your\nprogram exits.\n\nOn the other hand, recoverable errors generally correspond to predictable\nerrors. A non-existent file or invalid CSV data are examples of recoverable\nerrors. In Rust, recoverable errors are handled via `Result`. A `Result`\nrepresents the state of a computation that has either succeeded or failed.\nIt is defined like so:\n\n```\nenum Result<T, E> {\n    Ok(T),\n    Err(E),\n}\n```\n\nThat is, a `Result` either contains a value of type `T` when the computation\nsucceeds, or it contains a value of type `E` when the computation fails.\n\nThe relationship between unrecoverable errors and recoverable errors is\nimportant. In particular, it is **strongly discouraged** to treat recoverable\nerrors as if they were unrecoverable. For example, panicking when a file could\nnot be found, or if some CSV data is invalid, is considered bad practice.\nInstead, predictable errors should be handled using Rust's `Result` type.\n\nWith our new found knowledge, let's re-examine our previous example and dissect\nits error handling.\n\n```no_run\n//tutorial-error-01.rs\nuse std::io;\n\nfn main() {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result.expect(\"a CSV record\");\n        println!(\"{:?}\", record);\n    }\n}\n```\n\nThere are two places where an error can occur in this program. The first is\nif there was a problem reading a record from stdin. The second is if there is\na problem writing to stdout. In general, we will ignore the latter problem in\nthis tutorial, although robust command line applications should probably try\nto handle it (e.g., when a broken pipe occurs). The former however is worth\nlooking into in more detail. For example, if a user of this program provides\ninvalid CSV data, then the program will panic:\n\n```text\n$ cat invalid\nheader1,header2\nfoo,bar\nquux,baz,foobar\n$ ./target/debug/csvtutor < invalid\nStringRecord { position: Some(Position { byte: 16, line: 2, record: 1 }), fields: [\"foo\", \"bar\"] }\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: UnequalLengths { pos: Some(Position { byte: 24, line: 3, record: 2 }), expected_len: 2, len: 3 }', /checkout/src/libcore/result.rs:859\nnote: Run with `RUST_BACKTRACE=1` for a backtrace.\n```\n\nWhat happened here? First and foremost, we should talk about why the CSV data\nis invalid. The CSV data consists of three records: a header and two data\nrecords. The header and first data record have two fields, but the second\ndata record has three fields. By default, the csv crate will treat inconsistent\nrecord lengths as an error.\n(This behavior can be toggled using the\n[`ReaderBuilder::flexible`](../struct.ReaderBuilder.html#method.flexible)\nconfig knob.) This explains why the first data record is printed in this\nexample, since it has the same number of fields as the header record. That is,\nwe don't actually hit an error until we parse the second data record.\n\n(Note that the CSV reader automatically interprets the first record as a\nheader. This can be toggled with the\n[`ReaderBuilder::has_headers`](../struct.ReaderBuilder.html#method.has_headers)\nconfig knob.)\n\nSo what actually causes the panic to happen in our program? That would be the\nfirst line in our loop:\n\n```ignore\nfor result in rdr.records() {\n    let record = result.expect(\"a CSV record\"); // this panics\n    println!(\"{:?}\", record);\n}\n```\n\nThe key thing to understand here is that `rdr.records()` returns an iterator\nthat yields `Result` values. That is, instead of yielding records, it yields\na `Result` that contains either a record or an error. The `expect` method,\nwhich is defined on `Result`, *unwraps* the success value inside the `Result`.\nSince the `Result` might contain an error instead, `expect` will *panic* when\nit does contain an error.\n\nIt might help to look at the implementation of `expect`:\n\n```ignore\nuse std::fmt;\n\n// This says, \"for all types T and E, where E can be turned into a human\n// readable debug message, define the `expect` method.\"\nimpl<T, E: fmt::Debug> Result<T, E> {\n    fn expect(self, msg: &str) -> T {\n        match self {\n            Ok(t) => t,\n            Err(e) => panic!(\"{}: {:?}\", msg, e),\n        }\n    }\n}\n```\n\nSince this causes a panic if the CSV data is invalid, and invalid CSV data is\na perfectly predictable error, we've turned what should be a *recoverable*\nerror into an *unrecoverable* error. We did this because it is expedient to\nuse unrecoverable errors. Since this is bad practice, we will endeavor to avoid\nunrecoverable errors throughout the rest of the tutorial.\n\n## Switch to recoverable errors\n\nWe'll convert our unrecoverable error to a recoverable error in 3 steps. First,\nlet's get rid of the panic and print an error message manually:\n\n```no_run\n//tutorial-error-02.rs\nuse std::io;\nuse std::process;\n\nfn main() {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // Examine our Result.\n        // If there was no problem, print the record.\n        // Otherwise, print the error message and quit the program.\n        match result {\n            Ok(record) => println!(\"{:?}\", record),\n            Err(err) => {\n                println!(\"error reading CSV from <stdin>: {}\", err);\n                process::exit(1);\n            }\n        }\n    }\n}\n```\n\nIf we run our program again, we'll still see an error message, but it is no\nlonger a panic message:\n\n```text\n$ cat invalid\nheader1,header2\nfoo,bar\nquux,baz,foobar\n$ ./target/debug/csvtutor < invalid\nStringRecord { position: Some(Position { byte: 16, line: 2, record: 1 }), fields: [\"foo\", \"bar\"] }\nerror reading CSV from <stdin>: CSV error: record 2 (line: 3, byte: 24): found record with 3 fields, but the previous record has 2 fields\n```\n\nThe second step for moving to recoverable errors is to put our CSV record loop\ninto a separate function. This function then has the option of *returning* an\nerror, which our `main` function can then inspect and decide what to do with.\n\n```no_run\n//tutorial-error-03.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // Examine our Result.\n        // If there was no problem, print the record.\n        // Otherwise, convert our error to a Box<dyn Error> and return it.\n        match result {\n            Err(err) => return Err(From::from(err)),\n            Ok(record) => {\n              println!(\"{:?}\", record);\n            }\n        }\n    }\n    Ok(())\n}\n```\n\nOur new function, `run`, has a return type of `Result<(), Box<dyn Error>>`. In\nsimple terms, this says that `run` either returns nothing when successful, or\nif an error occurred, it returns a `Box<dyn Error>`, which stands for \"any kind of\nerror.\" A `Box<dyn Error>` is hard to inspect if we cared about the specific error\nthat occurred. But for our purposes, all we need to do is gracefully print an\nerror message and exit the program.\n\nThe third and final step is to replace our explicit `match` expression with a\nspecial Rust language feature: the question mark.\n\n```no_run\n//tutorial-error-04.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        // This is effectively the same code as our `match` in the\n        // previous example. In other words, `?` is syntactic sugar.\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n```\n\nThis last step shows how we can use the `?` to automatically forward errors\nto our caller without having to do explicit case analysis with `match`\nourselves. We will use the `?` heavily throughout this tutorial, and it's\nimportant to note that it can **only be used in functions that return\n`Result`.**\n\nWe'll end this section with a word of caution: using `Box<dyn Error>` as our error\ntype is the minimally acceptable thing we can do here. Namely, while it allows\nour program to gracefully handle errors, it makes it hard for callers to\ninspect the specific error condition that occurred. However, since this is a\ntutorial on writing command line programs that do CSV parsing, we will consider\nourselves satisfied. If you'd like to know more, or are interested in writing\na library that handles CSV data, then you should check out my\n[blog post on error handling](http://blog.burntsushi.net/rust-error-handling/).\n\nWith all that said, if all you're doing is writing a one-off program to do\nCSV transformations, then using methods like `expect` and panicking when an\nerror occurs is a perfectly reasonable thing to do. Nevertheless, this tutorial\nwill endeavor to show idiomatic code.\n\n# Reading CSV\n\nNow that we've got you setup and covered basic error handling, it's time to do\nwhat we came here to do: handle CSV data. We've already seen how to read\nCSV data from `stdin`, but this section will cover how to read CSV data from\nfiles and how to configure our CSV reader to data formatted with different\ndelimiters and quoting strategies.\n\nFirst up, let's adapt the example we've been working with to accept a file\npath argument instead of stdin.\n\n```no_run\n//tutorial-read-01.rs\nuse std::env;\nuse std::error::Error;\nuse std::ffi::OsString;\nuse std::fs::File;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let file_path = get_first_arg()?;\n    let file = File::open(file_path)?;\n    let mut rdr = csv::Reader::from_reader(file);\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n\n/// Returns the first positional argument sent to this process. If there are no\n/// positional arguments, then this returns an error.\nfn get_first_arg() -> Result<OsString, Box<dyn Error>> {\n    match env::args_os().nth(1) {\n        None => Err(From::from(\"expected 1 argument, but got none\")),\n        Some(file_path) => Ok(file_path),\n    }\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nIf you replace the contents of your `src/main.rs` file with the above code,\nthen you should be able to rebuild your project and try it out:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor uspop.csv\nStringRecord([\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])\nStringRecord([\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])\nStringRecord([\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])\n# ... and much more\n```\n\nThis example contains two new pieces of code:\n\n1. Code for querying the positional arguments of your program. We put this code\n   into its own function called `get_first_arg`. Our program expects a file\n   path in the first position (which is indexed at `1`; the argument at index\n   `0` is the executable name), so if one doesn't exist, then `get_first_arg`\n   returns an error.\n2. Code for opening a file. In `run`, we open a file using `File::open`. If\n   there was a problem opening the file, we forward the error to the caller of\n   `run` (which is `main` in this program). Note that we do *not* wrap the\n   `File` in a buffer. The CSV reader does buffering internally, so there's\n   no need for the caller to do it.\n\nNow is a good time to introduce an alternate CSV reader constructor, which\nmakes it slightly more convenient to open CSV data from a file. That is,\ninstead of:\n\n```ignore\nlet file_path = get_first_arg()?;\nlet file = File::open(file_path)?;\nlet mut rdr = csv::Reader::from_reader(file);\n```\n\nyou can use:\n\n```ignore\nlet file_path = get_first_arg()?;\nlet mut rdr = csv::Reader::from_path(file_path)?;\n```\n\n`csv::Reader::from_path` will open the file for you and return an error if\nthe file could not be opened.\n\n## Reading headers\n\nIf you had a chance to look at the data inside `uspop.csv`, you would notice\nthat there is a header record that looks like this:\n\n```text\nCity,State,Population,Latitude,Longitude\n```\n\nNow, if you look back at the output of the commands you've run so far, you'll\nnotice that the header record is never printed. Why is that? By default, the\nCSV reader will interpret the first record in CSV data as a header, which\nis typically distinct from the actual data in the records that follow.\nTherefore, the header record is always skipped whenever you try to read or\niterate over the records in CSV data.\n\nThe CSV reader does not try to be smart about the header record and does\n**not** employ any heuristics for automatically detecting whether the first\nrecord is a header or not. Instead, if you don't want to treat the first record\nas a header, you'll need to tell the CSV reader that there are no headers.\n\nTo configure a CSV reader to do this, we'll need to use a\n[`ReaderBuilder`](../struct.ReaderBuilder.html)\nto build a CSV reader with our desired configuration. Here's an example that\ndoes just that. (Note that we've moved back to reading from `stdin`, since it\nproduces terser examples.)\n\n```no_run\n//tutorial-read-headers-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(false)\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nIf you compile and run this program with our `uspop.csv` data, then you'll see\nthat the header record is now printed:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\nStringRecord([\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])\nStringRecord([\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])\nStringRecord([\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])\nStringRecord([\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])\n```\n\nIf you ever need to access the header record directly, then you can use the\n[`Reader::header`](../struct.Reader.html#method.headers)\nmethod like so:\n\n```no_run\n//tutorial-read-headers-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    {\n        // We nest this call in its own scope because of lifetimes.\n        let headers = rdr.headers()?;\n        println!(\"{:?}\", headers);\n    }\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    // We can ask for the headers at any time. There's no need to nest this\n    // call in its own scope because we never try to borrow the reader again.\n    let headers = rdr.headers()?;\n    println!(\"{:?}\", headers);\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nOne interesting thing to note in this example is that we put the call to\n`rdr.headers()` in its own scope. We do this because `rdr.headers()` returns\na *borrow* of the reader's internal header state. The nested scope in this\ncode allows the borrow to end before we try to iterate over the records. If\nwe didn't nest the call to `rdr.headers()` in its own scope, then the code\nwouldn't compile because we cannot borrow the reader's headers at the same time\nthat we try to borrow the reader to iterate over its records.\n\nAnother way of solving this problem is to *clone* the header record:\n\n```ignore\nlet headers = rdr.headers()?.clone();\n```\n\nThis converts it from a borrow of the CSV reader to a new owned value. This\nmakes the code a bit easier to read, but at the cost of copying the header\nrecord into a new allocation.\n\n## Delimiters, quotes and variable length records\n\nIn this section we'll temporarily depart from our `uspop.csv` data set and\nshow how to read some CSV data that is a little less clean. This CSV data\nuses `;` as a delimiter, escapes quotes with `\\\"` (instead of `\"\"`) and has\nrecords of varying length. Here's the data, which contains a list of WWE\nwrestlers and the year they started, if it's known:\n\n```text\n$ cat strange.csv\n\"\\\"Hacksaw\\\" Jim Duggan\";1987\n\"Bret \\\"Hit Man\\\" Hart\";1984\n# We're not sure when Rafael started, so omit the year.\nRafael Halperin\n\"\\\"Big Cat\\\" Ernie Ladd\";1964\n\"\\\"Macho Man\\\" Randy Savage\";1985\n\"Jake \\\"The Snake\\\" Roberts\";1986\n```\n\nTo read this CSV data, we'll want to do the following:\n\n1. Disable headers, since this data has none.\n2. Change the delimiter from `,` to `;`.\n3. Change the quote strategy from doubled (e.g., `\"\"`) to escaped (e.g., `\\\"`).\n4. Permit flexible length records, since some omit the year.\n5. Ignore lines beginning with a `#`.\n\nAll of this (and more!) can be configured with a\n[`ReaderBuilder`](../struct.ReaderBuilder.html),\nas seen in the following example:\n\n```no_run\n//tutorial-read-delimiter-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::ReaderBuilder::new()\n        .has_headers(false)\n        .delimiter(b';')\n        .double_quote(false)\n        .escape(Some(b'\\\\'))\n        .flexible(true)\n        .comment(Some(b'#'))\n        .from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nNow re-compile your project and try running the program on `strange.csv`:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < strange.csv\nStringRecord([\"\\\"Hacksaw\\\" Jim Duggan\", \"1987\"])\nStringRecord([\"Bret \\\"Hit Man\\\" Hart\", \"1984\"])\nStringRecord([\"Rafael Halperin\"])\nStringRecord([\"\\\"Big Cat\\\" Ernie Ladd\", \"1964\"])\nStringRecord([\"\\\"Macho Man\\\" Randy Savage\", \"1985\"])\nStringRecord([\"Jake \\\"The Snake\\\" Roberts\", \"1986\"])\n```\n\nYou should feel encouraged to play around with the settings. Some interesting\nthings you might try:\n\n1. If you remove the `escape` setting, notice that no CSV errors are reported.\n   Instead, records are still parsed. This is a feature of the CSV parser. Even\n   though it gets the data slightly wrong, it still provides a parse that you\n   might be able to work with. This is a useful property given the messiness\n   of real world CSV data.\n2. If you remove the `delimiter` setting, parsing still succeeds, although\n   every record has exactly one field.\n3. If you remove the `flexible` setting, the reader will print the first two\n   records (since they both have the same number of fields), but will return a\n   parse error on the third record, since it has only one field.\n\nThis covers most of the things you might want to configure on your CSV reader,\nalthough there are a few other knobs. For example, you can change the record\nterminator from a new line to any other character. (By default, the terminator\nis `CRLF`, which treats each of `\\r\\n`, `\\r` and `\\n` as single record\nterminators.) For more details, see the documentation and examples for each of\nthe methods on\n[`ReaderBuilder`](../struct.ReaderBuilder.html).\n\n## Reading with Serde\n\nOne of the most convenient features of this crate is its support for\n[Serde](https://serde.rs/).\nSerde is a framework for automatically serializing and deserializing data into\nRust types. In simpler terms, that means instead of iterating over records\nas an array of string fields, we can iterate over records of a specific type\nof our choosing.\n\nFor example, let's take a look at some data from our `uspop.csv` file:\n\n```text\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\n```\n\nWhile some of these fields make sense as strings (`City`, `State`), other\nfields look more like numbers. For example, `Population` looks like it contains\nintegers while `Latitude` and `Longitude` appear to contain decimals. If we\nwanted to convert these fields to their \"proper\" types, then we need to do\na lot of manual work. This next example shows how.\n\n```no_run\n//tutorial-read-serde-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.records() {\n        let record = result?;\n\n        let city = &record[0];\n        let state = &record[1];\n        // Some records are missing population counts, so if we can't\n        // parse a number, treat the population count as missing instead\n        // of returning an error.\n        let pop: Option<u64> = record[2].parse().ok();\n        // Lucky us! Latitudes and longitudes are available for every record.\n        // Therefore, if one couldn't be parsed, return an error.\n        let latitude: f64 = record[3].parse()?;\n        let longitude: f64 = record[4].parse()?;\n\n        println!(\n            \"city: {:?}, state: {:?}, \\\n             pop: {:?}, latitude: {:?}, longitude: {:?}\",\n            city, state, pop, latitude, longitude);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nThe problem here is that we need to parse each individual field manually, which\ncan be labor intensive and repetitive. Serde, however, makes this process\nautomatic. For example, we can ask to deserialize every record into a tuple\ntype: `(String, String, Option<u64>, f64, f64)`.\n\n```no_run\n//tutorial-read-serde-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n// This introduces a type alias so that we can conveniently reference our\n// record type.\ntype Record = (String, String, Option<u64>, f64, f64);\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    // Instead of creating an iterator with the `records` method, we create\n    // an iterator with the `deserialize` method.\n    for result in rdr.deserialize() {\n        // We must tell Serde what type we want to deserialize into.\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nRunning this code should show similar output as previous examples:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\n(\"Davidsons Landing\", \"AK\", None, 65.2419444, -165.2716667)\n(\"Kenai\", \"AK\", Some(7610), 60.5544444, -151.2583333)\n(\"Oakman\", \"AL\", None, 33.7133333, -87.3886111)\n# ... and much more\n```\n\nOne of the downsides of using Serde this way is that the type you use must\nmatch the order of fields as they appear in each record. This can be a pain\nif your CSV data has a header record, since you might tend to think about each\nfield as a value of a particular named field rather than as a numbered field.\nOne way we might achieve this is to deserialize our record into a map type like\n[`HashMap`](https://doc.rust-lang.org/std/collections/struct.HashMap.html)\nor\n[`BTreeMap`](https://doc.rust-lang.org/std/collections/struct.BTreeMap.html).\nThe next example shows how, and in particular, notice that the only thing that\nchanged from the last example is the definition of the `Record` type alias and\na new `use` statement that imports `HashMap` from the standard library:\n\n```no_run\n//tutorial-read-serde-03.rs\nuse std::collections::HashMap;\n# use std::error::Error;\n# use std::io;\n# use std::process;\n\n// This introduces a type alias so that we can conveniently reference our\n// record type.\ntype Record = HashMap<String, String>;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nRunning this program shows similar results as before, but each record is\nprinted as a map:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\n{\"City\": \"Davidsons Landing\", \"Latitude\": \"65.2419444\", \"State\": \"AK\", \"Population\": \"\", \"Longitude\": \"-165.2716667\"}\n{\"City\": \"Kenai\", \"Population\": \"7610\", \"State\": \"AK\", \"Longitude\": \"-151.2583333\", \"Latitude\": \"60.5544444\"}\n{\"State\": \"AL\", \"City\": \"Oakman\", \"Longitude\": \"-87.3886111\", \"Population\": \"\", \"Latitude\": \"33.7133333\"}\n```\n\nThis method works especially well if you need to read CSV data with header\nrecords, but whose exact structure isn't known until your program runs.\nHowever, in our case, we know the structure of the data in `uspop.csv`. In\nparticular, with the `HashMap` approach, we've lost the specific types we had\nfor each field in the previous example when we deserialized each record into a\n`(String, String, Option<u64>, f64, f64)`. Is there a way to identify fields\nby their corresponding header name *and* assign each field its own unique\ntype? The answer is yes, but we'll need to bring in Serde's `derive` feature\nfirst. You can do that by adding this to the `[dependencies]` section of your\n`Cargo.toml` file:\n\n```text\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\nWith these crates added to our project, we can now define our own custom struct\nthat represents our record. We then ask Serde to automatically write the glue\ncode required to populate our struct from a CSV record. The next example shows\nhow. Don't miss the new Serde imports!\n\n```no_run\n//tutorial-read-serde-04.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\n// This lets us write `#[derive(Deserialize)]`.\nuse serde::Deserialize;\n\n// We don't need to derive `Debug` (which doesn't require Serde), but it's a\n// good habit to do it for all your types.\n//\n// Notice that the field names in this struct are NOT in the same order as\n// the fields in the CSV data!\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    latitude: f64,\n    longitude: f64,\n    population: Option<u64>,\n    city: String,\n    state: String,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n        // Try this if you don't like each record smushed on one line:\n        // println!(\"{:#?}\", record);\n    }\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nCompile and run this program to see similar output as before:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop.csv\nRecord { latitude: 65.2419444, longitude: -165.2716667, population: None, city: \"Davidsons Landing\", state: \"AK\" }\nRecord { latitude: 60.5544444, longitude: -151.2583333, population: Some(7610), city: \"Kenai\", state: \"AK\" }\nRecord { latitude: 33.7133333, longitude: -87.3886111, population: None, city: \"Oakman\", state: \"AL\" }\n```\n\nOnce again, we didn't need to change our `run` function at all: we're still\niterating over records using the `deserialize` iterator that we started with\nin the beginning of this section. The only thing that changed in this example\nwas the definition of the `Record` type and a new `use` statement. Our `Record`\ntype is now a custom struct that we defined instead of a type alias, and as a\nresult, Serde doesn't know how to deserialize it by default. However, a special\ncompiler plugin provided by Serde is available, which will read your struct\ndefinition at compile time and generate code that will deserialize a CSV record\ninto a `Record` value. To see what happens if you leave out the automatic\nderive, change `#[derive(Debug, Deserialize)]` to `#[derive(Debug)]`.\n\nOne other thing worth mentioning in this example is the use of\n`#[serde(rename_all = \"PascalCase\")]`. This directive helps Serde map your\nstruct's field names to the header names in the CSV data. If you recall, our\nheader record is:\n\n```text\nCity,State,Population,Latitude,Longitude\n```\n\nNotice that each name is capitalized, but the fields in our struct are not. The\n`#[serde(rename_all = \"PascalCase\")]` directive fixes that by interpreting each\nfield in `PascalCase`, where the first letter of the field is capitalized. If\nwe didn't tell Serde about the name remapping, then the program will quit with\nan error:\n\n```text\n$ ./target/debug/csvtutor < uspop.csv\nCSV deserialize error: record 1 (line: 2, byte: 41): missing field `latitude`\n```\n\nWe could have fixed this through other means. For example, we could have used\ncapital letters in our field names:\n\n```ignore\n#[derive(Debug, Deserialize)]\nstruct Record {\n    Latitude: f64,\n    Longitude: f64,\n    Population: Option<u64>,\n    City: String,\n    State: String,\n}\n```\n\nHowever, this violates Rust naming style. (In fact, the Rust compiler\nwill even warn you that the names do not follow convention!)\n\nAnother way to fix this is to ask Serde to rename each field individually. This\nis useful when there is no consistent name mapping from fields to header names:\n\n```ignore\n#[derive(Debug, Deserialize)]\nstruct Record {\n    #[serde(rename = \"Latitude\")]\n    latitude: f64,\n    #[serde(rename = \"Longitude\")]\n    longitude: f64,\n    #[serde(rename = \"Population\")]\n    population: Option<u64>,\n    #[serde(rename = \"City\")]\n    city: String,\n    #[serde(rename = \"State\")]\n    state: String,\n}\n```\n\nTo read more about renaming fields and about other Serde directives, please\nconsult the\n[Serde documentation on attributes](https://serde.rs/attributes.html).\n\n## Handling invalid data with Serde\n\nIn this section we will see a brief example of how to deal with data that isn't\nclean. To do this exercise, we'll work with a slightly tweaked version of the\nUS population data we've been using throughout this tutorial. This version of\nthe data is slightly messier than what we've been using. You can get it like\nso:\n\n```text\n$ curl -LO 'https://raw.githubusercontent.com/BurntSushi/rust-csv/master/examples/data/uspop-null.csv'\n```\n\nLet's start by running our program from the previous section:\n\n```no_run\n//tutorial-read-serde-invalid-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    latitude: f64,\n    longitude: f64,\n    population: Option<u64>,\n    city: String,\n    state: String,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompile and run it on our messier data:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop-null.csv\nRecord { latitude: 65.2419444, longitude: -165.2716667, population: None, city: \"Davidsons Landing\", state: \"AK\" }\nRecord { latitude: 60.5544444, longitude: -151.2583333, population: Some(7610), city: \"Kenai\", state: \"AK\" }\nRecord { latitude: 33.7133333, longitude: -87.3886111, population: None, city: \"Oakman\", state: \"AL\" }\n# ... more records\nCSV deserialize error: record 42 (line: 43, byte: 1710): field 2: invalid digit found in string\n```\n\nOops! What happened? The program printed several records, but stopped when it\ntripped over a deserialization problem. The error message says that it found\nan invalid digit in the field at index `2` (which is the `Population` field)\non line 43. What does line 43 look like?\n\n```text\n$ head -n 43 uspop-null.csv | tail -n1\nFlint Springs,KY,NULL,37.3433333,-86.7136111\n```\n\nAh! The third field (index `2`) is supposed to either be empty or contain a\npopulation count. However, in this data, it seems that `NULL` sometimes appears\nas a value, presumably to indicate that there is no count available.\n\nThe problem with our current program is that it fails to read this record\nbecause it doesn't know how to deserialize a `NULL` string into an\n`Option<u64>`. That is, a `Option<u64>` either corresponds to an empty field\nor an integer.\n\nTo fix this, we tell Serde to convert any deserialization errors on this field\nto a `None` value, as shown in this next example:\n\n```no_run\n//tutorial-read-serde-invalid-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    latitude: f64,\n    longitude: f64,\n    #[serde(deserialize_with = \"csv::invalid_option\")]\n    population: Option<u64>,\n    city: String,\n    state: String,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        println!(\"{:?}\", record);\n    }\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nIf you compile and run this example, then it should run to completion just\nlike the other examples:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor < uspop-null.csv\nRecord { latitude: 65.2419444, longitude: -165.2716667, population: None, city: \"Davidsons Landing\", state: \"AK\" }\nRecord { latitude: 60.5544444, longitude: -151.2583333, population: Some(7610), city: \"Kenai\", state: \"AK\" }\nRecord { latitude: 33.7133333, longitude: -87.3886111, population: None, city: \"Oakman\", state: \"AL\" }\n# ... and more\n```\n\nThe only change in this example was adding this attribute to the `population`\nfield in our `Record` type:\n\n```ignore\n#[serde(deserialize_with = \"csv::invalid_option\")]\n```\n\nThe\n[`invalid_option`](../fn.invalid_option.html)\nfunction is a generic helper function that does one very simple thing: when\napplied to `Option` fields, it will convert any deserialization error into a\n`None` value. This is useful when you need to work with messy CSV data.\n\n# Writing CSV\n\nIn this section we'll show a few examples that write CSV data. Writing CSV data\ntends to be a bit more straight-forward than reading CSV data, since you get to\ncontrol the output format.\n\nLet's start with the most basic example: writing a few CSV records to `stdout`.\n\n```no_run\n//tutorial-write-01.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n    // Since we're writing records manually, we must explicitly write our\n    // header record. A header record is written the same way that other\n    // records are written.\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n    wtr.write_record(&[\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])?;\n    wtr.write_record(&[\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])?;\n    wtr.write_record(&[\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])?;\n\n    // A CSV writer maintains an internal buffer, so it's important\n    // to flush the buffer when you're done.\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nCompiling and running this example results in CSV data being printed:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nBefore moving on, it's worth taking a closer look at the `write_record`\nmethod. In this example, it looks rather simple, but if you're new to Rust then\nits type signature might look a little daunting:\n\n```ignore\npub fn write_record<I, T>(&mut self, record: I) -> csv::Result<()>\n    where I: IntoIterator<Item=T>, T: AsRef<[u8]>\n{\n    // implementation elided\n}\n```\n\nTo understand the type signature, we can break it down piece by piece.\n\n1. The method takes two parameters: `self` and `record`.\n2. `self` is a special parameter that corresponds to the `Writer` itself.\n3. `record` is the CSV record we'd like to write. Its type is `I`, which is\n   a generic type.\n4. In the method's `where` clause, the `I` type is constrained by the\n   `IntoIterator<Item=T>` bound. What that means is that `I` must satisfy the\n   `IntoIterator` trait. If you look at the documentation of the\n   [`IntoIterator` trait](https://doc.rust-lang.org/std/iter/trait.IntoIterator.html),\n   then we can see that it describes types that can build iterators. In this\n   case, we want an iterator that yields *another* generic type `T`, where\n   `T` is the type of each field we want to write.\n5. `T` also appears in the method's `where` clause, but its constraint is the\n   `AsRef<[u8]>` bound. The `AsRef` trait is a way to describe zero cost\n   conversions between types in Rust. In this case, the `[u8]` in `AsRef<[u8]>`\n   means that we want to be able to *borrow* a slice of bytes from `T`.\n   The CSV writer will take these bytes and write them as a single field.\n   The `AsRef<[u8]>` bound is useful because types like `String`, `&str`,\n   `Vec<u8>` and `&[u8]` all satisfy it.\n6. Finally, the method returns a `csv::Result<()>`, which is short-hand for\n   `Result<(), csv::Error>`. That means `write_record` either returns nothing\n   on success or returns a `csv::Error` on failure.\n\nNow, let's apply our new found understanding of the type signature of\n`write_record`. If you recall, in our previous example, we used it like so:\n\n```ignore\nwtr.write_record(&[\"field 1\", \"field 2\", \"etc\"])?;\n```\n\nSo how do the types match up? Well, the type of each of our fields in this\ncode is `&'static str` (which is the type of a string literal in Rust). Since\nwe put them in a slice literal, the type of our parameter is\n`&'static [&'static str]`, or more succinctly written as `&[&str]` without the\nlifetime annotations. Since slices satisfy the `IntoIterator` bound and\nstrings satisfy the `AsRef<[u8]>` bound, this ends up being a legal call.\n\nHere are a few more examples of ways you can call `write_record`:\n\n```no_run\n# use csv;\n# let mut wtr = csv::Writer::from_writer(vec![]);\n// A slice of byte strings.\nwtr.write_record(&[b\"a\", b\"b\", b\"c\"]);\n// A vector.\nwtr.write_record(vec![\"a\", \"b\", \"c\"]);\n// A string record.\nwtr.write_record(&csv::StringRecord::from(vec![\"a\", \"b\", \"c\"]));\n// A byte record.\nwtr.write_record(&csv::ByteRecord::from(vec![\"a\", \"b\", \"c\"]));\n```\n\nFinally, the example above can be easily adapted to write to a file instead\nof `stdout`:\n\n```no_run\n//tutorial-write-02.rs\nuse std::env;\nuse std::error::Error;\nuse std::ffi::OsString;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let file_path = get_first_arg()?;\n    let mut wtr = csv::Writer::from_path(file_path)?;\n\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n    wtr.write_record(&[\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])?;\n    wtr.write_record(&[\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])?;\n    wtr.write_record(&[\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])?;\n\n    wtr.flush()?;\n    Ok(())\n}\n\n/// Returns the first positional argument sent to this process. If there are no\n/// positional arguments, then this returns an error.\nfn get_first_arg() -> Result<OsString, Box<dyn Error>> {\n    match env::args_os().nth(1) {\n        None => Err(From::from(\"expected 1 argument, but got none\")),\n        Some(file_path) => Ok(file_path),\n    }\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\n## Writing tab separated values\n\nIn the previous section, we saw how to write some simple CSV data to `stdout`\nthat looked like this:\n\n```text\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nYou might wonder to yourself: what's the point of using a CSV writer if the\ndata is so simple? Well, the benefit of a CSV writer is that it can handle all\ntypes of data without sacrificing the integrity of your data. That is, it knows\nwhen to quote fields that contain special CSV characters (like commas or new\nlines) or escape literal quotes that appear in your data. The CSV writer can\nalso be easily configured to use different delimiters or quoting strategies.\n\nIn this section, we'll take a look a look at how to tweak some of the settings\non a CSV writer. In particular, we'll write TSV (\"tab separated values\")\ninstead of CSV, and we'll ask the CSV writer to quote all non-numeric fields.\nHere's an example:\n\n```no_run\n//tutorial-write-delimiter-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::WriterBuilder::new()\n        .delimiter(b'\\t')\n        .quote_style(csv::QuoteStyle::NonNumeric)\n        .from_writer(io::stdout());\n\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n    wtr.write_record(&[\"Davidsons Landing\", \"AK\", \"\", \"65.2419444\", \"-165.2716667\"])?;\n    wtr.write_record(&[\"Kenai\", \"AK\", \"7610\", \"60.5544444\", \"-151.2583333\"])?;\n    wtr.write_record(&[\"Oakman\", \"AL\", \"\", \"33.7133333\", \"-87.3886111\"])?;\n\n    wtr.flush()?;\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompiling and running this example gives:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\n\"City\"  \"State\" \"Population\"    \"Latitude\"      \"Longitude\"\n\"Davidsons Landing\"     \"AK\"    \"\"      65.2419444      -165.2716667\n\"Kenai\" \"AK\"    7610    60.5544444      -151.2583333\n\"Oakman\"        \"AL\"    \"\"      33.7133333      -87.3886111\n```\n\nIn this example, we used a new type\n[`QuoteStyle`](../enum.QuoteStyle.html).\nThe `QuoteStyle` type represents the different quoting strategies available\nto you. The default is to add quotes to fields only when necessary. This\nprobably works for most use cases, but you can also ask for quotes to always\nbe put around fields, to never be put around fields or to always be put around\nnon-numeric fields.\n\n## Writing with Serde\n\nJust like the CSV reader supports automatic deserialization into Rust types\nwith Serde, the CSV writer supports automatic serialization from Rust types\ninto CSV records using Serde. In this section, we'll learn how to use it.\n\nAs with reading, let's start by seeing how we can serialize a Rust tuple.\n\n```no_run\n//tutorial-write-serde-01.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // We still need to write headers manually.\n    wtr.write_record(&[\"City\", \"State\", \"Population\", \"Latitude\", \"Longitude\"])?;\n\n    // But now we can write records by providing a normal Rust value.\n    //\n    // Note that the odd `None::<u64>` syntax is required because `None` on\n    // its own doesn't have a concrete type, but Serde needs a concrete type\n    // in order to serialize it. That is, `None` has type `Option<T>` but\n    // `None::<u64>` has type `Option<u64>`.\n    wtr.serialize((\"Davidsons Landing\", \"AK\", None::<u64>, 65.2419444, -165.2716667))?;\n    wtr.serialize((\"Kenai\", \"AK\", Some(7610), 60.5544444, -151.2583333))?;\n    wtr.serialize((\"Oakman\", \"AL\", None::<u64>, 33.7133333, -87.3886111))?;\n\n    wtr.flush()?;\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompiling and running this program gives the expected output:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nThe key thing to note in the above example is the use of `serialize` instead\nof `write_record` to write our data. In particular, `write_record` is used\nwhen writing a simple record that contains string-like data only. On the other\nhand, `serialize` is used when your data consists of more complex values like\nnumbers, floats or optional values. Of course, you could always convert the\ncomplex values to strings and then use `write_record`, but Serde can do it for\nyou automatically.\n\nAs with reading, we can also serialize custom structs as CSV records. As a\nbonus, the fields in a struct will automatically be written as a header\nrecord!\n\nTo write custom structs as CSV records, we'll need to make use of Serde's\nautomatic `derive` feature again. As in the\n[previous section on reading with Serde](#reading-with-serde),\nwe'll need to add a couple crates to our `[dependencies]` section in our\n`Cargo.toml` (if they aren't already there):\n\n```text\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\nAnd we'll also need to add a new `use` statement to our code, for Serde, as\nshown in the example:\n\n```no_run\n//tutorial-write-serde-02.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Serialize;\n\n// Note that structs can derive both Serialize and Deserialize!\n#[derive(Debug, Serialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record<'a> {\n    city: &'a str,\n    state: &'a str,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    wtr.serialize(Record {\n        city: \"Davidsons Landing\",\n        state: \"AK\",\n        population: None,\n        latitude: 65.2419444,\n        longitude: -165.2716667,\n    })?;\n    wtr.serialize(Record {\n        city: \"Kenai\",\n        state: \"AK\",\n        population: Some(7610),\n        latitude: 60.5544444,\n        longitude: -151.2583333,\n    })?;\n    wtr.serialize(Record {\n        city: \"Oakman\",\n        state: \"AL\",\n        population: None,\n        latitude: 33.7133333,\n        longitude: -87.3886111,\n    })?;\n\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nCompiling and running this example has the same output as last time, even\nthough we didn't explicitly write a header record:\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor\nCity,State,Population,Latitude,Longitude\nDavidsons Landing,AK,,65.2419444,-165.2716667\nKenai,AK,7610,60.5544444,-151.2583333\nOakman,AL,,33.7133333,-87.3886111\n```\n\nIn this case, the `serialize` method noticed that we were writing a struct\nwith field names. When this happens, `serialize` will automatically write a\nheader record (only if no other records have been written) that consists of\nthe fields in the struct in the order in which they are defined. Note that\nthis behavior can be disabled with the\n[`WriterBuilder::has_headers`](../struct.WriterBuilder.html#method.has_headers)\nmethod.\n\nIt's also worth pointing out the use of a *lifetime parameter* in our `Record`\nstruct:\n\n```ignore\nstruct Record<'a> {\n    city: &'a str,\n    state: &'a str,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n```\n\nThe `'a` lifetime parameter corresponds to the lifetime of the `city` and\n`state` string slices. This says that the `Record` struct contains *borrowed*\ndata. We could have written our struct without borrowing any data, and\ntherefore, without any lifetime parameters:\n\n```ignore\nstruct Record {\n    city: String,\n    state: String,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n```\n\nHowever, since we had to replace our borrowed `&str` types with owned `String`\ntypes, we're now forced to allocate a new `String` value for both of `city`\nand `state` for every record that we write. There's no intrinsic problem with\ndoing that, but it might be a bit wasteful.\n\nFor more examples and more details on the rules for serialization, please see\nthe\n[`Writer::serialize`](../struct.Writer.html#method.serialize)\nmethod.\n\n# Pipelining\n\nIn this section, we're going to cover a few examples that demonstrate programs\nthat take CSV data as input, and produce possibly transformed or filtered CSV\ndata as output. This shows how to write a complete program that efficiently\nreads and writes CSV data. Rust is well positioned to perform this task, since\nyou'll get great performance with the convenience of a high level CSV library.\n\n## Filter by search\n\nThe first example of CSV pipelining we'll look at is a simple filter. It takes\nas input some CSV data on stdin and a single string query as its only\npositional argument, and it will produce as output CSV data that only contains\nrows with a field that matches the query.\n\n```no_run\n//tutorial-pipeline-search-01.rs\nuse std::env;\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn run() -> Result<(), Box<dyn Error>> {\n    // Get the query from the positional arguments.\n    // If one doesn't exist, return an error.\n    let query = match env::args().nth(1) {\n        None => return Err(From::from(\"expected 1 argument, but got none\")),\n        Some(query) => query,\n    };\n\n    // Build CSV readers and writers to stdin and stdout, respectively.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // Before reading our data records, we should write the header record.\n    wtr.write_record(rdr.headers()?)?;\n\n    // Iterate over all the records in `rdr`, and write only records containing\n    // `query` to `wtr`.\n    for result in rdr.records() {\n        let record = result?;\n        if record.iter().any(|field| field == &query) {\n            wtr.write_record(&record)?;\n        }\n    }\n\n    // CSV writers use an internal buffer, so we should always flush when done.\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nIf we compile and run this program with a query of `MA` on `uspop.csv`, we'll\nsee that only one record matches:\n\n```text\n$ cargo build\n$ ./csvtutor MA < uspop.csv\nCity,State,Population,Latitude,Longitude\nReading,MA,23441,42.5255556,-71.0958333\n```\n\nThis example doesn't actually introduce anything new. It merely combines what\nyou've already learned about CSV readers and writers from previous sections.\n\nLet's add a twist to this example. In the real world, you're often faced with\nmessy CSV data that might not be encoded correctly. One example you might come\nacross is CSV data encoded in\n[Latin-1](https://en.wikipedia.org/wiki/ISO/IEC_8859-1).\nUnfortunately, for the examples we've seen so far, our CSV reader assumes that\nall of the data is UTF-8. Since all of the data we've worked on has been\nASCII---which is a subset of both Latin-1 and UTF-8---we haven't had any\nproblems. But let's introduce a slightly tweaked version of our `uspop.csv`\nfile that contains an encoding of a Latin-1 character that is invalid UTF-8.\nYou can get the data like so:\n\n```text\n$ curl -LO 'https://raw.githubusercontent.com/BurntSushi/rust-csv/master/examples/data/uspop-latin1.csv'\n```\n\nEven though I've already given away the problem, let's see what happen when\nwe try to run our previous example on this new data:\n\n```text\n$ ./csvtutor MA < uspop-latin1.csv\nCity,State,Population,Latitude,Longitude\nCSV parse error: record 3 (line 4, field: 0, byte: 125): invalid utf-8: invalid UTF-8 in field 0 near byte index 0\n```\n\nThe error message tells us exactly what's wrong. Let's take a look at line 4\nto see what we're dealing with:\n\n```text\n$ head -n4 uspop-latin1.csv | tail -n1\nÕakman,AL,,33.7133333,-87.3886111\n```\n\nIn this case, the very first character is the Latin-1 `Õ`, which is encoded as\nthe byte `0xD5`, which is in turn invalid UTF-8. So what do we do now that our\nCSV parser has choked on our data? You have two choices. The first is to go in\nand fix up your CSV data so that it's valid UTF-8. This is probably a good\nidea anyway, and tools like `iconv` can help with the task of transcoding.\nBut if you can't or don't want to do that, then you can instead read CSV data\nin a way that is mostly encoding agnostic (so long as ASCII is still a valid\nsubset). The trick is to use *byte records* instead of *string records*.\n\nThus far, we haven't actually talked much about the type of a record in this\nlibrary, but now is a good time to introduce them. There are two of them,\n[`StringRecord`](../struct.StringRecord.html)\nand\n[`ByteRecord`](../struct.ByteRecord.html).\nEach them represent a single record in CSV data, where a record is a sequence\nof an arbitrary number of fields. The only difference between `StringRecord`\nand `ByteRecord` is that `StringRecord` is guaranteed to be valid UTF-8, where\nas `ByteRecord` contains arbitrary bytes.\n\nArmed with that knowledge, we can now begin to understand why we saw an error\nwhen we ran the last example on data that wasn't UTF-8. Namely, when we call\n`records`, we get back an iterator of `StringRecord`. Since `StringRecord` is\nguaranteed to be valid UTF-8, trying to build a `StringRecord` with invalid\nUTF-8 will result in the error that we see.\n\nAll we need to do to make our example work is to switch from a `StringRecord`\nto a `ByteRecord`. This means using `byte_records` to create our iterator\ninstead of `records`, and similarly using `byte_headers` instead of `headers`\nif we think our header data might contain invalid UTF-8 as well. Here's the\nchange:\n\n```no_run\n//tutorial-pipeline-search-02.rs\n# use std::env;\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<(), Box<dyn Error>> {\n    let query = match env::args().nth(1) {\n        None => return Err(From::from(\"expected 1 argument, but got none\")),\n        Some(query) => query,\n    };\n\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    wtr.write_record(rdr.byte_headers()?)?;\n\n    for result in rdr.byte_records() {\n        let record = result?;\n        // `query` is a `String` while `field` is now a `&[u8]`, so we'll\n        // need to convert `query` to `&[u8]` before doing a comparison.\n        if record.iter().any(|field| field == query.as_bytes()) {\n            wtr.write_record(&record)?;\n        }\n    }\n\n    wtr.flush()?;\n    Ok(())\n}\n#\n# fn main() {\n#     if let Err(err) = run() {\n#         println!(\"{}\", err);\n#         process::exit(1);\n#     }\n# }\n```\n\nCompiling and running this now yields the same results as our first example,\nbut this time it works on data that isn't valid UTF-8.\n\n```text\n$ cargo build\n$ ./csvtutor MA < uspop-latin1.csv\nCity,State,Population,Latitude,Longitude\nReading,MA,23441,42.5255556,-71.0958333\n```\n\n## Filter by population count\n\nIn this section, we will show another example program that both reads and\nwrites CSV data, but instead of dealing with arbitrary records, we will use\nSerde to deserialize and serialize records with specific types.\n\nFor this program, we'd like to be able to filter records in our population data\nby population count. Specifically, we'd like to see which records meet a\ncertain population threshold. In addition to using a simple inequality, we must\nalso account for records that have a missing population count. This is where\ntypes like `Option<T>` come in handy, because the compiler will force us to\nconsider the case when the population count is missing.\n\nSince we're using Serde in this example, don't forget to add the Serde\ndependencies to your `Cargo.toml` in your `[dependencies]` section if they\naren't already there:\n\n```text\nserde = { version = \"1\", features = [\"derive\"] }\n```\n\nNow here's the code:\n\n```no_run\n//tutorial-pipeline-pop-01.rs\nuse std::env;\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::{Deserialize, Serialize};\n\n// Unlike previous examples, we derive both Deserialize and Serialize. This\n// means we'll be able to automatically deserialize and serialize this type.\n#[derive(Debug, Deserialize, Serialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    city: String,\n    state: String,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<(), Box<dyn Error>> {\n    // Get the query from the positional arguments.\n    // If one doesn't exist or isn't an integer, return an error.\n    let minimum_pop: u64 = match env::args().nth(1) {\n        None => return Err(From::from(\"expected 1 argument, but got none\")),\n        Some(arg) => arg.parse()?,\n    };\n\n    // Build CSV readers and writers to stdin and stdout, respectively.\n    // Note that we don't need to write headers explicitly. Since we're\n    // serializing a custom struct, that's done for us automatically.\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut wtr = csv::Writer::from_writer(io::stdout());\n\n    // Iterate over all the records in `rdr`, and write only records containing\n    // a population that is greater than or equal to `minimum_pop`.\n    for result in rdr.deserialize() {\n        // Remember that when deserializing, we must use a type hint to\n        // indicate which type we want to deserialize our record into.\n        let record: Record = result?;\n\n        // `map_or` is a combinator on `Option`. It take two parameters:\n        // a value to use when the `Option` is `None` (i.e., the record has\n        // no population count) and a closure that returns another value of\n        // the same type when the `Option` is `Some`. In this case, we test it\n        // against our minimum population count that we got from the command\n        // line.\n        if record.population.map_or(false, |pop| pop >= minimum_pop) {\n            wtr.serialize(record)?;\n        }\n    }\n\n    // CSV writers use an internal buffer, so we should always flush when done.\n    wtr.flush()?;\n    Ok(())\n}\n\nfn main() {\n    if let Err(err) = run() {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n}\n```\n\nIf we compile and run our program with a minimum threshold of `100000`, we\nshould see three matching records. Notice that the headers were added even\nthough we never explicitly wrote them!\n\n```text\n$ cargo build\n$ ./target/debug/csvtutor 100000 < uspop.csv\nCity,State,Population,Latitude,Longitude\nFontana,CA,169160,34.0922222,-117.4341667\nBridgeport,CT,139090,41.1669444,-73.2052778\nIndianapolis,IN,773283,39.7683333,-86.1580556\n```\n\n# Performance\n\nIn this section, we'll go over how to squeeze the most juice out of our CSV\nreader. As it happens, most of the APIs we've seen so far were designed with\nhigh level convenience in mind, and that often comes with some costs. For the\nmost part, those costs revolve around unnecessary allocations. Therefore, most\nof the section will show how to do CSV parsing with as little allocation as\npossible.\n\nThere are two critical preliminaries we must cover.\n\nFirstly, when you care about performance, you should compile your code\nwith `cargo build --release` instead of `cargo build`. The `--release`\nflag instructs the compiler to spend more time optimizing your code. When\ncompiling with the `--release` flag, you'll find your compiled program at\n`target/release/csvtutor` instead of `target/debug/csvtutor`. Throughout this\ntutorial, we've used `cargo build` because our dataset was small and we weren't\nfocused on speed. The downside of `cargo build --release` is that it will take\nlonger than `cargo build`.\n\nSecondly, the dataset we've used throughout this tutorial only has 100 records.\nWe'd have to try really hard to cause our program to run slowly on 100 records,\neven when we compile without the `--release` flag. Therefore, in order to\nactually witness a performance difference, we need a bigger dataset. To get\nsuch a dataset, we'll use the original source of `uspop.csv`. **Warning: the\ndownload is 41MB compressed and decompresses to 145MB.**\n\n```text\n$ curl -LO http://burntsushi.net/stuff/worldcitiespop.csv.gz\n$ gunzip worldcitiespop.csv.gz\n$ wc worldcitiespop.csv\n  3173959   5681543 151492068 worldcitiespop.csv\n$ md5sum worldcitiespop.csv\n6198bd180b6d6586626ecbf044c1cca5  worldcitiespop.csv\n```\n\nFinally, it's worth pointing out that this section is not attempting to\npresent a rigorous set of benchmarks. We will stay away from rigorous analysis\nand instead rely a bit more on wall clock times and intuition.\n\n## Amortizing allocations\n\nIn order to measure performance, we must be careful about what it is we're\nmeasuring. We must also be careful to not change the thing we're measuring as\nwe make improvements to the code. For this reason, we will focus on measuring\nhow long it takes to count the number of records corresponding to city\npopulation counts in Massachusetts. This represents a very small amount of work\nthat requires us to visit every record, and therefore represents a decent way\nto measure how long it takes to do CSV parsing.\n\nBefore diving into our first optimization, let's start with a baseline by\nadapting a previous example to count the number of records in\n`worldcitiespop.csv`:\n\n```no_run\n//tutorial-perf-alloc-01.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n\n    let mut count = 0;\n    for result in rdr.records() {\n        let record = result?;\n        if &record[0] == \"us\" && &record[3] == \"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n\nfn main() {\n    match run() {\n        Ok(count) => {\n            println!(\"{}\", count);\n        }\n        Err(err) => {\n            println!(\"{}\", err);\n            process::exit(1);\n        }\n    }\n}\n```\n\nNow let's compile and run it and see what kind of timing we get. Don't forget\nto compile with the `--release` flag. (For grins, try compiling without the\n`--release` flag and see how long it takes to run the program!)\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.645s\nuser    0m0.627s\nsys     0m0.017s\n```\n\nAll right, so what's the first thing we can do to make this faster? This\nsection promised to speed things up by amortizing allocation, but we can do\nsomething even simpler first: iterate over\n[`ByteRecord`](../struct.ByteRecord.html)s\ninstead of\n[`StringRecord`](../struct.StringRecord.html)s.\nIf you recall from a previous section, a `StringRecord` is guaranteed to be\nvalid UTF-8, and therefore must validate that its contents is actually UTF-8.\n(If validation fails, then the CSV reader will return an error.) If we remove\nthat validation from our program, then we can realize a nice speed boost as\nshown in the next example:\n\n```no_run\n//tutorial-perf-alloc-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n\n    let mut count = 0;\n    for result in rdr.byte_records() {\n        let record = result?;\n        if &record[0] == b\"us\" && &record[3] == b\"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nAnd now compile and run:\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.429s\nuser    0m0.403s\nsys     0m0.023s\n```\n\nOur program is now approximately 30% faster, all because we removed UTF-8\nvalidation. But was it actually okay to remove UTF-8 validation? What have we\nlost? In this case, it is perfectly acceptable to drop UTF-8 validation and use\n`ByteRecord` instead because all we're doing with the data in the record is\ncomparing two of its fields to raw bytes:\n\n```ignore\nif &record[0] == b\"us\" && &record[3] == b\"MA\" {\n    count += 1;\n}\n```\n\nIn particular, it doesn't matter whether `record` is valid UTF-8 or not, since\nwe're checking for equality on the raw bytes themselves.\n\nUTF-8 validation via `StringRecord` is useful because it provides access to\nfields as `&str` types, where as `ByteRecord` provides fields as `&[u8]` types.\n`&str` is the type of a borrowed string in Rust, which provides convenient\naccess to string APIs like substring search. Strings are also frequently used\nin other areas, so they tend to be a useful thing to have. Therefore, sticking\nwith `StringRecord` is a good default, but if you need the extra speed and can\ndeal with arbitrary bytes, then switching to `ByteRecord` might be a good idea.\n\nMoving on, let's try to get another speed boost by amortizing allocation.\nAmortizing allocation is the technique that creates an allocation once (or\nvery rarely), and then attempts to reuse it instead of creating additional\nallocations. In the case of the previous examples, we used iterators created\nby the `records` and `byte_records` methods on a CSV reader. These iterators\nallocate a new record for every item that it yields, which in turn corresponds\nto a new allocation. It does this because iterators cannot yield items that\nborrow from the iterator itself, and because creating new allocations tends to\nbe a lot more convenient.\n\nIf we're willing to forgo use of iterators, then we can amortize allocations\nby creating a *single* `ByteRecord` and asking the CSV reader to read into it.\nWe do this by using the\n[`Reader::read_byte_record`](../struct.Reader.html#method.read_byte_record)\nmethod.\n\n```no_run\n//tutorial-perf-alloc-03.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut record = csv::ByteRecord::new();\n\n    let mut count = 0;\n    while rdr.read_byte_record(&mut record)? {\n        if &record[0] == b\"us\" && &record[3] == b\"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nCompile and run:\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.308s\nuser    0m0.283s\nsys     0m0.023s\n```\n\nWoohoo! This represents *another* 30% boost over the previous example, which is\na 50% boost over the first example.\n\nLet's dissect this code by taking a look at the type signature of the\n`read_byte_record` method:\n\n```ignore\nfn read_byte_record(&mut self, record: &mut ByteRecord) -> csv::Result<bool>;\n```\n\nThis method takes as input a CSV reader (the `self` parameter) and a *mutable\nborrow* of a `ByteRecord`, and returns a `csv::Result<bool>`. (The\n`csv::Result<bool>` is equivalent to `Result<bool, csv::Error>`.) The return\nvalue is `true` if and only if a record was read. When it's `false`, that means\nthe reader has exhausted its input. This method works by copying the contents\nof the next record into the provided `ByteRecord`. Since the same `ByteRecord`\nis used to read every record, it will already have space allocated for data.\nWhen `read_byte_record` runs, it will overwrite the contents that were there\nwith the new record, which means that it can reuse the space that was\nallocated. Thus, we have *amortized allocation*.\n\nAn exercise you might consider doing is to use a `StringRecord` instead of a\n`ByteRecord`, and therefore\n[`Reader::read_record`](../struct.Reader.html#method.read_record)\ninstead of `read_byte_record`. This will give you easy access to Rust strings\nat the cost of UTF-8 validation but *without* the cost of allocating a new\n`StringRecord` for every record.\n\n## Serde and zero allocation\n\nIn this section, we are going to briefly examine how we use Serde and what we\ncan do to speed it up. The key optimization we'll want to make is to---you\nguessed it---amortize allocation.\n\nAs with the previous section, let's start with a simple baseline based off an\nexample using Serde in a previous section:\n\n```no_run\n//tutorial-perf-serde-01.rs\nuse std::error::Error;\nuse std::io;\nuse std::process;\n\nuse serde::Deserialize;\n\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record {\n    country: String,\n    city: String,\n    accent_city: String,\n    region: String,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n\n    let mut count = 0;\n    for result in rdr.deserialize() {\n        let record: Record = result?;\n        if record.country == \"us\" && record.region == \"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n\nfn main() {\n    match run() {\n        Ok(count) => {\n            println!(\"{}\", count);\n        }\n        Err(err) => {\n            println!(\"{}\", err);\n            process::exit(1);\n        }\n    }\n}\n```\n\nNow compile and run this program:\n\n```text\n$ cargo build --release\n$ ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m1.381s\nuser    0m1.367s\nsys     0m0.013s\n```\n\nThe first thing you might notice is that this is quite a bit slower than our\nprograms in the previous section. This is because deserializing each record\nhas a certain amount of overhead to it. In particular, some of the fields need\nto be parsed as integers or floating point numbers, which isn't free. However,\nthere is hope yet, because we can speed up this program!\n\nOur first attempt to speed up the program will be to amortize allocation. Doing\nthis with Serde is a bit trickier than before, because we need to change our\n`Record` type and use the manual deserialization API. Let's see what that looks\nlike:\n\n```no_run\n//tutorial-perf-serde-02.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record<'a> {\n    country: &'a str,\n    city: &'a str,\n    accent_city: &'a str,\n    region: &'a str,\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut raw_record = csv::StringRecord::new();\n    let headers = rdr.headers()?.clone();\n\n    let mut count = 0;\n    while rdr.read_record(&mut raw_record)? {\n        let record: Record = raw_record.deserialize(Some(&headers))?;\n        if record.country == \"us\" && record.region == \"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nCompile and run:\n\n```text\n$ cargo build --release\n$ ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m1.055s\nuser    0m1.040s\nsys     0m0.013s\n```\n\nThis corresponds to an approximately 24% increase in performance. To achieve\nthis, we had to make two important changes.\n\nThe first was to make our `Record` type contain `&str` fields instead of\n`String` fields. If you recall from a previous section, `&str` is a *borrowed*\nstring where a `String` is an *owned* string. A borrowed string points to\na already existing allocation where as a `String` always implies a new\nallocation. In this case, our `&str` is borrowing from the CSV record itself.\n\nThe second change we had to make was to stop using the\n[`Reader::deserialize`](../struct.Reader.html#method.deserialize)\niterator, and instead deserialize our record into a `StringRecord` explicitly\nand then use the\n[`StringRecord::deserialize`](../struct.StringRecord.html#method.deserialize)\nmethod to deserialize a single record.\n\nThe second change is a bit tricky, because in order for it to work, our\n`Record` type needs to borrow from the data inside the `StringRecord`. That\nmeans that our `Record` value cannot outlive the `StringRecord` that it was\ncreated from. Since we overwrite the same `StringRecord` on each iteration\n(in order to amortize allocation), that means our `Record` value must evaporate\nbefore the next iteration of the loop. Indeed, the compiler will enforce this!\n\nThere is one more optimization we can make: remove UTF-8 validation. In\ngeneral, this means using `&[u8]` instead of `&str` and `ByteRecord` instead\nof `StringRecord`:\n\n```no_run\n//tutorial-perf-serde-03.rs\n# use std::error::Error;\n# use std::io;\n# use std::process;\n#\n# use serde::Deserialize;\n#\n#[derive(Debug, Deserialize)]\n#[serde(rename_all = \"PascalCase\")]\nstruct Record<'a> {\n    country: &'a [u8],\n    city: &'a [u8],\n    accent_city: &'a [u8],\n    region: &'a [u8],\n    population: Option<u64>,\n    latitude: f64,\n    longitude: f64,\n}\n\nfn run() -> Result<u64, Box<dyn Error>> {\n    let mut rdr = csv::Reader::from_reader(io::stdin());\n    let mut raw_record = csv::ByteRecord::new();\n    let headers = rdr.byte_headers()?.clone();\n\n    let mut count = 0;\n    while rdr.read_byte_record(&mut raw_record)? {\n        let record: Record = raw_record.deserialize(Some(&headers))?;\n        if record.country == b\"us\" && record.region == b\"MA\" {\n            count += 1;\n        }\n    }\n    Ok(count)\n}\n#\n# fn main() {\n#     match run() {\n#         Ok(count) => {\n#             println!(\"{}\", count);\n#         }\n#         Err(err) => {\n#             println!(\"{}\", err);\n#             process::exit(1);\n#         }\n#     }\n# }\n```\n\nCompile and run:\n\n```text\n$ cargo build --release\n$ ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.873s\nuser    0m0.850s\nsys     0m0.023s\n```\n\nThis corresponds to a 17% increase over the previous example and a 37% increase\nover the first example.\n\nIn sum, Serde parsing is still quite fast, but will generally not be the\nfastest way to parse CSV since it necessarily needs to do more work.\n\n## CSV parsing without the standard library\n\nIn this section, we will explore a niche use case: parsing CSV without the\nstandard library. While the `csv` crate itself requires the standard library,\nthe underlying parser is actually part of the\n[`csv-core`](https://docs.rs/csv-core)\ncrate, which does not depend on the standard library. The downside of not\ndepending on the standard library is that CSV parsing becomes a lot more\ninconvenient.\n\nThe `csv-core` crate is structured similarly to the `csv` crate. There is a\n[`Reader`](../../csv_core/struct.Reader.html)\nand a\n[`Writer`](../../csv_core/struct.Writer.html),\nas well as corresponding builders\n[`ReaderBuilder`](../../csv_core/struct.ReaderBuilder.html)\nand\n[`WriterBuilder`](../../csv_core/struct.WriterBuilder.html).\nThe `csv-core` crate has no record types or iterators. Instead, CSV data\ncan either be read one field at a time or one record at a time. In this\nsection, we'll focus on reading a field at a time since it is simpler, but it\nis generally faster to read a record at a time since it does more work per\nfunction call.\n\nIn keeping with this section on performance, let's write a program using only\n`csv-core` that counts the number of records in the state of Massachusetts.\n\n(Note that we unfortunately use the standard library in this example even\nthough `csv-core` doesn't technically require it. We do this for convenient\naccess to I/O, which would be harder without the standard library.)\n\n```no_run\n//tutorial-perf-core-01.rs\nuse std::io::{self, Read};\nuse std::process;\n\nuse csv_core::{Reader, ReadFieldResult};\n\nfn run(mut data: &[u8]) -> Option<u64> {\n    let mut rdr = Reader::new();\n\n    // Count the number of records in Massachusetts.\n    let mut count = 0;\n    // Indicates the current field index. Reset to 0 at start of each record.\n    let mut fieldidx = 0;\n    // True when the current record is in the United States.\n    let mut inus = false;\n    // Buffer for field data. Must be big enough to hold the largest field.\n    let mut field = [0; 1024];\n    loop {\n        // Attempt to incrementally read the next CSV field.\n        let (result, nread, nwrite) = rdr.read_field(data, &mut field);\n        // nread is the number of bytes read from our input. We should never\n        // pass those bytes to read_field again.\n        data = &data[nread..];\n        // nwrite is the number of bytes written to the output buffer `field`.\n        // The contents of the buffer after this point is unspecified.\n        let field = &field[..nwrite];\n\n        match result {\n            // We don't need to handle this case because we read all of the\n            // data up front. If we were reading data incrementally, then this\n            // would be a signal to read more.\n            ReadFieldResult::InputEmpty => {}\n            // If we get this case, then we found a field that contains more\n            // than 1024 bytes. We keep this example simple and just fail.\n            ReadFieldResult::OutputFull => {\n                return None;\n            }\n            // This case happens when we've successfully read a field. If the\n            // field is the last field in a record, then `record_end` is true.\n            ReadFieldResult::Field { record_end } => {\n                if fieldidx == 0 && field == b\"us\" {\n                    inus = true;\n                } else if inus && fieldidx == 3 && field == b\"MA\" {\n                    count += 1;\n                }\n                if record_end {\n                    fieldidx = 0;\n                    inus = false;\n                } else {\n                    fieldidx += 1;\n                }\n            }\n            // This case happens when the CSV reader has successfully exhausted\n            // all input.\n            ReadFieldResult::End => {\n                break;\n            }\n        }\n    }\n    Some(count)\n}\n\nfn main() {\n    // Read the entire contents of stdin up front.\n    let mut data = vec![];\n    if let Err(err) = io::stdin().read_to_end(&mut data) {\n        println!(\"{}\", err);\n        process::exit(1);\n    }\n    match run(&data) {\n        None => {\n            println!(\"error: could not count records, buffer too small\");\n            process::exit(1);\n        }\n        Some(count) => {\n            println!(\"{}\", count);\n        }\n    }\n}\n```\n\nAnd compile and run it:\n\n```text\n$ cargo build --release\n$ time ./target/release/csvtutor < worldcitiespop.csv\n2176\n\nreal    0m0.572s\nuser    0m0.513s\nsys     0m0.057s\n```\n\nThis isn't as fast as some of our previous examples where we used the `csv`\ncrate to read into a `StringRecord` or a `ByteRecord`. This is mostly because\nthis example reads a field at a time, which incurs more overhead than reading a\nrecord at a time. To fix this, you would want to use the\n[`Reader::read_record`](../../csv_core/struct.Reader.html#method.read_record)\nmethod instead, which is defined on `csv_core::Reader`.\n\nThe other thing to notice here is that the example is considerably longer than\nthe other examples. This is because we need to do more book keeping to keep\ntrack of which field we're reading and how much data we've already fed to the\nreader. There are basically two reasons to use the `csv_core` crate:\n\n1. If you're in an environment where the standard library is not usable.\n2. If you wanted to build your own csv-like library, you could build it on top\n   of `csv-core`.\n\n# Closing thoughts\n\nCongratulations on making it to the end! It seems incredible that one could\nwrite so many words on something as basic as CSV parsing. I wanted this\nguide to be accessible not only to Rust beginners, but to inexperienced\nprogrammers as well. My hope is that the large number of examples will help\npush you in the right direction.\n\nWith that said, here are a few more things you might want to look at:\n\n* The [API documentation for the `csv` crate](../index.html) documents all\n  facets of the library, and is itself littered with even more examples.\n* The [`csv-index` crate](https://docs.rs/csv-index) provides data structures\n  that can index CSV data that are amenable to writing to disk. (This library\n  is still a work in progress.)\n* The [`xsv` command line tool](https://github.com/BurntSushi/xsv) is a high\n  performance CSV swiss army knife. It can slice, select, search, sort, join,\n  concatenate, index, format and compute statistics on arbitrary CSV data. Give\n  it a try!\n\n*/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/tutorial.rs","byte_start":249247,"byte_end":335450,"line_start":1,"line_end":2520,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1377},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336092,"byte_end":336105,"line_start":23,"line_end":23,"column_start":12,"column_end":25},"name":"WriterBuilder","qualname":"::writer::WriterBuilder","value":"WriterBuilder {  }","parent":null,"children":[{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1381}],"decl_id":null,"docs":" Builds a CSV writer with various configuration knobs.","sig":null,"attributes":[{"value":"/ Builds a CSV writer with various configuration knobs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":335840,"byte_end":335897,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":335898,"byte_end":335901,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This builder can be used to tweak the field delimiter, record terminator","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":335902,"byte_end":335978,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ and more. Once a CSV `Writer` is built, its configuration cannot be","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":335979,"byte_end":336050,"line_start":20,"line_end":20,"column_start":1,"column_end":72}},{"value":"/ changed.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336051,"byte_end":336063,"line_start":21,"line_end":21,"column_start":1,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337203,"byte_end":337206,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<WriterBuilder>::new","value":"pub fn new() -> WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new builder for configuring CSV writing.","sig":null,"attributes":[{"value":"/ Create a new builder for configuring CSV writing.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336492,"byte_end":336545,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336550,"byte_end":336553,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ To convert a builder into a writer, call one of the methods starting","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336558,"byte_end":336630,"line_start":44,"line_end":44,"column_start":5,"column_end":77}},{"value":"/ with `from_`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336635,"byte_end":336652,"line_start":45,"line_end":45,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336657,"byte_end":336660,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336665,"byte_end":336678,"line_start":47,"line_end":47,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336683,"byte_end":336686,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336691,"byte_end":336698,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336703,"byte_end":336729,"line_start":50,"line_end":50,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336734,"byte_end":336761,"line_start":51,"line_end":51,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336766,"byte_end":336769,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336774,"byte_end":336813,"line_start":53,"line_end":53,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336818,"byte_end":336866,"line_start":54,"line_end":54,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336871,"byte_end":336934,"line_start":55,"line_end":55,"column_start":5,"column_end":68}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336939,"byte_end":336983,"line_start":56,"line_end":56,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336988,"byte_end":337032,"line_start":57,"line_end":57,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337037,"byte_end":337040,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337045,"byte_end":337102,"line_start":59,"line_end":59,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337107,"byte_end":337150,"line_start":60,"line_end":60,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337155,"byte_end":337169,"line_start":61,"line_end":61,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337174,"byte_end":337179,"line_start":62,"line_end":62,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337184,"byte_end":337191,"line_start":63,"line_end":63,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338004,"byte_end":338013,"line_start":89,"line_end":89,"column_start":12,"column_end":21},"name":"from_path","qualname":"<WriterBuilder>::from_path","value":"pub fn from_path<P: AsRef<Path>>(&Self, P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[{"value":"/ Build a CSV writer from this configuration that writes data to the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337272,"byte_end":337342,"line_start":68,"line_end":68,"column_start":5,"column_end":75}},{"value":"/ given file path. The file is truncated if it already exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337347,"byte_end":337411,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337416,"byte_end":337419,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ If there was a problem opening the file at the given path, then this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337424,"byte_end":337496,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ returns the corresponding error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337501,"byte_end":337537,"line_start":72,"line_end":72,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337542,"byte_end":337545,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337550,"byte_end":337563,"line_start":74,"line_end":74,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337568,"byte_end":337571,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337576,"byte_end":337589,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337594,"byte_end":337620,"line_start":77,"line_end":77,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337625,"byte_end":337652,"line_start":78,"line_end":78,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337657,"byte_end":337660,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337665,"byte_end":337704,"line_start":80,"line_end":80,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337709,"byte_end":337757,"line_start":81,"line_end":81,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_path(\"foo.csv\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337762,"byte_end":337827,"line_start":82,"line_end":82,"column_start":5,"column_end":70}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337832,"byte_end":337876,"line_start":83,"line_end":83,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337881,"byte_end":337925,"line_start":84,"line_end":84,"column_start":5,"column_end":49}},{"value":"/     wtr.flush()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337930,"byte_end":337951,"line_start":85,"line_end":85,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337956,"byte_end":337970,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337975,"byte_end":337980,"line_start":87,"line_end":87,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":337985,"byte_end":337992,"line_start":88,"line_end":88,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338906,"byte_end":338917,"line_start":115,"line_end":115,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<WriterBuilder>::from_writer","value":"pub fn from_writer<W: io::Write>(&Self, W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer from this configuration that writes data to `wtr`.","sig":null,"attributes":[{"value":"/ Build a CSV writer from this configuration that writes data to `wtr`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338134,"byte_end":338207,"line_start":93,"line_end":93,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338212,"byte_end":338215,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Note that the CSV writer is buffered automatically, so you should not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338220,"byte_end":338293,"line_start":95,"line_end":95,"column_start":5,"column_end":78}},{"value":"/ wrap `wtr` in a buffered writer like `io::BufWriter`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338298,"byte_end":338355,"line_start":96,"line_end":96,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338360,"byte_end":338363,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338368,"byte_end":338381,"line_start":98,"line_end":98,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338386,"byte_end":338389,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338394,"byte_end":338401,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338406,"byte_end":338432,"line_start":101,"line_end":101,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338437,"byte_end":338464,"line_start":102,"line_end":102,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338469,"byte_end":338472,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338477,"byte_end":338516,"line_start":104,"line_end":104,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338521,"byte_end":338569,"line_start":105,"line_end":105,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338574,"byte_end":338637,"line_start":106,"line_end":106,"column_start":5,"column_end":68}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338642,"byte_end":338686,"line_start":107,"line_end":107,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338691,"byte_end":338735,"line_start":108,"line_end":108,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338740,"byte_end":338743,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338748,"byte_end":338805,"line_start":110,"line_end":110,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338810,"byte_end":338853,"line_start":111,"line_end":111,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338858,"byte_end":338872,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338877,"byte_end":338882,"line_start":113,"line_end":113,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":338887,"byte_end":338894,"line_start":114,"line_end":114,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1048},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339692,"byte_end":339701,"line_start":142,"line_end":142,"column_start":12,"column_end":21},"name":"delimiter","qualname":"<WriterBuilder>::delimiter","value":"pub fn delimiter(&mut Self, u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The field delimiter to use when writing CSV.","sig":null,"attributes":[{"value":"/ The field delimiter to use when writing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339004,"byte_end":339052,"line_start":119,"line_end":119,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339057,"byte_end":339060,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ The default is `b','`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339065,"byte_end":339091,"line_start":121,"line_end":121,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339096,"byte_end":339099,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339104,"byte_end":339117,"line_start":123,"line_end":123,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339122,"byte_end":339125,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339130,"byte_end":339137,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339142,"byte_end":339168,"line_start":126,"line_end":126,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339173,"byte_end":339200,"line_start":127,"line_end":127,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339205,"byte_end":339208,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339213,"byte_end":339252,"line_start":129,"line_end":129,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339257,"byte_end":339305,"line_start":130,"line_end":130,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339310,"byte_end":339352,"line_start":131,"line_end":131,"column_start":5,"column_end":47}},{"value":"/         .delimiter(b';')","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339357,"byte_end":339385,"line_start":132,"line_end":132,"column_start":5,"column_end":33}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339390,"byte_end":339423,"line_start":133,"line_end":133,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339428,"byte_end":339472,"line_start":134,"line_end":134,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339477,"byte_end":339521,"line_start":135,"line_end":135,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339526,"byte_end":339529,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339534,"byte_end":339591,"line_start":137,"line_end":137,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a;b;c\\nx;y;z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339596,"byte_end":339639,"line_start":138,"line_end":138,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339644,"byte_end":339658,"line_start":139,"line_end":139,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339663,"byte_end":339668,"line_start":140,"line_end":140,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339673,"byte_end":339680,"line_start":141,"line_end":141,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342724,"byte_end":342735,"line_start":230,"line_end":230,"column_start":12,"column_end":23},"name":"has_headers","qualname":"<WriterBuilder>::has_headers","value":"pub fn has_headers(&mut Self, bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether to write a header row before writing any other row.","sig":null,"attributes":[{"value":"/ Whether to write a header row before writing any other row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339819,"byte_end":339882,"line_start":147,"line_end":147,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339887,"byte_end":339890,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ When this is enabled and the `serialize` method is used to write data","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339895,"byte_end":339968,"line_start":149,"line_end":149,"column_start":5,"column_end":78}},{"value":"/ with something that contains field names (i.e., a struct), then a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":339973,"byte_end":340042,"line_start":150,"line_end":150,"column_start":5,"column_end":74}},{"value":"/ header row is written containing the field names before any other row","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340047,"byte_end":340120,"line_start":151,"line_end":151,"column_start":5,"column_end":78}},{"value":"/ is written.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340125,"byte_end":340140,"line_start":152,"line_end":152,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340145,"byte_end":340148,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ This option has no effect when using other methods to write rows. That","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340153,"byte_end":340227,"line_start":154,"line_end":154,"column_start":5,"column_end":79}},{"value":"/ is, if you don't use `serialize`, then you must write your header row","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340232,"byte_end":340305,"line_start":155,"line_end":155,"column_start":5,"column_end":78}},{"value":"/ explicitly if you want a header row.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340310,"byte_end":340350,"line_start":156,"line_end":156,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340355,"byte_end":340358,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340363,"byte_end":340394,"line_start":158,"line_end":158,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340399,"byte_end":340402,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ # Example: with headers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340407,"byte_end":340434,"line_start":160,"line_end":160,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340439,"byte_end":340442,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ This shows how the header will be automatically written from the field","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340447,"byte_end":340521,"line_start":162,"line_end":162,"column_start":5,"column_end":79}},{"value":"/ names of a struct.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340526,"byte_end":340548,"line_start":163,"line_end":163,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340553,"byte_end":340556,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340561,"byte_end":340568,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340573,"byte_end":340599,"line_start":166,"line_end":166,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340604,"byte_end":340607,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340612,"byte_end":340639,"line_start":168,"line_end":168,"column_start":5,"column_end":32}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340644,"byte_end":340669,"line_start":169,"line_end":169,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340674,"byte_end":340677,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340682,"byte_end":340706,"line_start":171,"line_end":171,"column_start":5,"column_end":29}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340711,"byte_end":340731,"line_start":172,"line_end":172,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340736,"byte_end":340758,"line_start":173,"line_end":173,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340763,"byte_end":340788,"line_start":174,"line_end":174,"column_start":5,"column_end":30}},{"value":"/     // Serde allows us to name our headers exactly,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340793,"byte_end":340848,"line_start":175,"line_end":175,"column_start":5,"column_end":60}},{"value":"/     // even if they don't match our struct field names.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340853,"byte_end":340912,"line_start":176,"line_end":176,"column_start":5,"column_end":64}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340917,"byte_end":340954,"line_start":177,"line_end":177,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340959,"byte_end":340983,"line_start":178,"line_end":178,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340988,"byte_end":340993,"line_start":179,"line_end":179,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":340998,"byte_end":341001,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341006,"byte_end":341045,"line_start":181,"line_end":181,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341050,"byte_end":341098,"line_start":182,"line_end":182,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341103,"byte_end":341166,"line_start":183,"line_end":183,"column_start":5,"column_end":68}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341171,"byte_end":341198,"line_start":184,"line_end":184,"column_start":5,"column_end":32}},{"value":"/         city: \"Boston\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341203,"byte_end":341230,"line_start":185,"line_end":185,"column_start":5,"column_end":32}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341235,"byte_end":341272,"line_start":186,"line_end":186,"column_start":5,"column_end":42}},{"value":"/         population: 4628910,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341277,"byte_end":341309,"line_start":187,"line_end":187,"column_start":5,"column_end":37}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341314,"byte_end":341326,"line_start":188,"line_end":188,"column_start":5,"column_end":17}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341331,"byte_end":341358,"line_start":189,"line_end":189,"column_start":5,"column_end":32}},{"value":"/         city: \"Concord\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341363,"byte_end":341391,"line_start":190,"line_end":190,"column_start":5,"column_end":33}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341396,"byte_end":341433,"line_start":191,"line_end":191,"column_start":5,"column_end":42}},{"value":"/         population: 42695,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341438,"byte_end":341468,"line_start":192,"line_end":192,"column_start":5,"column_end":35}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341473,"byte_end":341485,"line_start":193,"line_end":193,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341490,"byte_end":341493,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341498,"byte_end":341555,"line_start":195,"line_end":195,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341560,"byte_end":341587,"line_start":196,"line_end":196,"column_start":5,"column_end":32}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341592,"byte_end":341617,"line_start":197,"line_end":197,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341622,"byte_end":341654,"line_start":198,"line_end":198,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341659,"byte_end":341690,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ \");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341695,"byte_end":341702,"line_start":200,"line_end":200,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341707,"byte_end":341721,"line_start":201,"line_end":201,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341726,"byte_end":341731,"line_start":202,"line_end":202,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341736,"byte_end":341743,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341748,"byte_end":341751,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example: without headers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341756,"byte_end":341786,"line_start":205,"line_end":205,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341791,"byte_end":341794,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ This shows that serializing things that aren't structs (in this case,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341799,"byte_end":341872,"line_start":207,"line_end":207,"column_start":5,"column_end":78}},{"value":"/ a tuple struct) won't result in a header row being written. This means","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341877,"byte_end":341951,"line_start":208,"line_end":208,"column_start":5,"column_end":79}},{"value":"/ you usually don't need to set `has_headers(false)` unless you","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":341956,"byte_end":342021,"line_start":209,"line_end":209,"column_start":5,"column_end":70}},{"value":"/ explicitly want to both write custom headers and serialize structs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342026,"byte_end":342097,"line_start":210,"line_end":210,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342102,"byte_end":342105,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342110,"byte_end":342117,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342122,"byte_end":342148,"line_start":213,"line_end":213,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342153,"byte_end":342180,"line_start":214,"line_end":214,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342185,"byte_end":342188,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342193,"byte_end":342232,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342237,"byte_end":342285,"line_start":217,"line_end":217,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new().from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342290,"byte_end":342353,"line_start":218,"line_end":218,"column_start":5,"column_end":68}},{"value":"/     wtr.serialize((\"Boston\", \"United States\", 4628910))?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342358,"byte_end":342419,"line_start":219,"line_end":219,"column_start":5,"column_end":66}},{"value":"/     wtr.serialize((\"Concord\", \"United States\", 42695))?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342424,"byte_end":342484,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342489,"byte_end":342492,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342497,"byte_end":342554,"line_start":222,"line_end":222,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342559,"byte_end":342586,"line_start":223,"line_end":223,"column_start":5,"column_end":32}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342591,"byte_end":342623,"line_start":224,"line_end":224,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342628,"byte_end":342659,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/ \");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342664,"byte_end":342671,"line_start":226,"line_end":226,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342676,"byte_end":342690,"line_start":227,"line_end":227,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342695,"byte_end":342700,"line_start":228,"line_end":228,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342705,"byte_end":342712,"line_start":229,"line_end":229,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344693,"byte_end":344701,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"flexible","qualname":"<WriterBuilder>::flexible","value":"pub fn flexible(&mut Self, bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Whether the number of fields in records is allowed to change or not.","sig":null,"attributes":[{"value":"/ Whether the number of fields in records is allowed to change or not.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342838,"byte_end":342910,"line_start":235,"line_end":235,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342915,"byte_end":342918,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ When disabled (which is the default), writing CSV data will return an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":342923,"byte_end":342996,"line_start":237,"line_end":237,"column_start":5,"column_end":78}},{"value":"/ error if a record is written with a number of fields different from the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343001,"byte_end":343076,"line_start":238,"line_end":238,"column_start":5,"column_end":80}},{"value":"/ number of fields written in a previous record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343081,"byte_end":343131,"line_start":239,"line_end":239,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343136,"byte_end":343139,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ When enabled, this error checking is turned off.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343144,"byte_end":343196,"line_start":241,"line_end":241,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343201,"byte_end":343204,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example: writing flexible records","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343209,"byte_end":343248,"line_start":243,"line_end":243,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343253,"byte_end":343256,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343261,"byte_end":343268,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343273,"byte_end":343299,"line_start":246,"line_end":246,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343304,"byte_end":343331,"line_start":247,"line_end":247,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343336,"byte_end":343339,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343344,"byte_end":343383,"line_start":249,"line_end":249,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343388,"byte_end":343436,"line_start":250,"line_end":250,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343441,"byte_end":343483,"line_start":251,"line_end":251,"column_start":5,"column_end":47}},{"value":"/         .flexible(true)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343488,"byte_end":343515,"line_start":252,"line_end":252,"column_start":5,"column_end":32}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343520,"byte_end":343553,"line_start":253,"line_end":253,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343558,"byte_end":343597,"line_start":254,"line_end":254,"column_start":5,"column_end":44}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343602,"byte_end":343646,"line_start":255,"line_end":255,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343651,"byte_end":343654,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343659,"byte_end":343716,"line_start":257,"line_end":257,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343721,"byte_end":343762,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343767,"byte_end":343781,"line_start":259,"line_end":259,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343786,"byte_end":343791,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343796,"byte_end":343803,"line_start":261,"line_end":261,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343808,"byte_end":343811,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example: error when `flexible` is disabled","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343816,"byte_end":343864,"line_start":263,"line_end":263,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343869,"byte_end":343872,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343877,"byte_end":343884,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343889,"byte_end":343915,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343920,"byte_end":343947,"line_start":267,"line_end":267,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343952,"byte_end":343955,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":343960,"byte_end":343999,"line_start":269,"line_end":269,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344004,"byte_end":344052,"line_start":270,"line_end":270,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344057,"byte_end":344099,"line_start":271,"line_end":271,"column_start":5,"column_end":47}},{"value":"/         .flexible(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344104,"byte_end":344132,"line_start":272,"line_end":272,"column_start":5,"column_end":33}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344137,"byte_end":344170,"line_start":273,"line_end":273,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344175,"byte_end":344214,"line_start":274,"line_end":274,"column_start":5,"column_end":44}},{"value":"/     let err = wtr.write_record(&[\"x\", \"y\", \"z\"]).unwrap_err();","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344219,"byte_end":344285,"line_start":275,"line_end":275,"column_start":5,"column_end":71}},{"value":"/     match *err.kind() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344290,"byte_end":344317,"line_start":276,"line_end":276,"column_start":5,"column_end":32}},{"value":"/         csv::ErrorKind::UnequalLengths { expected_len, len, .. } => {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344322,"byte_end":344395,"line_start":277,"line_end":277,"column_start":5,"column_end":78}},{"value":"/             assert_eq!(expected_len, 2);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344400,"byte_end":344444,"line_start":278,"line_end":278,"column_start":5,"column_end":49}},{"value":"/             assert_eq!(len, 3);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344449,"byte_end":344484,"line_start":279,"line_end":279,"column_start":5,"column_end":40}},{"value":"/         }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344489,"byte_end":344502,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/         ref wrong => {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344507,"byte_end":344533,"line_start":281,"line_end":281,"column_start":5,"column_end":31}},{"value":"/             panic!(\"expected UnequalLengths but got {:?}\", wrong);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344538,"byte_end":344608,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/         }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344613,"byte_end":344626,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344631,"byte_end":344640,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344645,"byte_end":344659,"line_start":285,"line_end":285,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344664,"byte_end":344669,"line_start":286,"line_end":286,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344674,"byte_end":344681,"line_start":287,"line_end":287,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345799,"byte_end":345809,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"terminator","qualname":"<WriterBuilder>::terminator","value":"pub fn terminator(&mut Self, Terminator) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The record terminator to use when writing CSV.","sig":null,"attributes":[{"value":"/ The record terminator to use when writing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344801,"byte_end":344851,"line_start":293,"line_end":293,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344856,"byte_end":344859,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ A record terminator can be any single byte. The default is `\\n`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344864,"byte_end":344932,"line_start":295,"line_end":295,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344937,"byte_end":344940,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ Note that RFC 4180 specifies that record terminators should be `\\r\\n`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":344945,"byte_end":345019,"line_start":297,"line_end":297,"column_start":5,"column_end":79}},{"value":"/ To use `\\r\\n`, use the special `Terminator::CRLF` value.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345024,"byte_end":345084,"line_start":298,"line_end":298,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345089,"byte_end":345092,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ # Example: CRLF","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345097,"byte_end":345116,"line_start":300,"line_end":300,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345121,"byte_end":345124,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ This shows how to use RFC 4180 compliant record terminators.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345129,"byte_end":345193,"line_start":302,"line_end":302,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345198,"byte_end":345201,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345206,"byte_end":345213,"line_start":304,"line_end":304,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345218,"byte_end":345244,"line_start":305,"line_end":305,"column_start":5,"column_end":31}},{"value":"/ use csv::{Terminator, WriterBuilder};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345249,"byte_end":345290,"line_start":306,"line_end":306,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345295,"byte_end":345298,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345303,"byte_end":345342,"line_start":308,"line_end":308,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345347,"byte_end":345395,"line_start":309,"line_end":309,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345400,"byte_end":345442,"line_start":310,"line_end":310,"column_start":5,"column_end":47}},{"value":"/         .terminator(Terminator::CRLF)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345447,"byte_end":345488,"line_start":311,"line_end":311,"column_start":5,"column_end":46}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345493,"byte_end":345526,"line_start":312,"line_end":312,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345531,"byte_end":345575,"line_start":313,"line_end":313,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345580,"byte_end":345624,"line_start":314,"line_end":314,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345629,"byte_end":345632,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345637,"byte_end":345694,"line_start":316,"line_end":316,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\r\\nx,y,z\\r\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345699,"byte_end":345746,"line_start":317,"line_end":317,"column_start":5,"column_end":52}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345751,"byte_end":345765,"line_start":318,"line_end":318,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345770,"byte_end":345775,"line_start":319,"line_end":319,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345780,"byte_end":345787,"line_start":320,"line_end":320,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347820,"byte_end":347831,"line_start":378,"line_end":378,"column_start":12,"column_end":23},"name":"quote_style","qualname":"<WriterBuilder>::quote_style","value":"pub fn quote_style(&mut Self, QuoteStyle) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quoting style to use when writing CSV.","sig":null,"attributes":[{"value":"/ The quoting style to use when writing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345936,"byte_end":345982,"line_start":326,"line_end":326,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345987,"byte_end":345990,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ By default, this is set to `QuoteStyle::Necessary`, which will only","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":345995,"byte_end":346066,"line_start":328,"line_end":328,"column_start":5,"column_end":76}},{"value":"/ use quotes when they are necessary to preserve the integrity of data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346071,"byte_end":346144,"line_start":329,"line_end":329,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346149,"byte_end":346152,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ Note that unless the quote style is set to `Never`, an empty field is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346157,"byte_end":346230,"line_start":331,"line_end":331,"column_start":5,"column_end":78}},{"value":"/ quoted if it is the only field in a record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346235,"byte_end":346282,"line_start":332,"line_end":332,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346287,"byte_end":346290,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Example: non-numeric quoting","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346295,"byte_end":346329,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346334,"byte_end":346337,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This shows how to quote non-numeric fields only.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346342,"byte_end":346394,"line_start":336,"line_end":336,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346399,"byte_end":346402,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346407,"byte_end":346414,"line_start":338,"line_end":338,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346419,"byte_end":346445,"line_start":339,"line_end":339,"column_start":5,"column_end":31}},{"value":"/ use csv::{QuoteStyle, WriterBuilder};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346450,"byte_end":346491,"line_start":340,"line_end":340,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346496,"byte_end":346499,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346504,"byte_end":346543,"line_start":342,"line_end":342,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346548,"byte_end":346596,"line_start":343,"line_end":343,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346601,"byte_end":346643,"line_start":344,"line_end":344,"column_start":5,"column_end":47}},{"value":"/         .quote_style(QuoteStyle::NonNumeric)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346648,"byte_end":346696,"line_start":345,"line_end":345,"column_start":5,"column_end":53}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346701,"byte_end":346734,"line_start":346,"line_end":346,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"5\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346739,"byte_end":346783,"line_start":347,"line_end":347,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"3.14\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346788,"byte_end":346835,"line_start":348,"line_end":348,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346840,"byte_end":346843,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346848,"byte_end":346905,"line_start":350,"line_end":350,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\\"a\\\",5,\\\"c\\\"\\n3.14,\\\"y\\\",\\\"z\\\"\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346910,"byte_end":346972,"line_start":351,"line_end":351,"column_start":5,"column_end":67}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346977,"byte_end":346991,"line_start":352,"line_end":352,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":346996,"byte_end":347001,"line_start":353,"line_end":353,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347006,"byte_end":347013,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347018,"byte_end":347021,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ # Example: never quote","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347026,"byte_end":347052,"line_start":356,"line_end":356,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347057,"byte_end":347060,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This shows how the CSV writer can be made to never write quotes, even","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347065,"byte_end":347138,"line_start":358,"line_end":358,"column_start":5,"column_end":78}},{"value":"/ if it sacrifices the integrity of the data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347143,"byte_end":347190,"line_start":359,"line_end":359,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347195,"byte_end":347198,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347203,"byte_end":347210,"line_start":361,"line_end":361,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347215,"byte_end":347241,"line_start":362,"line_end":362,"column_start":5,"column_end":31}},{"value":"/ use csv::{QuoteStyle, WriterBuilder};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347246,"byte_end":347287,"line_start":363,"line_end":363,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347292,"byte_end":347295,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347300,"byte_end":347339,"line_start":365,"line_end":365,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347344,"byte_end":347392,"line_start":366,"line_end":366,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347397,"byte_end":347439,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/         .quote_style(QuoteStyle::Never)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347444,"byte_end":347487,"line_start":368,"line_end":368,"column_start":5,"column_end":48}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347492,"byte_end":347525,"line_start":369,"line_end":369,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\nbar\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347530,"byte_end":347581,"line_start":370,"line_end":370,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"g\\\"h\\\"i\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347586,"byte_end":347636,"line_start":371,"line_end":371,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347641,"byte_end":347644,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347649,"byte_end":347706,"line_start":373,"line_end":373,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,foo\\nbar,c\\ng\\\"h\\\"i,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347711,"byte_end":347767,"line_start":374,"line_end":374,"column_start":5,"column_end":61}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347772,"byte_end":347786,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347791,"byte_end":347796,"line_start":376,"line_end":376,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347801,"byte_end":347808,"line_start":377,"line_end":377,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348686,"byte_end":348691,"line_start":406,"line_end":406,"column_start":12,"column_end":17},"name":"quote","qualname":"<WriterBuilder>::quote","value":"pub fn quote(&mut Self, u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The quote character to use when writing CSV.","sig":null,"attributes":[{"value":"/ The quote character to use when writing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":347961,"byte_end":348009,"line_start":383,"line_end":383,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348014,"byte_end":348017,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ The default is `b'\"'`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348022,"byte_end":348048,"line_start":385,"line_end":385,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348053,"byte_end":348056,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348061,"byte_end":348074,"line_start":387,"line_end":387,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348079,"byte_end":348082,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348087,"byte_end":348094,"line_start":389,"line_end":389,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348099,"byte_end":348125,"line_start":390,"line_end":390,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348130,"byte_end":348157,"line_start":391,"line_end":391,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348162,"byte_end":348165,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348170,"byte_end":348209,"line_start":393,"line_end":393,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348214,"byte_end":348262,"line_start":394,"line_end":394,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348267,"byte_end":348309,"line_start":395,"line_end":395,"column_start":5,"column_end":47}},{"value":"/         .quote(b'\\'')","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348314,"byte_end":348339,"line_start":396,"line_end":396,"column_start":5,"column_end":30}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348344,"byte_end":348377,"line_start":397,"line_end":397,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\nbar\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348382,"byte_end":348433,"line_start":398,"line_end":398,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"g'h'i\", \"y\\\"y\\\"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348438,"byte_end":348492,"line_start":399,"line_end":399,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348497,"byte_end":348500,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348505,"byte_end":348562,"line_start":401,"line_end":401,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,'foo\\nbar',c\\n'g''h''i',y\\\"y\\\"y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348567,"byte_end":348633,"line_start":402,"line_end":402,"column_start":5,"column_end":71}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348638,"byte_end":348652,"line_start":403,"line_end":403,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348657,"byte_end":348662,"line_start":404,"line_end":404,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348667,"byte_end":348674,"line_start":405,"line_end":405,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349598,"byte_end":349610,"line_start":435,"line_end":435,"column_start":12,"column_end":24},"name":"double_quote","qualname":"<WriterBuilder>::double_quote","value":"pub fn double_quote(&mut Self, bool) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Enable double quote escapes.","sig":null,"attributes":[{"value":"/ Enable double quote escapes.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348797,"byte_end":348829,"line_start":411,"line_end":411,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348834,"byte_end":348837,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ This is enabled by default, but it may be disabled. When disabled,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348842,"byte_end":348912,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/ quotes in field data are escaped instead of doubled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348917,"byte_end":348973,"line_start":414,"line_end":414,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348978,"byte_end":348981,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":348986,"byte_end":348999,"line_start":416,"line_end":416,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349004,"byte_end":349007,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349012,"byte_end":349019,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349024,"byte_end":349050,"line_start":419,"line_end":419,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349055,"byte_end":349082,"line_start":420,"line_end":420,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349087,"byte_end":349090,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349095,"byte_end":349134,"line_start":422,"line_end":422,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349139,"byte_end":349187,"line_start":423,"line_end":423,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349192,"byte_end":349234,"line_start":424,"line_end":424,"column_start":5,"column_end":47}},{"value":"/         .double_quote(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349239,"byte_end":349271,"line_start":425,"line_end":425,"column_start":5,"column_end":37}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349276,"byte_end":349309,"line_start":426,"line_end":426,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\\"bar\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349314,"byte_end":349365,"line_start":427,"line_end":427,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349370,"byte_end":349414,"line_start":428,"line_end":428,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349419,"byte_end":349422,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349427,"byte_end":349484,"line_start":430,"line_end":430,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,\\\"foo\\\\\\\"bar\\\",c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349489,"byte_end":349545,"line_start":431,"line_end":431,"column_start":5,"column_end":61}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349550,"byte_end":349564,"line_start":432,"line_end":432,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349569,"byte_end":349574,"line_start":433,"line_end":433,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349579,"byte_end":349586,"line_start":434,"line_end":434,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1055},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350716,"byte_end":350722,"line_start":468,"line_end":468,"column_start":12,"column_end":18},"name":"escape","qualname":"<WriterBuilder>::escape","value":"pub fn escape(&mut Self, u8) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" The escape character to use when writing CSV.","sig":null,"attributes":[{"value":"/ The escape character to use when writing CSV.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349721,"byte_end":349770,"line_start":440,"line_end":440,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349775,"byte_end":349778,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ In some variants of CSV, quotes are escaped using a special escape","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349783,"byte_end":349853,"line_start":442,"line_end":442,"column_start":5,"column_end":75}},{"value":"/ character like `\\` (instead of escaping quotes by doubling them).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349858,"byte_end":349927,"line_start":443,"line_end":443,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349932,"byte_end":349935,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ By default, writing these idiosyncratic escapes is disabled, and is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":349940,"byte_end":350011,"line_start":445,"line_end":445,"column_start":5,"column_end":76}},{"value":"/ only used when `double_quote` is disabled.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350016,"byte_end":350062,"line_start":446,"line_end":446,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350067,"byte_end":350070,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350075,"byte_end":350088,"line_start":448,"line_end":448,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350093,"byte_end":350096,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350101,"byte_end":350108,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350113,"byte_end":350139,"line_start":451,"line_end":451,"column_start":5,"column_end":31}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350144,"byte_end":350171,"line_start":452,"line_end":452,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350176,"byte_end":350179,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350184,"byte_end":350223,"line_start":454,"line_end":454,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350228,"byte_end":350276,"line_start":455,"line_end":455,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350281,"byte_end":350323,"line_start":456,"line_end":456,"column_start":5,"column_end":47}},{"value":"/         .double_quote(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350328,"byte_end":350360,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/         .escape(b'$')","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350365,"byte_end":350390,"line_start":458,"line_end":458,"column_start":5,"column_end":30}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350395,"byte_end":350428,"line_start":459,"line_end":459,"column_start":5,"column_end":38}},{"value":"/     wtr.write_record(&[\"a\", \"foo\\\"bar\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350433,"byte_end":350484,"line_start":460,"line_end":460,"column_start":5,"column_end":56}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350489,"byte_end":350533,"line_start":461,"line_end":461,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350538,"byte_end":350541,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350546,"byte_end":350603,"line_start":463,"line_end":463,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,\\\"foo$\\\"bar\\\",c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350608,"byte_end":350663,"line_start":464,"line_end":464,"column_start":5,"column_end":60}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350668,"byte_end":350682,"line_start":465,"line_end":465,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350687,"byte_end":350692,"line_start":466,"line_end":466,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350697,"byte_end":350704,"line_start":467,"line_end":467,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350968,"byte_end":350983,"line_start":475,"line_end":475,"column_start":12,"column_end":27},"name":"buffer_capacity","qualname":"<WriterBuilder>::buffer_capacity","value":"pub fn buffer_capacity(&mut Self, usize) -> &mut WriterBuilder","parent":null,"children":[],"decl_id":null,"docs":" Set the capacity (in bytes) of the internal buffer used in the CSV\n writer. This defaults to a reasonable setting.\n","sig":null,"attributes":[{"value":"/ Set the capacity (in bytes) of the internal buffer used in the CSV","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350831,"byte_end":350901,"line_start":473,"line_end":473,"column_start":5,"column_end":75}},{"value":"/ writer. This defaults to a reasonable setting.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":350906,"byte_end":350956,"line_start":474,"line_end":474,"column_start":5,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":1384},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352354,"byte_end":352360,"line_start":508,"line_end":508,"column_start":12,"column_end":18},"name":"Writer","qualname":"::writer::Writer","value":"Writer {  }","parent":null,"children":[{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1388},{"krate":0,"index":1389}],"decl_id":null,"docs":" A already configured CSV writer.","sig":null,"attributes":[{"value":"/ A already configured CSV writer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351092,"byte_end":351128,"line_start":481,"line_end":481,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351129,"byte_end":351132,"line_start":482,"line_end":482,"column_start":1,"column_end":4}},{"value":"/ A CSV writer takes as input Rust values and writes those values in a valid","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351133,"byte_end":351211,"line_start":483,"line_end":483,"column_start":1,"column_end":79}},{"value":"/ CSV format as output.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351212,"byte_end":351237,"line_start":484,"line_end":484,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351238,"byte_end":351241,"line_start":485,"line_end":485,"column_start":1,"column_end":4}},{"value":"/ While CSV writing is considerably easier than parsing CSV, a proper writer","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351242,"byte_end":351320,"line_start":486,"line_end":486,"column_start":1,"column_end":79}},{"value":"/ will do a number of things for you:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351321,"byte_end":351360,"line_start":487,"line_end":487,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351361,"byte_end":351364,"line_start":488,"line_end":488,"column_start":1,"column_end":4}},{"value":"/ 1. Quote fields when necessary.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351365,"byte_end":351400,"line_start":489,"line_end":489,"column_start":1,"column_end":36}},{"value":"/ 2. Check that all records have the same number of fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351401,"byte_end":351462,"line_start":490,"line_end":490,"column_start":1,"column_end":62}},{"value":"/ 3. Write records with a single empty field correctly.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351463,"byte_end":351520,"line_start":491,"line_end":491,"column_start":1,"column_end":58}},{"value":"/ 4. Automatically serialize normal Rust types to CSV records. When that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351521,"byte_end":351595,"line_start":492,"line_end":492,"column_start":1,"column_end":75}},{"value":"/    type is a struct, a header row is automatically written corresponding","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351596,"byte_end":351672,"line_start":493,"line_end":493,"column_start":1,"column_end":77}},{"value":"/    to the fields of that struct.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351673,"byte_end":351709,"line_start":494,"line_end":494,"column_start":1,"column_end":37}},{"value":"/ 5. Use buffering intelligently and otherwise avoid allocation. (This means","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351710,"byte_end":351788,"line_start":495,"line_end":495,"column_start":1,"column_end":79}},{"value":"/    that callers should not do their own buffering.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351789,"byte_end":351844,"line_start":496,"line_end":496,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351845,"byte_end":351848,"line_start":497,"line_end":497,"column_start":1,"column_end":4}},{"value":"/ All of the above can be configured using a","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351849,"byte_end":351895,"line_start":498,"line_end":498,"column_start":1,"column_end":47}},{"value":"/ [`WriterBuilder`](struct.WriterBuilder.html).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351896,"byte_end":351945,"line_start":499,"line_end":499,"column_start":1,"column_end":50}},{"value":"/ However, a `Writer` has a couple of convenience constructors (`from_path`","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":351946,"byte_end":352023,"line_start":500,"line_end":500,"column_start":1,"column_end":78}},{"value":"/ and `from_writer`) that use the default configuration.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352024,"byte_end":352082,"line_start":501,"line_end":501,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352083,"byte_end":352086,"line_start":502,"line_end":502,"column_start":1,"column_end":4}},{"value":"/ Note that the default configuration of a `Writer` uses `\\n` for record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352087,"byte_end":352161,"line_start":503,"line_end":503,"column_start":1,"column_end":75}},{"value":"/ terminators instead of `\\r\\n` as specified by RFC 4180. Use the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352162,"byte_end":352229,"line_start":504,"line_end":504,"column_start":1,"column_end":68}},{"value":"/ `terminator` method on `WriterBuilder` to set the terminator to `\\r\\n` if","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352230,"byte_end":352307,"line_start":505,"line_end":505,"column_start":1,"column_end":78}},{"value":"/ it's desired.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":352308,"byte_end":352325,"line_start":506,"line_end":506,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355078,"byte_end":355087,"line_start":591,"line_end":591,"column_start":12,"column_end":21},"name":"from_path","qualname":"<Writer<File>>::from_path","value":"pub fn from_path<P: AsRef<Path>>(P) -> Result<Writer<File>>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to the\n given file path. The file is truncated if it already exists.","sig":null,"attributes":[{"value":"/ Build a CSV writer with a default configuration that writes data to the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354361,"byte_end":354436,"line_start":570,"line_end":570,"column_start":5,"column_end":80}},{"value":"/ given file path. The file is truncated if it already exists.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354441,"byte_end":354505,"line_start":571,"line_end":571,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354510,"byte_end":354513,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ If there was a problem opening the file at the given path, then this","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354518,"byte_end":354590,"line_start":573,"line_end":573,"column_start":5,"column_end":77}},{"value":"/ returns the corresponding error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354595,"byte_end":354631,"line_start":574,"line_end":574,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354636,"byte_end":354639,"line_start":575,"line_end":575,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354644,"byte_end":354657,"line_start":576,"line_end":576,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354662,"byte_end":354665,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354670,"byte_end":354683,"line_start":578,"line_end":578,"column_start":5,"column_end":18}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354688,"byte_end":354714,"line_start":579,"line_end":579,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354719,"byte_end":354739,"line_start":580,"line_end":580,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354744,"byte_end":354747,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354752,"byte_end":354791,"line_start":582,"line_end":582,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354796,"byte_end":354844,"line_start":583,"line_end":583,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_path(\"foo.csv\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354849,"byte_end":354901,"line_start":584,"line_end":584,"column_start":5,"column_end":57}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354906,"byte_end":354950,"line_start":585,"line_end":585,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354955,"byte_end":354999,"line_start":586,"line_end":586,"column_start":5,"column_end":49}},{"value":"/     wtr.flush()?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355004,"byte_end":355025,"line_start":587,"line_end":587,"column_start":5,"column_end":26}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355030,"byte_end":355044,"line_start":588,"line_end":588,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355049,"byte_end":355054,"line_start":589,"line_end":589,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355059,"byte_end":355066,"line_start":590,"line_end":590,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356605,"byte_end":356616,"line_start":640,"line_end":640,"column_start":12,"column_end":23},"name":"from_writer","qualname":"<Writer<W>>::from_writer","value":"pub fn from_writer(W) -> Writer<W>","parent":null,"children":[],"decl_id":null,"docs":" Build a CSV writer with a default configuration that writes data to\n `wtr`.","sig":null,"attributes":[{"value":"/ Build a CSV writer with a default configuration that writes data to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355840,"byte_end":355911,"line_start":617,"line_end":617,"column_start":5,"column_end":76}},{"value":"/ `wtr`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355916,"byte_end":355926,"line_start":618,"line_end":618,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355931,"byte_end":355934,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ Note that the CSV writer is buffered automatically, so you should not","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355939,"byte_end":356012,"line_start":620,"line_end":620,"column_start":5,"column_end":78}},{"value":"/ wrap `wtr` in a buffered writer like `io::BufWriter`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356017,"byte_end":356074,"line_start":621,"line_end":621,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356079,"byte_end":356082,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356087,"byte_end":356100,"line_start":623,"line_end":623,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356105,"byte_end":356108,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356113,"byte_end":356120,"line_start":625,"line_end":625,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356125,"byte_end":356151,"line_start":626,"line_end":626,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356156,"byte_end":356176,"line_start":627,"line_end":627,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356181,"byte_end":356184,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356189,"byte_end":356228,"line_start":629,"line_end":629,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356233,"byte_end":356281,"line_start":630,"line_end":630,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356286,"byte_end":356336,"line_start":631,"line_end":631,"column_start":5,"column_end":55}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356341,"byte_end":356385,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356390,"byte_end":356434,"line_start":633,"line_end":633,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356439,"byte_end":356442,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356447,"byte_end":356504,"line_start":635,"line_end":635,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356509,"byte_end":356552,"line_start":636,"line_end":636,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356557,"byte_end":356571,"line_start":637,"line_end":637,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356576,"byte_end":356581,"line_start":638,"line_end":638,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356586,"byte_end":356593,"line_start":639,"line_end":639,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364233,"byte_end":364242,"line_start":852,"line_end":852,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Writer<W>>::serialize","value":"pub fn serialize<S: Serialize>(&mut Self, S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serialize a single record using Serde.","sig":null,"attributes":[{"value":"/ Serialize a single record using Serde.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356697,"byte_end":356739,"line_start":644,"line_end":644,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356744,"byte_end":356747,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356752,"byte_end":356765,"line_start":646,"line_end":646,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356770,"byte_end":356773,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ This shows how to serialize normal Rust structs as CSV records. The","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356778,"byte_end":356849,"line_start":648,"line_end":648,"column_start":5,"column_end":76}},{"value":"/ fields of the struct are used to write a header row automatically.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356854,"byte_end":356924,"line_start":649,"line_end":649,"column_start":5,"column_end":75}},{"value":"/ (Writing the header row automatically can be disabled by building the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":356929,"byte_end":357002,"line_start":650,"line_end":650,"column_start":5,"column_end":78}},{"value":"/ CSV writer with a [`WriterBuilder`](struct.WriterBuilder.html) and","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357007,"byte_end":357077,"line_start":651,"line_end":651,"column_start":5,"column_end":75}},{"value":"/ calling the `has_headers` method.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357082,"byte_end":357120,"line_start":652,"line_end":652,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357125,"byte_end":357128,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357133,"byte_end":357140,"line_start":654,"line_end":654,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357145,"byte_end":357171,"line_start":655,"line_end":655,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357176,"byte_end":357179,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357184,"byte_end":357204,"line_start":657,"line_end":657,"column_start":5,"column_end":25}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357209,"byte_end":357234,"line_start":658,"line_end":658,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357239,"byte_end":357242,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357247,"byte_end":357271,"line_start":660,"line_end":660,"column_start":5,"column_end":29}},{"value":"/ struct Row<'a> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357276,"byte_end":357296,"line_start":661,"line_end":661,"column_start":5,"column_end":25}},{"value":"/     city: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357301,"byte_end":357323,"line_start":662,"line_end":662,"column_start":5,"column_end":27}},{"value":"/     country: &'a str,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357328,"byte_end":357353,"line_start":663,"line_end":663,"column_start":5,"column_end":30}},{"value":"/     // Serde allows us to name our headers exactly,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357358,"byte_end":357413,"line_start":664,"line_end":664,"column_start":5,"column_end":60}},{"value":"/     // even if they don't match our struct field names.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357418,"byte_end":357477,"line_start":665,"line_end":665,"column_start":5,"column_end":64}},{"value":"/     #[serde(rename = \"popcount\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357482,"byte_end":357519,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/     population: u64,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357524,"byte_end":357548,"line_start":667,"line_end":667,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357553,"byte_end":357558,"line_start":668,"line_end":668,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357563,"byte_end":357566,"line_start":669,"line_end":669,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357571,"byte_end":357610,"line_start":670,"line_end":670,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357615,"byte_end":357663,"line_start":671,"line_end":671,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357668,"byte_end":357718,"line_start":672,"line_end":672,"column_start":5,"column_end":55}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357723,"byte_end":357750,"line_start":673,"line_end":673,"column_start":5,"column_end":32}},{"value":"/         city: \"Boston\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357755,"byte_end":357782,"line_start":674,"line_end":674,"column_start":5,"column_end":32}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357787,"byte_end":357824,"line_start":675,"line_end":675,"column_start":5,"column_end":42}},{"value":"/         population: 4628910,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357829,"byte_end":357861,"line_start":676,"line_end":676,"column_start":5,"column_end":37}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357866,"byte_end":357878,"line_start":677,"line_end":677,"column_start":5,"column_end":17}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357883,"byte_end":357910,"line_start":678,"line_end":678,"column_start":5,"column_end":32}},{"value":"/         city: \"Concord\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357915,"byte_end":357943,"line_start":679,"line_end":679,"column_start":5,"column_end":33}},{"value":"/         country: \"United States\",","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357948,"byte_end":357985,"line_start":680,"line_end":680,"column_start":5,"column_end":42}},{"value":"/         population: 42695,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":357990,"byte_end":358020,"line_start":681,"line_end":681,"column_start":5,"column_end":35}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358025,"byte_end":358037,"line_start":682,"line_end":682,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358042,"byte_end":358045,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358050,"byte_end":358107,"line_start":684,"line_end":684,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358112,"byte_end":358139,"line_start":685,"line_end":685,"column_start":5,"column_end":32}},{"value":"/ city,country,popcount","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358144,"byte_end":358169,"line_start":686,"line_end":686,"column_start":5,"column_end":30}},{"value":"/ Boston,United States,4628910","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358174,"byte_end":358206,"line_start":687,"line_end":687,"column_start":5,"column_end":37}},{"value":"/ Concord,United States,42695","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358211,"byte_end":358242,"line_start":688,"line_end":688,"column_start":5,"column_end":36}},{"value":"/ \");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358247,"byte_end":358254,"line_start":689,"line_end":689,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358259,"byte_end":358273,"line_start":690,"line_end":690,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358278,"byte_end":358283,"line_start":691,"line_end":691,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358288,"byte_end":358295,"line_start":692,"line_end":692,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358300,"byte_end":358303,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ # Rules","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358308,"byte_end":358319,"line_start":694,"line_end":694,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358324,"byte_end":358327,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ The behavior of `serialize` is fairly simple:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358332,"byte_end":358381,"line_start":696,"line_end":696,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358386,"byte_end":358389,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ 1. Nested containers (tuples, `Vec`s, structs, etc.) are always","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358394,"byte_end":358461,"line_start":698,"line_end":698,"column_start":5,"column_end":72}},{"value":"/    flattened (depth-first order).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358466,"byte_end":358503,"line_start":699,"line_end":699,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358508,"byte_end":358511,"line_start":700,"line_end":700,"column_start":5,"column_end":8}},{"value":"/ 2. If `has_headers` is `true` and the type contains field names, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358516,"byte_end":358589,"line_start":701,"line_end":701,"column_start":5,"column_end":78}},{"value":"/    a header row is automatically generated.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358594,"byte_end":358641,"line_start":702,"line_end":702,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358646,"byte_end":358649,"line_start":703,"line_end":703,"column_start":5,"column_end":8}},{"value":"/ However, some container types cannot be serialized, and if","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358654,"byte_end":358716,"line_start":704,"line_end":704,"column_start":5,"column_end":67}},{"value":"/ `has_headers` is `true`, there are some additional restrictions on the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358721,"byte_end":358795,"line_start":705,"line_end":705,"column_start":5,"column_end":79}},{"value":"/ types that can be serialized. See below for details.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358800,"byte_end":358856,"line_start":706,"line_end":706,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358861,"byte_end":358864,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ For the purpose of this section, Rust types can be divided into three","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358869,"byte_end":358942,"line_start":708,"line_end":708,"column_start":5,"column_end":78}},{"value":"/ categories: scalars, non-struct containers, and structs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":358947,"byte_end":359007,"line_start":709,"line_end":709,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359012,"byte_end":359015,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ## Scalars","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359020,"byte_end":359034,"line_start":711,"line_end":711,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359039,"byte_end":359042,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ Single values with no field names are written like the following. Note","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359047,"byte_end":359121,"line_start":713,"line_end":713,"column_start":5,"column_end":79}},{"value":"/ that some of the outputs may be quoted, according to the selected","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359126,"byte_end":359195,"line_start":714,"line_end":714,"column_start":5,"column_end":74}},{"value":"/ quoting style.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359200,"byte_end":359218,"line_start":715,"line_end":715,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359223,"byte_end":359226,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ | Name | Example Type | Example Value | Output |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359231,"byte_end":359283,"line_start":717,"line_end":717,"column_start":5,"column_end":57}},{"value":"/ | ---- | ---- | ---- | ---- |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359288,"byte_end":359321,"line_start":718,"line_end":718,"column_start":5,"column_end":38}},{"value":"/ | boolean | `bool` | `true` | `true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359326,"byte_end":359368,"line_start":719,"line_end":719,"column_start":5,"column_end":47}},{"value":"/ | integers | `i8`, `i16`, `i32`, `i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128` | `5` | `5` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359373,"byte_end":359472,"line_start":720,"line_end":720,"column_start":5,"column_end":104}},{"value":"/ | floats | `f32`, `f64` | `3.14` | `3.14` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359477,"byte_end":359524,"line_start":721,"line_end":721,"column_start":5,"column_end":52}},{"value":"/ | character | `char` | `'☃'` | `☃` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359529,"byte_end":359573,"line_start":722,"line_end":722,"column_start":5,"column_end":45}},{"value":"/ | string | `&str` | `\"hi\"` | `hi` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359578,"byte_end":359617,"line_start":723,"line_end":723,"column_start":5,"column_end":44}},{"value":"/ | bytes | `&[u8]` | `b\"hi\"[..]` | `hi` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359622,"byte_end":359666,"line_start":724,"line_end":724,"column_start":5,"column_end":49}},{"value":"/ | option | `Option` | `None` | *empty* |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359671,"byte_end":359715,"line_start":725,"line_end":725,"column_start":5,"column_end":49}},{"value":"/ | option |          | `Some(5)` | `5` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359720,"byte_end":359763,"line_start":726,"line_end":726,"column_start":5,"column_end":48}},{"value":"/ | unit | `()` | `()` | *empty* |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359768,"byte_end":359804,"line_start":727,"line_end":727,"column_start":5,"column_end":41}},{"value":"/ | unit struct | `struct Foo;` | `Foo` | `Foo` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359809,"byte_end":359860,"line_start":728,"line_end":728,"column_start":5,"column_end":56}},{"value":"/ | unit enum variant | `enum E { A, B }` | `E::A` | `A` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359865,"byte_end":359925,"line_start":729,"line_end":729,"column_start":5,"column_end":65}},{"value":"/ | newtype struct | `struct Foo(u8);` | `Foo(5)` | `5` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359930,"byte_end":359989,"line_start":730,"line_end":730,"column_start":5,"column_end":64}},{"value":"/ | newtype enum variant | `enum E { A(u8) }` | `E::A(5)` | `5` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":359994,"byte_end":360061,"line_start":731,"line_end":731,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360066,"byte_end":360069,"line_start":732,"line_end":732,"column_start":5,"column_end":8}},{"value":"/ Note that this table includes simple structs and enums. For example, to","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360074,"byte_end":360149,"line_start":733,"line_end":733,"column_start":5,"column_end":80}},{"value":"/ serialize a field from either an integer or a float type, one can do","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360154,"byte_end":360226,"line_start":734,"line_end":734,"column_start":5,"column_end":77}},{"value":"/ this:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360231,"byte_end":360240,"line_start":735,"line_end":735,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360245,"byte_end":360248,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360253,"byte_end":360260,"line_start":737,"line_end":737,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360265,"byte_end":360291,"line_start":738,"line_end":738,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360296,"byte_end":360299,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360304,"byte_end":360324,"line_start":740,"line_end":740,"column_start":5,"column_end":25}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360329,"byte_end":360354,"line_start":741,"line_end":741,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360359,"byte_end":360362,"line_start":742,"line_end":742,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360367,"byte_end":360391,"line_start":743,"line_end":743,"column_start":5,"column_end":29}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360396,"byte_end":360412,"line_start":744,"line_end":744,"column_start":5,"column_end":21}},{"value":"/     label: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360417,"byte_end":360439,"line_start":745,"line_end":745,"column_start":5,"column_end":27}},{"value":"/     value: Value,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360444,"byte_end":360465,"line_start":746,"line_end":746,"column_start":5,"column_end":26}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360470,"byte_end":360475,"line_start":747,"line_end":747,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360480,"byte_end":360483,"line_start":748,"line_end":748,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360488,"byte_end":360512,"line_start":749,"line_end":749,"column_start":5,"column_end":29}},{"value":"/ enum Value {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360517,"byte_end":360533,"line_start":750,"line_end":750,"column_start":5,"column_end":21}},{"value":"/     Integer(i64),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360538,"byte_end":360559,"line_start":751,"line_end":751,"column_start":5,"column_end":26}},{"value":"/     Float(f64),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360564,"byte_end":360583,"line_start":752,"line_end":752,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360588,"byte_end":360593,"line_start":753,"line_end":753,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360598,"byte_end":360601,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360606,"byte_end":360645,"line_start":755,"line_end":755,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360650,"byte_end":360698,"line_start":756,"line_end":756,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360703,"byte_end":360753,"line_start":757,"line_end":757,"column_start":5,"column_end":55}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360758,"byte_end":360785,"line_start":758,"line_end":758,"column_start":5,"column_end":32}},{"value":"/         label: \"foo\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360790,"byte_end":360827,"line_start":759,"line_end":759,"column_start":5,"column_end":42}},{"value":"/         value: Value::Integer(3),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360832,"byte_end":360869,"line_start":760,"line_end":760,"column_start":5,"column_end":42}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360874,"byte_end":360886,"line_start":761,"line_end":761,"column_start":5,"column_end":17}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360891,"byte_end":360918,"line_start":762,"line_end":762,"column_start":5,"column_end":32}},{"value":"/         label: \"bar\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360923,"byte_end":360960,"line_start":763,"line_end":763,"column_start":5,"column_end":42}},{"value":"/         value: Value::Float(3.14),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":360965,"byte_end":361003,"line_start":764,"line_end":764,"column_start":5,"column_end":43}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361008,"byte_end":361020,"line_start":765,"line_end":765,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361025,"byte_end":361028,"line_start":766,"line_end":766,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361033,"byte_end":361090,"line_start":767,"line_end":767,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361095,"byte_end":361122,"line_start":768,"line_end":768,"column_start":5,"column_end":32}},{"value":"/ label,value","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361127,"byte_end":361142,"line_start":769,"line_end":769,"column_start":5,"column_end":20}},{"value":"/ foo,3","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361147,"byte_end":361156,"line_start":770,"line_end":770,"column_start":5,"column_end":14}},{"value":"/ bar,3.14","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361161,"byte_end":361173,"line_start":771,"line_end":771,"column_start":5,"column_end":17}},{"value":"/ \");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361178,"byte_end":361185,"line_start":772,"line_end":772,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361190,"byte_end":361204,"line_start":773,"line_end":773,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361209,"byte_end":361214,"line_start":774,"line_end":774,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361219,"byte_end":361226,"line_start":775,"line_end":775,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361231,"byte_end":361234,"line_start":776,"line_end":776,"column_start":5,"column_end":8}},{"value":"/ ## Non-Struct Containers","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361239,"byte_end":361267,"line_start":777,"line_end":777,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361272,"byte_end":361275,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ Nested containers are flattened to their scalar components, with the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361280,"byte_end":361352,"line_start":779,"line_end":779,"column_start":5,"column_end":77}},{"value":"/ exeption of a few types that are not allowed:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361357,"byte_end":361406,"line_start":780,"line_end":780,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361411,"byte_end":361414,"line_start":781,"line_end":781,"column_start":5,"column_end":8}},{"value":"/ | Name | Example Type | Example Value | Output |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361419,"byte_end":361471,"line_start":782,"line_end":782,"column_start":5,"column_end":57}},{"value":"/ | ---- | ---- | ---- | ---- |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361476,"byte_end":361509,"line_start":783,"line_end":783,"column_start":5,"column_end":38}},{"value":"/ | sequence | `Vec<u8>` | `vec![1, 2, 3]` | `1,2,3` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361514,"byte_end":361570,"line_start":784,"line_end":784,"column_start":5,"column_end":61}},{"value":"/ | tuple | `(u8, bool)` | `(5, true)` | `5,true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361575,"byte_end":361628,"line_start":785,"line_end":785,"column_start":5,"column_end":58}},{"value":"/ | tuple struct | `Foo(u8, bool)` | `Foo(5, true)` | `5,true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361633,"byte_end":361699,"line_start":786,"line_end":786,"column_start":5,"column_end":71}},{"value":"/ | tuple enum variant | `enum E { A(u8, bool) }` | `E::A(5, true)` | *error* |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361704,"byte_end":361785,"line_start":787,"line_end":787,"column_start":5,"column_end":86}},{"value":"/ | struct enum variant | `enum E { V { a: u8, b: bool } }` | `E::V { a: 5, b: true }` | *error* |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361790,"byte_end":361890,"line_start":788,"line_end":788,"column_start":5,"column_end":105}},{"value":"/ | map | `BTreeMap<K, V>` | `BTreeMap::new()` | *error* |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361895,"byte_end":361955,"line_start":789,"line_end":789,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361960,"byte_end":361963,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ ## Structs","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361968,"byte_end":361982,"line_start":791,"line_end":791,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361987,"byte_end":361990,"line_start":792,"line_end":792,"column_start":5,"column_end":8}},{"value":"/ Like the other containers, structs are flattened to their scalar","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":361995,"byte_end":362063,"line_start":793,"line_end":793,"column_start":5,"column_end":73}},{"value":"/ components:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362068,"byte_end":362083,"line_start":794,"line_end":794,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362088,"byte_end":362091,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ | Name | Example Type | Example Value | Output |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362096,"byte_end":362148,"line_start":796,"line_end":796,"column_start":5,"column_end":57}},{"value":"/ | ---- | ---- | ---- | ---- |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362153,"byte_end":362186,"line_start":797,"line_end":797,"column_start":5,"column_end":38}},{"value":"/ | struct | `struct Foo { a: u8, b: bool }` | `Foo { a: 5, b: true }` | `5,true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362191,"byte_end":362276,"line_start":798,"line_end":798,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362281,"byte_end":362284,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ If `has_headers` is `false`, then there are no additional restrictions;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362289,"byte_end":362364,"line_start":800,"line_end":800,"column_start":5,"column_end":80}},{"value":"/ types can be nested arbitrarily. For example:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362369,"byte_end":362418,"line_start":801,"line_end":801,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362423,"byte_end":362426,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362431,"byte_end":362438,"line_start":803,"line_end":803,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362443,"byte_end":362469,"line_start":804,"line_end":804,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362474,"byte_end":362477,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ use csv::WriterBuilder;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362482,"byte_end":362509,"line_start":806,"line_end":806,"column_start":5,"column_end":32}},{"value":"/ use serde::Serialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362514,"byte_end":362539,"line_start":807,"line_end":807,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362544,"byte_end":362547,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ #[derive(Serialize)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362552,"byte_end":362576,"line_start":809,"line_end":809,"column_start":5,"column_end":29}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362581,"byte_end":362597,"line_start":810,"line_end":810,"column_start":5,"column_end":21}},{"value":"/     label: String,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362602,"byte_end":362624,"line_start":811,"line_end":811,"column_start":5,"column_end":27}},{"value":"/     values: Vec<f64>,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362629,"byte_end":362654,"line_start":812,"line_end":812,"column_start":5,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362659,"byte_end":362664,"line_start":813,"line_end":813,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362669,"byte_end":362672,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362677,"byte_end":362716,"line_start":815,"line_end":815,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362721,"byte_end":362769,"line_start":816,"line_end":816,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = WriterBuilder::new()","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362774,"byte_end":362816,"line_start":817,"line_end":817,"column_start":5,"column_end":47}},{"value":"/         .has_headers(false)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362821,"byte_end":362852,"line_start":818,"line_end":818,"column_start":5,"column_end":36}},{"value":"/         .from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362857,"byte_end":362890,"line_start":819,"line_end":819,"column_start":5,"column_end":38}},{"value":"/     wtr.serialize(Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362895,"byte_end":362922,"line_start":820,"line_end":820,"column_start":5,"column_end":32}},{"value":"/         label: \"foo\".to_string(),","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362927,"byte_end":362964,"line_start":821,"line_end":821,"column_start":5,"column_end":42}},{"value":"/         values: vec![1.1234, 2.5678, 3.14],","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":362969,"byte_end":363016,"line_start":822,"line_end":822,"column_start":5,"column_end":52}},{"value":"/     })?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363021,"byte_end":363033,"line_start":823,"line_end":823,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363038,"byte_end":363041,"line_start":824,"line_end":824,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363046,"byte_end":363103,"line_start":825,"line_end":825,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363108,"byte_end":363135,"line_start":826,"line_end":826,"column_start":5,"column_end":32}},{"value":"/ foo,1.1234,2.5678,3.14","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363140,"byte_end":363166,"line_start":827,"line_end":827,"column_start":5,"column_end":31}},{"value":"/ \");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363171,"byte_end":363178,"line_start":828,"line_end":828,"column_start":5,"column_end":12}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363183,"byte_end":363197,"line_start":829,"line_end":829,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363202,"byte_end":363207,"line_start":830,"line_end":830,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363212,"byte_end":363219,"line_start":831,"line_end":831,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363224,"byte_end":363227,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ However, if `has_headers` were enabled in the above example, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363232,"byte_end":363301,"line_start":833,"line_end":833,"column_start":5,"column_end":74}},{"value":"/ serialization would return an error. Speficially, when `has_headers` is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363306,"byte_end":363381,"line_start":834,"line_end":834,"column_start":5,"column_end":80}},{"value":"/ `true`, there are two restrictions:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363386,"byte_end":363425,"line_start":835,"line_end":835,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363430,"byte_end":363433,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ 1. Named field values in structs must be scalars.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363438,"byte_end":363491,"line_start":837,"line_end":837,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363496,"byte_end":363499,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ 2. All scalars must be named field values in structs.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363504,"byte_end":363561,"line_start":839,"line_end":839,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363566,"byte_end":363569,"line_start":840,"line_end":840,"column_start":5,"column_end":8}},{"value":"/ Other than these two restrictions, types can be nested arbitrarily.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363574,"byte_end":363645,"line_start":841,"line_end":841,"column_start":5,"column_end":76}},{"value":"/ Here are a few examples:","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363650,"byte_end":363678,"line_start":842,"line_end":842,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363683,"byte_end":363686,"line_start":843,"line_end":843,"column_start":5,"column_end":8}},{"value":"/ | Value | Header | Record |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363691,"byte_end":363722,"line_start":844,"line_end":844,"column_start":5,"column_end":36}},{"value":"/ | ---- | ---- | ---- |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363727,"byte_end":363753,"line_start":845,"line_end":845,"column_start":5,"column_end":31}},{"value":"/ | `(Foo { x: 5, y: 6 }, Bar { z: true })` | `x,y,z` | `5,6,true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363758,"byte_end":363828,"line_start":846,"line_end":846,"column_start":5,"column_end":75}},{"value":"/ | `vec![Foo { x: 5, y: 6 }, Foo { x: 7, y: 8 }]` | `x,y,x,y` | `5,6,7,8` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363833,"byte_end":363911,"line_start":847,"line_end":847,"column_start":5,"column_end":83}},{"value":"/ | `(Foo { x: 5, y: 6 }, vec![Bar { z: Baz(true) }])` | `x,y,z` | `5,6,true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":363916,"byte_end":363997,"line_start":848,"line_end":848,"column_start":5,"column_end":86}},{"value":"/ | `Foo { x: 5, y: (6, 7) }` | *error: restriction 1* | `5,6,7` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364002,"byte_end":364070,"line_start":849,"line_end":849,"column_start":5,"column_end":73}},{"value":"/ | `(5, Foo { x: 6, y: 7 }` | *error: restriction 2* | `5,6,7` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364075,"byte_end":364142,"line_start":850,"line_end":850,"column_start":5,"column_end":72}},{"value":"/ | `(Foo { x: 5, y: 6 }, true)` | *error: restriction 2* | `5,6,true` |","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364147,"byte_end":364221,"line_start":851,"line_end":851,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365674,"byte_end":365686,"line_start":893,"line_end":893,"column_start":12,"column_end":24},"name":"write_record","qualname":"<Writer<W>>::write_record","value":"pub fn write_record<I, T>(&mut Self, I) -> Result<()> where\nI: IntoIterator<Item = T>, T: AsRef<[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Write a single record.","sig":null,"attributes":[{"value":"/ Write a single record.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364750,"byte_end":364776,"line_start":867,"line_end":867,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364781,"byte_end":364784,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ This method accepts something that can be turned into an iterator that","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364789,"byte_end":364863,"line_start":869,"line_end":869,"column_start":5,"column_end":79}},{"value":"/ yields elements that can be represented by a `&[u8]`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364868,"byte_end":364925,"line_start":870,"line_end":870,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364930,"byte_end":364933,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ This may be called with an empty iterator, which will cause a record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":364938,"byte_end":365010,"line_start":872,"line_end":872,"column_start":5,"column_end":77}},{"value":"/ terminator to be written. If no fields had been written, then a single","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365015,"byte_end":365089,"line_start":873,"line_end":873,"column_start":5,"column_end":79}},{"value":"/ empty field is written before the terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365094,"byte_end":365143,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365148,"byte_end":365151,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365156,"byte_end":365169,"line_start":876,"line_end":876,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365174,"byte_end":365177,"line_start":877,"line_end":877,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365182,"byte_end":365189,"line_start":878,"line_end":878,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365194,"byte_end":365220,"line_start":879,"line_end":879,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365225,"byte_end":365245,"line_start":880,"line_end":880,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365250,"byte_end":365253,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365258,"byte_end":365297,"line_start":882,"line_end":882,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365302,"byte_end":365350,"line_start":883,"line_end":883,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365355,"byte_end":365405,"line_start":884,"line_end":884,"column_start":5,"column_end":55}},{"value":"/     wtr.write_record(&[\"a\", \"b\", \"c\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365410,"byte_end":365454,"line_start":885,"line_end":885,"column_start":5,"column_end":49}},{"value":"/     wtr.write_record(&[\"x\", \"y\", \"z\"])?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365459,"byte_end":365503,"line_start":886,"line_end":886,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365508,"byte_end":365511,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365516,"byte_end":365573,"line_start":888,"line_end":888,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365578,"byte_end":365621,"line_start":889,"line_end":889,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365626,"byte_end":365640,"line_start":890,"line_end":890,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365645,"byte_end":365650,"line_start":891,"line_end":891,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365655,"byte_end":365662,"line_start":892,"line_end":892,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":367153,"byte_end":367170,"line_start":935,"line_end":935,"column_start":12,"column_end":29},"name":"write_byte_record","qualname":"<Writer<W>>::write_byte_record","value":"pub fn write_byte_record(&mut Self, &ByteRecord) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single `ByteRecord`.","sig":null,"attributes":[{"value":"/ Write a single `ByteRecord`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365942,"byte_end":365974,"line_start":904,"line_end":904,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365979,"byte_end":365982,"line_start":905,"line_end":905,"column_start":5,"column_end":8}},{"value":"/ This method accepts a borrowed `ByteRecord` and writes its contents","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":365987,"byte_end":366058,"line_start":906,"line_end":906,"column_start":5,"column_end":76}},{"value":"/ to the underlying writer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366063,"byte_end":366092,"line_start":907,"line_end":907,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366097,"byte_end":366100,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ This is similar to `write_record` except that it specifically requires","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366105,"byte_end":366179,"line_start":909,"line_end":909,"column_start":5,"column_end":79}},{"value":"/ a `ByteRecord`. This permits the writer to possibly write the record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366184,"byte_end":366256,"line_start":910,"line_end":910,"column_start":5,"column_end":77}},{"value":"/ more quickly than the more generic `write_record`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366261,"byte_end":366315,"line_start":911,"line_end":911,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366320,"byte_end":366323,"line_start":912,"line_end":912,"column_start":5,"column_end":8}},{"value":"/ This may be called with an empty record, which will cause a record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366328,"byte_end":366398,"line_start":913,"line_end":913,"column_start":5,"column_end":75}},{"value":"/ terminator to be written. If no fields had been written, then a single","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366403,"byte_end":366477,"line_start":914,"line_end":914,"column_start":5,"column_end":79}},{"value":"/ empty field is written before the terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366482,"byte_end":366531,"line_start":915,"line_end":915,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366536,"byte_end":366539,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366544,"byte_end":366557,"line_start":917,"line_end":917,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366562,"byte_end":366565,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366570,"byte_end":366577,"line_start":919,"line_end":919,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366582,"byte_end":366608,"line_start":920,"line_end":920,"column_start":5,"column_end":31}},{"value":"/ use csv::{ByteRecord, Writer};","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366613,"byte_end":366647,"line_start":921,"line_end":921,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366652,"byte_end":366655,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366660,"byte_end":366699,"line_start":923,"line_end":923,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366704,"byte_end":366752,"line_start":924,"line_end":924,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366757,"byte_end":366807,"line_start":925,"line_end":925,"column_start":5,"column_end":55}},{"value":"/     wtr.write_byte_record(&ByteRecord::from(&[\"a\", \"b\", \"c\"][..]))?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366812,"byte_end":366884,"line_start":926,"line_end":926,"column_start":5,"column_end":77}},{"value":"/     wtr.write_byte_record(&ByteRecord::from(&[\"x\", \"y\", \"z\"][..]))?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366889,"byte_end":366961,"line_start":927,"line_end":927,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366966,"byte_end":366969,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":366974,"byte_end":367031,"line_start":929,"line_end":929,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":367036,"byte_end":367079,"line_start":930,"line_end":930,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":367084,"byte_end":367098,"line_start":931,"line_end":931,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":367103,"byte_end":367108,"line_start":932,"line_end":932,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":367113,"byte_end":367120,"line_start":933,"line_end":933,"column_start":5,"column_end":12}},{"value":"inline(never)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":367125,"byte_end":367141,"line_start":934,"line_end":934,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370623,"byte_end":370634,"line_start":1023,"line_end":1023,"column_start":12,"column_end":23},"name":"write_field","qualname":"<Writer<W>>::write_field","value":"pub fn write_field<T: AsRef<[u8]>>(&mut Self, T) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a single field.","sig":null,"attributes":[{"value":"/ Write a single field.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369525,"byte_end":369550,"line_start":991,"line_end":991,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369555,"byte_end":369558,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ One should prefer using `write_record` over this method. It is provided","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369563,"byte_end":369638,"line_start":993,"line_end":993,"column_start":5,"column_end":80}},{"value":"/ for cases where writing a field at a time is more convenient than","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369643,"byte_end":369712,"line_start":994,"line_end":994,"column_start":5,"column_end":74}},{"value":"/ writing a record at a time.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369717,"byte_end":369748,"line_start":995,"line_end":995,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369753,"byte_end":369756,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ Note that if this API is used, `write_record` should be called with an","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369761,"byte_end":369835,"line_start":997,"line_end":997,"column_start":5,"column_end":79}},{"value":"/ empty iterator to write a record terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369840,"byte_end":369888,"line_start":998,"line_end":998,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369893,"byte_end":369896,"line_start":999,"line_end":999,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369901,"byte_end":369914,"line_start":1000,"line_end":1000,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369919,"byte_end":369922,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369927,"byte_end":369934,"line_start":1002,"line_end":1002,"column_start":5,"column_end":12}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369939,"byte_end":369965,"line_start":1003,"line_end":1003,"column_start":5,"column_end":31}},{"value":"/ use csv::Writer;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369970,"byte_end":369990,"line_start":1004,"line_end":1004,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":369995,"byte_end":369998,"line_start":1005,"line_end":1005,"column_start":5,"column_end":8}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370003,"byte_end":370042,"line_start":1006,"line_end":1006,"column_start":5,"column_end":44}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370047,"byte_end":370095,"line_start":1007,"line_end":1007,"column_start":5,"column_end":53}},{"value":"/     let mut wtr = Writer::from_writer(vec![]);","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370100,"byte_end":370150,"line_start":1008,"line_end":1008,"column_start":5,"column_end":55}},{"value":"/     wtr.write_field(\"a\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370155,"byte_end":370185,"line_start":1009,"line_end":1009,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"b\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370190,"byte_end":370220,"line_start":1010,"line_end":1010,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"c\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370225,"byte_end":370255,"line_start":1011,"line_end":1011,"column_start":5,"column_end":35}},{"value":"/     wtr.write_record(None::<&[u8]>)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370260,"byte_end":370301,"line_start":1012,"line_end":1012,"column_start":5,"column_end":46}},{"value":"/     wtr.write_field(\"x\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370306,"byte_end":370336,"line_start":1013,"line_end":1013,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"y\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370341,"byte_end":370371,"line_start":1014,"line_end":1014,"column_start":5,"column_end":35}},{"value":"/     wtr.write_field(\"z\")?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370376,"byte_end":370406,"line_start":1015,"line_end":1015,"column_start":5,"column_end":35}},{"value":"/     wtr.write_record(None::<&[u8]>)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370411,"byte_end":370452,"line_start":1016,"line_end":1016,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370457,"byte_end":370460,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/     let data = String::from_utf8(wtr.into_inner()?)?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370465,"byte_end":370522,"line_start":1018,"line_end":1018,"column_start":5,"column_end":62}},{"value":"/     assert_eq!(data, \"a,b,c\\nx,y,z\\n\");","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370527,"byte_end":370570,"line_start":1019,"line_end":1019,"column_start":5,"column_end":48}},{"value":"/     Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370575,"byte_end":370589,"line_start":1020,"line_end":1020,"column_start":5,"column_end":19}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370594,"byte_end":370599,"line_start":1021,"line_end":1021,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":370604,"byte_end":370611,"line_start":1022,"line_end":1022,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371806,"byte_end":371811,"line_start":1057,"line_end":1057,"column_start":12,"column_end":17},"name":"flush","qualname":"<Writer<W>>::flush","value":"pub fn flush(&mut Self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer to the underlying writer.","sig":null,"attributes":[{"value":"/ Flush the contents of the internal buffer to the underlying writer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371548,"byte_end":371619,"line_start":1051,"line_end":1051,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371624,"byte_end":371627,"line_start":1052,"line_end":1052,"column_start":5,"column_end":8}},{"value":"/ If there was a problem writing to the underlying writer, then an error","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371632,"byte_end":371706,"line_start":1053,"line_end":1053,"column_start":5,"column_end":79}},{"value":"/ is returned.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371711,"byte_end":371727,"line_start":1054,"line_end":1054,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371732,"byte_end":371735,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ Note that this also flushes the underlying writer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":371740,"byte_end":371794,"line_start":1056,"line_end":1056,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":372430,"byte_end":372440,"line_start":1076,"line_end":1076,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Writer<W>>::into_inner","value":"pub fn into_inner(Self) -> result::Result<W, IntoInnerError<Writer<W>>>","parent":null,"children":[],"decl_id":null,"docs":" Flush the contents of the internal buffer and return the underlying\n writer.\n","sig":null,"attributes":[{"value":"/ Flush the contents of the internal buffer and return the underlying","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":372331,"byte_end":372402,"line_start":1074,"line_end":1074,"column_start":5,"column_end":76}},{"value":"/ writer.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":372407,"byte_end":372418,"line_start":1075,"line_end":1075,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1418},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4626,"byte_end":4632,"line_start":183,"line_end":183,"column_start":5,"column_end":11},"name":"Always","qualname":"::QuoteStyle::Always","value":"QuoteStyle::Always","parent":{"krate":0,"index":1417},"children":[],"decl_id":null,"docs":" This puts quotes around every field. Always.\n","sig":null,"attributes":[{"value":"/ This puts quotes around every field. Always.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4573,"byte_end":4621,"line_start":182,"line_end":182,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1420},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4967,"byte_end":4976,"line_start":191,"line_end":191,"column_start":5,"column_end":14},"name":"Necessary","qualname":"::QuoteStyle::Necessary","value":"QuoteStyle::Necessary","parent":{"krate":0,"index":1417},"children":[],"decl_id":null,"docs":" This puts quotes around fields only when necessary.","sig":null,"attributes":[{"value":"/ This puts quotes around fields only when necessary.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4638,"byte_end":4693,"line_start":184,"line_end":184,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4698,"byte_end":4701,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ They are necessary when fields contain a quote, delimiter or record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4706,"byte_end":4777,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ terminator. Quotes are also necessary when writing an empty record","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4782,"byte_end":4852,"line_start":187,"line_end":187,"column_start":5,"column_end":75}},{"value":"/ (which is indistinguishable from a record with one empty field).","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4857,"byte_end":4925,"line_start":188,"line_end":188,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4930,"byte_end":4933,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ This is the default.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4938,"byte_end":4962,"line_start":190,"line_end":190,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1422},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5206,"byte_end":5216,"line_start":195,"line_end":195,"column_start":5,"column_end":15},"name":"NonNumeric","qualname":"::QuoteStyle::NonNumeric","value":"QuoteStyle::NonNumeric","parent":{"krate":0,"index":1417},"children":[],"decl_id":null,"docs":" This puts quotes around all fields that are non-numeric. Namely, when\n writing a field that does not parse as a valid float or integer, then\n quotes will be used even if they aren't strictly necessary.\n","sig":null,"attributes":[{"value":"/ This puts quotes around all fields that are non-numeric. Namely, when","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4982,"byte_end":5055,"line_start":192,"line_end":192,"column_start":5,"column_end":78}},{"value":"/ writing a field that does not parse as a valid float or integer, then","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5060,"byte_end":5133,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ quotes will be used even if they aren't strictly necessary.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5138,"byte_end":5201,"line_start":194,"line_end":194,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1424},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5301,"byte_end":5306,"line_start":197,"line_end":197,"column_start":5,"column_end":10},"name":"Never","qualname":"::QuoteStyle::Never","value":"QuoteStyle::Never","parent":{"krate":0,"index":1417},"children":[],"decl_id":null,"docs":" This *never* writes quotes, even if it would produce invalid CSV data.\n","sig":null,"attributes":[{"value":"/ This *never* writes quotes, even if it would produce invalid CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5222,"byte_end":5296,"line_start":196,"line_end":196,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1426},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5586,"byte_end":5601,"line_start":204,"line_end":204,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::QuoteStyle::__Nonexhaustive","value":"QuoteStyle::__Nonexhaustive","parent":{"krate":0,"index":1417},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5312,"byte_end":5366,"line_start":198,"line_end":198,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5371,"byte_end":5374,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5379,"byte_end":5449,"line_start":200,"line_end":200,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5454,"byte_end":5526,"line_start":201,"line_end":201,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5531,"byte_end":5562,"line_start":202,"line_end":202,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1417},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4556,"byte_end":4566,"line_start":181,"line_end":181,"column_start":10,"column_end":20},"name":"QuoteStyle","qualname":"::QuoteStyle","value":"pub enum QuoteStyle {\n\n    /// This puts quotes around every field. Always.\n    Always,\n\n    /// This puts quotes around fields only when necessary.\n    ///\n    /// They are necessary when fields contain a quote, delimiter or record\n    /// terminator. Quotes are also necessary when writing an empty record\n    /// (which is indistinguishable from a record with one empty field).\n    ///\n    /// This is the default.\n    Necessary,\n\n    /// This puts quotes around all fields that are non-numeric. Namely, when\n    /// writing a field that does not parse as a valid float or integer, then\n    /// quotes will be used even if they aren't strictly necessary.\n    NonNumeric,\n\n    /// This *never* writes quotes, even if it would produce invalid CSV data.\n    Never,\n\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1424},{"krate":0,"index":1426}],"decl_id":null,"docs":" The quoting style to use when writing CSV data.\n","sig":null,"attributes":[{"value":"/ The quoting style to use when writing CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4465,"byte_end":4516,"line_start":179,"line_end":179,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1434},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6421,"byte_end":6425,"line_start":232,"line_end":232,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::Terminator::CRLF","value":"Terminator::CRLF","parent":{"krate":0,"index":1433},"children":[],"decl_id":null,"docs":" Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.\n","sig":null,"attributes":[{"value":"/ Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6354,"byte_end":6416,"line_start":231,"line_end":231,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1436},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6485,"byte_end":6488,"line_start":234,"line_end":234,"column_start":5,"column_end":8},"name":"Any","qualname":"::Terminator::Any","value":"Terminator::Any(u8)","parent":{"krate":0,"index":1433},"children":[],"decl_id":null,"docs":" Parses the byte given as a record terminator.\n","sig":null,"attributes":[{"value":"/ Parses the byte given as a record terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6431,"byte_end":6480,"line_start":233,"line_end":233,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1439},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6772,"byte_end":6787,"line_start":241,"line_end":241,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Terminator::__Nonexhaustive","value":"Terminator::__Nonexhaustive","parent":{"krate":0,"index":1433},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6498,"byte_end":6552,"line_start":235,"line_end":235,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6557,"byte_end":6560,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6565,"byte_end":6635,"line_start":237,"line_end":237,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6640,"byte_end":6712,"line_start":238,"line_end":238,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6717,"byte_end":6748,"line_start":239,"line_end":239,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1433},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6337,"byte_end":6347,"line_start":230,"line_end":230,"column_start":10,"column_end":20},"name":"Terminator","qualname":"::Terminator","value":"pub enum Terminator {\n\n    /// Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.\n    CRLF,\n\n    /// Parses the byte given as a record terminator.\n    Any(u8),\n\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1436},{"krate":0,"index":1439}],"decl_id":null,"docs":" A record terminator.","sig":null,"attributes":[{"value":"/ A record terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6114,"byte_end":6138,"line_start":225,"line_end":225,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6139,"byte_end":6142,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"/ Use this to specify the record terminator while parsing CSV. The default is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6143,"byte_end":6222,"line_start":227,"line_end":227,"column_start":1,"column_end":80}},{"value":"/ CRLF, which treats `\\r`, `\\n` or `\\r\\n` as a single record terminator.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6223,"byte_end":6297,"line_start":228,"line_end":228,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1447},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7396,"byte_end":7400,"line_start":265,"line_end":265,"column_start":5,"column_end":9},"name":"None","qualname":"::Trim::None","value":"Trim::None","parent":{"krate":0,"index":1446},"children":[],"decl_id":null,"docs":" Preserves fields and headers. This is the default.\n","sig":null,"attributes":[{"value":"/ Preserves fields and headers. This is the default.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7337,"byte_end":7391,"line_start":264,"line_end":264,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1449},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7444,"byte_end":7451,"line_start":267,"line_end":267,"column_start":5,"column_end":12},"name":"Headers","qualname":"::Trim::Headers","value":"Trim::Headers","parent":{"krate":0,"index":1446},"children":[],"decl_id":null,"docs":" Trim whitespace from headers.\n","sig":null,"attributes":[{"value":"/ Trim whitespace from headers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7406,"byte_end":7439,"line_start":266,"line_end":266,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1451},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7511,"byte_end":7517,"line_start":269,"line_end":269,"column_start":5,"column_end":11},"name":"Fields","qualname":"::Trim::Fields","value":"Trim::Fields","parent":{"krate":0,"index":1446},"children":[],"decl_id":null,"docs":" Trim whitespace from fields, but not headers.\n","sig":null,"attributes":[{"value":"/ Trim whitespace from fields, but not headers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7457,"byte_end":7506,"line_start":268,"line_end":268,"column_start":5,"column_end":54}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1453},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7572,"byte_end":7575,"line_start":271,"line_end":271,"column_start":5,"column_end":8},"name":"All","qualname":"::Trim::All","value":"Trim::All","parent":{"krate":0,"index":1446},"children":[],"decl_id":null,"docs":" Trim whitespace from fields and headers.\n","sig":null,"attributes":[{"value":"/ Trim whitespace from fields and headers.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7523,"byte_end":7567,"line_start":270,"line_end":270,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1455},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7855,"byte_end":7870,"line_start":278,"line_end":278,"column_start":5,"column_end":20},"name":"__Nonexhaustive","qualname":"::Trim::__Nonexhaustive","value":"Trim::__Nonexhaustive","parent":{"krate":0,"index":1446},"children":[],"decl_id":null,"docs":" Hints that destructuring should not be exhaustive.","sig":null,"attributes":[{"value":"/ Hints that destructuring should not be exhaustive.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7581,"byte_end":7635,"line_start":272,"line_end":272,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7640,"byte_end":7643,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ This enum may grow additional variants, so this makes sure clients","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7648,"byte_end":7718,"line_start":274,"line_end":274,"column_start":5,"column_end":75}},{"value":"/ don't count on exhaustive matching. (Otherwise, adding a new variant","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7723,"byte_end":7795,"line_start":275,"line_end":275,"column_start":5,"column_end":77}},{"value":"/ could break existing code.)","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7800,"byte_end":7831,"line_start":276,"line_end":276,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":1446},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7326,"byte_end":7330,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Trim","qualname":"::Trim","value":"pub enum Trim {\n\n    /// Preserves fields and headers. This is the default.\n    None,\n\n    /// Trim whitespace from headers.\n    Headers,\n\n    /// Trim whitespace from fields, but not headers.\n    Fields,\n\n    /// Trim whitespace from fields and headers.\n    All,\n\n    /// Hints that destructuring should not be exhaustive.\n    ///\n    /// This enum may grow additional variants, so this makes sure clients\n    /// don't count on exhaustive matching. (Otherwise, adding a new variant\n    /// could break existing code.)\n    #[doc(hidden)]\n    __Nonexhaustive,\n}","parent":null,"children":[{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1455}],"decl_id":null,"docs":" The whitespace preservation behaviour when reading CSV data.\n","sig":null,"attributes":[{"value":"/ The whitespace preservation behaviour when reading CSV data.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7211,"byte_end":7275,"line_start":261,"line_end":261,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":1102},"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10239,"byte_end":10253,"line_start":353,"line_end":353,"column_start":8,"column_end":22},"name":"invalid_option","qualname":"::invalid_option","value":"pub fn invalid_option<'de, D, T>(D) -> result::Result<Option<T>, D::Error>\nwhere D: Deserializer, Option<T>: Deserialize","parent":null,"children":[],"decl_id":null,"docs":" A custom Serde deserializer for possibly invalid `Option<T>` fields.","sig":null,"attributes":[{"value":"/ A custom Serde deserializer for possibly invalid `Option<T>` fields.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8174,"byte_end":8246,"line_start":297,"line_end":297,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8247,"byte_end":8250,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ When deserializing CSV data, it is sometimes desirable to simply ignore","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8251,"byte_end":8326,"line_start":299,"line_end":299,"column_start":1,"column_end":76}},{"value":"/ fields with invalid data. For example, there might be a field that is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8327,"byte_end":8400,"line_start":300,"line_end":300,"column_start":1,"column_end":74}},{"value":"/ usually a number, but will occasionally contain garbage data that causes","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8401,"byte_end":8477,"line_start":301,"line_end":301,"column_start":1,"column_end":77}},{"value":"/ number parsing to fail.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8478,"byte_end":8505,"line_start":302,"line_end":302,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8506,"byte_end":8509,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ You might be inclined to use, say, `Option<i32>` for fields such at this.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8510,"byte_end":8587,"line_start":304,"line_end":304,"column_start":1,"column_end":78}},{"value":"/ By default, however, `Option<i32>` will either capture *empty* fields with","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8588,"byte_end":8666,"line_start":305,"line_end":305,"column_start":1,"column_end":79}},{"value":"/ `None` or valid numeric fields with `Some(the_number)`. If the field is","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8667,"byte_end":8742,"line_start":306,"line_end":306,"column_start":1,"column_end":76}},{"value":"/ non-empty and not a valid number, then deserialization will return an error","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8743,"byte_end":8822,"line_start":307,"line_end":307,"column_start":1,"column_end":80}},{"value":"/ instead of using `None`.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8823,"byte_end":8851,"line_start":308,"line_end":308,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8852,"byte_end":8855,"line_start":309,"line_end":309,"column_start":1,"column_end":4}},{"value":"/ This function allows you to override this default behavior. Namely, if","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8856,"byte_end":8930,"line_start":310,"line_end":310,"column_start":1,"column_end":75}},{"value":"/ `Option<T>` is deserialized with non-empty but invalid data, then the value","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8931,"byte_end":9010,"line_start":311,"line_end":311,"column_start":1,"column_end":80}},{"value":"/ will be `None` and the error will be ignored.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9011,"byte_end":9060,"line_start":312,"line_end":312,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9061,"byte_end":9064,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9065,"byte_end":9078,"line_start":314,"line_end":314,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9079,"byte_end":9082,"line_start":315,"line_end":315,"column_start":1,"column_end":4}},{"value":"/ This example shows how to parse CSV records with numerical data, even if","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9083,"byte_end":9159,"line_start":316,"line_end":316,"column_start":1,"column_end":77}},{"value":"/ some numerical data is absent or invalid. Without the","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9160,"byte_end":9217,"line_start":317,"line_end":317,"column_start":1,"column_end":58}},{"value":"/ `serde(deserialize_with = \"...\")` annotations, this example would return","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9218,"byte_end":9294,"line_start":318,"line_end":318,"column_start":1,"column_end":77}},{"value":"/ an error.","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9295,"byte_end":9308,"line_start":319,"line_end":319,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9309,"byte_end":9312,"line_start":320,"line_end":320,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9313,"byte_end":9320,"line_start":321,"line_end":321,"column_start":1,"column_end":8}},{"value":"/ use std::error::Error;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9321,"byte_end":9347,"line_start":322,"line_end":322,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9348,"byte_end":9351,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ use csv::Reader;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9352,"byte_end":9372,"line_start":324,"line_end":324,"column_start":1,"column_end":21}},{"value":"/ use serde::Deserialize;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9373,"byte_end":9400,"line_start":325,"line_end":325,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9401,"byte_end":9404,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ #[derive(Debug, Deserialize, Eq, PartialEq)]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9405,"byte_end":9453,"line_start":327,"line_end":327,"column_start":1,"column_end":49}},{"value":"/ struct Row {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9454,"byte_end":9470,"line_start":328,"line_end":328,"column_start":1,"column_end":17}},{"value":"/     #[serde(deserialize_with = \"csv::invalid_option\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9471,"byte_end":9529,"line_start":329,"line_end":329,"column_start":1,"column_end":59}},{"value":"/     a: Option<i32>,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9530,"byte_end":9553,"line_start":330,"line_end":330,"column_start":1,"column_end":24}},{"value":"/     #[serde(deserialize_with = \"csv::invalid_option\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9554,"byte_end":9612,"line_start":331,"line_end":331,"column_start":1,"column_end":59}},{"value":"/     b: Option<i32>,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9613,"byte_end":9636,"line_start":332,"line_end":332,"column_start":1,"column_end":24}},{"value":"/     #[serde(deserialize_with = \"csv::invalid_option\")]","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9637,"byte_end":9695,"line_start":333,"line_end":333,"column_start":1,"column_end":59}},{"value":"/     c: Option<i32>,","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9696,"byte_end":9719,"line_start":334,"line_end":334,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9720,"byte_end":9725,"line_start":335,"line_end":335,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9726,"byte_end":9729,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ # fn main() { example().unwrap(); }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9730,"byte_end":9769,"line_start":337,"line_end":337,"column_start":1,"column_end":40}},{"value":"/ fn example() -> Result<(), Box<dyn Error>> {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9770,"byte_end":9818,"line_start":338,"line_end":338,"column_start":1,"column_end":49}},{"value":"/     let data = \"\\","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9819,"byte_end":9840,"line_start":339,"line_end":339,"column_start":1,"column_end":22}},{"value":"/ a,b,c","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9841,"byte_end":9850,"line_start":340,"line_end":340,"column_start":1,"column_end":10}},{"value":"/ 5,\\\"\\\",xyz","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9851,"byte_end":9865,"line_start":341,"line_end":341,"column_start":1,"column_end":15}},{"value":"/ \";","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9866,"byte_end":9872,"line_start":342,"line_end":342,"column_start":1,"column_end":7}},{"value":"/     let mut rdr = Reader::from_reader(data.as_bytes());","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9873,"byte_end":9932,"line_start":343,"line_end":343,"column_start":1,"column_end":60}},{"value":"/     if let Some(result) = rdr.deserialize().next() {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9933,"byte_end":9989,"line_start":344,"line_end":344,"column_start":1,"column_end":57}},{"value":"/         let record: Row = result?;","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":9990,"byte_end":10028,"line_start":345,"line_end":345,"column_start":1,"column_end":39}},{"value":"/         assert_eq!(record, Row { a: Some(5), b: None, c: None });","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10029,"byte_end":10098,"line_start":346,"line_end":346,"column_start":1,"column_end":70}},{"value":"/         Ok(())","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10099,"byte_end":10117,"line_start":347,"line_end":347,"column_start":1,"column_end":19}},{"value":"/     } else {","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10118,"byte_end":10134,"line_start":348,"line_end":348,"column_start":1,"column_end":17}},{"value":"/         Err(From::from(\"expected at least one record but got none\"))","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10135,"byte_end":10207,"line_start":349,"line_end":349,"column_start":1,"column_end":73}},{"value":"/     }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10208,"byte_end":10217,"line_start":350,"line_end":350,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10218,"byte_end":10223,"line_start":351,"line_end":351,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":10224,"byte_end":10231,"line_start":352,"line_end":352,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11894,"byte_end":11904,"line_start":36,"line_end":36,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":12139,"byte_end":12149,"line_start":45,"line_end":45,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":12416,"byte_end":12426,"line_start":57,"line_end":57,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":12664,"byte_end":12674,"line_start":69,"line_end":69,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13558,"byte_end":13568,"line_start":95,"line_end":95,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13658,"byte_end":13668,"line_start":102,"line_end":102,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27978,"byte_end":27986,"line_start":582,"line_end":582,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":29656,"byte_end":29662,"line_start":643,"line_end":643,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":29755,"byte_end":29761,"line_start":650,"line_end":650,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31459,"byte_end":31469,"line_start":713,"line_end":713,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31617,"byte_end":31627,"line_start":721,"line_end":721,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31775,"byte_end":31785,"line_start":728,"line_end":728,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31929,"byte_end":31939,"line_start":735,"line_end":735,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32081,"byte_end":32091,"line_start":742,"line_end":742,"column_start":42,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32309,"byte_end":32319,"line_start":751,"line_end":751,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":140}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":33489,"byte_end":33503,"line_start":794,"line_end":794,"column_start":32,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":33534,"byte_end":33548,"line_start":796,"line_end":796,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":34200,"byte_end":34214,"line_start":824,"line_end":824,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":157}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":54325,"byte_end":54337,"line_start":104,"line_end":104,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":55536,"byte_end":55550,"line_start":157,"line_end":157,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":57895,"byte_end":57907,"line_start":241,"line_end":241,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":268},{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70620,"byte_end":70636,"line_start":687,"line_end":687,"column_start":21,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":365}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70805,"byte_end":70821,"line_start":693,"line_end":693,"column_start":19,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70923,"byte_end":70939,"line_start":699,"line_end":699,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71196,"byte_end":71216,"line_start":709,"line_end":709,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71805,"byte_end":71821,"line_start":727,"line_end":727,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":72092,"byte_end":72112,"line_start":739,"line_end":739,"column_start":6,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86306,"byte_end":86311,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89251,"byte_end":89260,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89823,"byte_end":89828,"line_start":125,"line_end":125,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89943,"byte_end":89948,"line_start":131,"line_end":131,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":90067,"byte_end":90072,"line_start":137,"line_end":137,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":90541,"byte_end":90546,"line_start":151,"line_end":151,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93117,"byte_end":93130,"line_start":228,"line_end":228,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93596,"byte_end":93609,"line_start":245,"line_end":245,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93722,"byte_end":93735,"line_start":251,"line_end":251,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":423}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94506,"byte_end":94515,"line_start":277,"line_end":277,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94823,"byte_end":94832,"line_start":288,"line_end":288,"column_start":19,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94859,"byte_end":94868,"line_start":290,"line_end":290,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":430}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95473,"byte_end":95487,"line_start":312,"line_end":312,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96253,"byte_end":96267,"line_start":337,"line_end":337,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96393,"byte_end":96407,"line_start":343,"line_end":343,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96528,"byte_end":96542,"line_start":349,"line_end":349,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97705,"byte_end":97718,"line_start":34,"line_end":34,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97998,"byte_end":98011,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124129,"byte_end":124135,"line_start":789,"line_end":789,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124902,"byte_end":124908,"line_start":816,"line_end":816,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511},{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158783,"byte_end":158789,"line_start":1782,"line_end":1782,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162890,"byte_end":162901,"line_start":1888,"line_end":1888,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164095,"byte_end":164121,"line_start":1922,"line_end":1922,"column_start":40,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164980,"byte_end":165006,"line_start":1954,"line_end":1954,"column_start":9,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165812,"byte_end":165834,"line_start":1980,"line_end":1980,"column_start":44,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166568,"byte_end":166590,"line_start":2007,"line_end":2007,"column_start":9,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":569},{"krate":0,"index":570}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167043,"byte_end":167064,"line_start":2026,"line_end":2026,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167639,"byte_end":167660,"line_start":2047,"line_end":2047,"column_start":32,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":583},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168218,"byte_end":168235,"line_start":2068,"line_end":2068,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168689,"byte_end":168706,"line_start":2084,"line_end":2084,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169153,"byte_end":169172,"line_start":2102,"line_end":2102,"column_start":19,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169741,"byte_end":169760,"line_start":2123,"line_end":2123,"column_start":32,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":613},{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170317,"byte_end":170332,"line_start":2144,"line_end":2144,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170780,"byte_end":170795,"line_start":2160,"line_end":2160,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":629},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/serializer.rs","byte_start":195740,"byte_end":195745,"line_start":356,"line_end":356,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/serializer.rs","byte_start":199887,"byte_end":199895,"line_start":453,"line_end":453,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225467,"byte_end":225479,"line_start":38,"line_end":38,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225616,"byte_end":225628,"line_start":44,"line_end":44,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225901,"byte_end":225913,"line_start":56,"line_end":56,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":948}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226157,"byte_end":226169,"line_start":68,"line_end":68,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226360,"byte_end":226372,"line_start":75,"line_end":75,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226466,"byte_end":226478,"line_start":82,"line_end":82,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244336,"byte_end":244348,"line_start":648,"line_end":648,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244503,"byte_end":244515,"line_start":656,"line_end":656,"column_start":38,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244673,"byte_end":244685,"line_start":663,"line_end":663,"column_start":43,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244830,"byte_end":244842,"line_start":670,"line_end":670,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245063,"byte_end":245075,"line_start":679,"line_end":679,"column_start":35,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245722,"byte_end":245738,"line_start":705,"line_end":705,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1010},{"krate":0,"index":1011}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":246261,"byte_end":246277,"line_start":728,"line_end":728,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336224,"byte_end":336237,"line_start":30,"line_end":30,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336472,"byte_end":336485,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1043},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354191,"byte_end":354197,"line_start":561,"line_end":561,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1059}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354342,"byte_end":354348,"line_start":569,"line_end":569,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1061}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355212,"byte_end":355218,"line_start":596,"line_end":596,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1069},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":374948,"byte_end":374954,"line_start":1155,"line_end":1155,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5611,"byte_end":5621,"line_start":207,"line_end":207,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1090}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6029,"byte_end":6039,"line_start":219,"line_end":219,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1092}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6797,"byte_end":6807,"line_start":244,"line_end":244,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7131,"byte_end":7141,"line_start":255,"line_end":255,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1096}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7880,"byte_end":7884,"line_start":281,"line_end":281,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1098},{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8112,"byte_end":8116,"line_start":291,"line_end":291,"column_start":18,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1101}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4348,"byte_end":4356,"line_start":170,"line_end":170,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":159}},{"kind":"Mod","span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":4442,"byte_end":4450,"line_start":176,"line_end":176,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1016}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":11894,"byte_end":11904,"line_start":36,"line_end":36,"column_start":20,"column_end":30},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":12139,"byte_end":12149,"line_start":45,"line_end":45,"column_start":44,"column_end":54},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":12416,"byte_end":12426,"line_start":57,"line_end":57,"column_start":41,"column_end":51},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":12664,"byte_end":12674,"line_start":69,"line_end":69,"column_start":21,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13558,"byte_end":13568,"line_start":95,"line_end":95,"column_start":18,"column_end":28},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":13658,"byte_end":13668,"line_start":102,"line_end":102,"column_start":6,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1107},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":27978,"byte_end":27986,"line_start":582,"line_end":582,"column_start":6,"column_end":14},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1130},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":29656,"byte_end":29662,"line_start":643,"line_end":643,"column_start":18,"column_end":24},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1145},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":29755,"byte_end":29761,"line_start":650,"line_end":650,"column_start":6,"column_end":12},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31459,"byte_end":31469,"line_start":713,"line_end":713,"column_start":28,"column_end":38},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31617,"byte_end":31627,"line_start":721,"line_end":721,"column_start":29,"column_end":39},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31775,"byte_end":31785,"line_start":728,"line_end":728,"column_start":39,"column_end":49},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":31929,"byte_end":31939,"line_start":735,"line_end":735,"column_start":44,"column_end":54},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32081,"byte_end":32091,"line_start":742,"line_end":742,"column_start":42,"column_end":52},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":32309,"byte_end":32319,"line_start":751,"line_end":751,"column_start":36,"column_end":46},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1107},"to":{"krate":2,"index":4958}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":33489,"byte_end":33503,"line_start":794,"line_end":794,"column_start":32,"column_end":46},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":4994}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":33534,"byte_end":33548,"line_start":796,"line_end":796,"column_start":23,"column_end":37},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/byte_record.rs","byte_start":34200,"byte_end":34214,"line_start":824,"line_end":824,"column_start":34,"column_end":48},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1159},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":54325,"byte_end":54337,"line_start":104,"line_end":104,"column_start":44,"column_end":56},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":212},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":55536,"byte_end":55550,"line_start":157,"line_end":157,"column_start":27,"column_end":41},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":229},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":57895,"byte_end":57907,"line_start":241,"line_end":241,"column_start":27,"column_end":39},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":250},"to":{"krate":0,"index":200}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70620,"byte_end":70636,"line_start":687,"line_end":687,"column_start":21,"column_end":37},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1199},"to":{"krate":18,"index":8087}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70805,"byte_end":70821,"line_start":693,"line_end":693,"column_start":19,"column_end":35},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1199},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":70923,"byte_end":70939,"line_start":699,"line_end":699,"column_start":23,"column_end":39},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1199},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71196,"byte_end":71216,"line_start":709,"line_end":709,"column_start":23,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1213},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":71805,"byte_end":71821,"line_start":727,"line_end":727,"column_start":6,"column_end":22},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1199},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/deserializer.rs","byte_start":72092,"byte_end":72112,"line_start":739,"line_end":739,"column_start":6,"column_end":26},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":86306,"byte_end":86311,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1251},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89251,"byte_end":89260,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89823,"byte_end":89828,"line_start":125,"line_end":125,"column_start":26,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":89943,"byte_end":89948,"line_start":131,"line_end":131,"column_start":26,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":2591},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":90067,"byte_end":90072,"line_start":137,"line_end":137,"column_start":19,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1251},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":90541,"byte_end":90546,"line_start":151,"line_end":151,"column_start":23,"column_end":28},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1251},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93117,"byte_end":93130,"line_start":228,"line_end":228,"column_start":6,"column_end":19},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93596,"byte_end":93609,"line_start":245,"line_end":245,"column_start":23,"column_end":36},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1279},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":93722,"byte_end":93735,"line_start":251,"line_end":251,"column_start":19,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1279},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94506,"byte_end":94515,"line_start":277,"line_end":277,"column_start":6,"column_end":15},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1293},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94823,"byte_end":94832,"line_start":288,"line_end":288,"column_start":19,"column_end":28},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1293},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":94859,"byte_end":94868,"line_start":290,"line_end":290,"column_start":23,"column_end":32},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1293},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":95473,"byte_end":95487,"line_start":312,"line_end":312,"column_start":9,"column_end":23},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":431},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96253,"byte_end":96267,"line_start":337,"line_end":337,"column_start":37,"column_end":51},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":431},"to":{"krate":1,"index":1690}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96393,"byte_end":96407,"line_start":343,"line_end":343,"column_start":26,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":6320}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/error.rs","byte_start":96528,"byte_end":96542,"line_start":349,"line_end":349,"column_start":24,"column_end":38},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":431},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97705,"byte_end":97718,"line_start":34,"line_end":34,"column_start":18,"column_end":31},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1307},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":97998,"byte_end":98011,"line_start":46,"line_end":46,"column_start":6,"column_end":19},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1307},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124129,"byte_end":124135,"line_start":789,"line_end":789,"column_start":6,"column_end":12},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":124902,"byte_end":124908,"line_start":816,"line_end":816,"column_start":19,"column_end":25},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":158783,"byte_end":158789,"line_start":1782,"line_end":1782,"column_start":30,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":162890,"byte_end":162901,"line_start":1888,"line_end":1888,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1323},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164095,"byte_end":164121,"line_start":1922,"line_end":1922,"column_start":40,"column_end":66},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":164980,"byte_end":165006,"line_start":1954,"line_end":1954,"column_start":9,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":531},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":165812,"byte_end":165834,"line_start":1980,"line_end":1980,"column_start":44,"column_end":66},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":550},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":166568,"byte_end":166590,"line_start":2007,"line_end":2007,"column_start":9,"column_end":31},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":550},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167043,"byte_end":167064,"line_start":2026,"line_end":2026,"column_start":19,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":571},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":167639,"byte_end":167660,"line_start":2047,"line_end":2047,"column_start":32,"column_end":53},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":571},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168218,"byte_end":168235,"line_start":2068,"line_end":2068,"column_start":23,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":585},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":168689,"byte_end":168706,"line_start":2084,"line_end":2084,"column_start":36,"column_end":53},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":585},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169153,"byte_end":169172,"line_start":2102,"line_end":2102,"column_start":19,"column_end":38},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":169741,"byte_end":169760,"line_start":2123,"line_end":2123,"column_start":32,"column_end":51},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":601},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170317,"byte_end":170332,"line_start":2144,"line_end":2144,"column_start":23,"column_end":38},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":615},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/reader.rs","byte_start":170780,"byte_end":170795,"line_start":2160,"line_end":2160,"column_start":36,"column_end":51},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":615},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/serializer.rs","byte_start":195740,"byte_end":195745,"line_start":356,"line_end":356,"column_start":21,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1251},"to":{"krate":18,"index":8701}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/serializer.rs","byte_start":199887,"byte_end":199895,"line_start":453,"line_end":453,"column_start":24,"column_end":32},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225467,"byte_end":225479,"line_start":38,"line_end":38,"column_start":20,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225616,"byte_end":225628,"line_start":44,"line_end":44,"column_start":44,"column_end":56},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":225901,"byte_end":225913,"line_start":56,"line_end":56,"column_start":41,"column_end":53},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":1697}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226157,"byte_end":226169,"line_start":68,"line_end":68,"column_start":21,"column_end":33},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":6315}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226360,"byte_end":226372,"line_start":75,"line_end":75,"column_start":18,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":226466,"byte_end":226478,"line_start":82,"line_end":82,"column_start":6,"column_end":18},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1362},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244336,"byte_end":244348,"line_start":648,"line_end":648,"column_start":28,"column_end":40},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":2223}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244503,"byte_end":244515,"line_start":656,"line_end":656,"column_start":38,"column_end":50},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244673,"byte_end":244685,"line_start":663,"line_end":663,"column_start":43,"column_end":55},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":1889}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":244830,"byte_end":244842,"line_start":670,"line_end":670,"column_start":41,"column_end":53},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":4945}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245063,"byte_end":245075,"line_start":679,"line_end":679,"column_start":35,"column_end":47},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1362},"to":{"krate":2,"index":4958}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":245722,"byte_end":245738,"line_start":705,"line_end":705,"column_start":23,"column_end":39},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1370},"to":{"krate":2,"index":5040}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/string_record.rs","byte_start":246261,"byte_end":246277,"line_start":728,"line_end":728,"column_start":34,"column_end":50},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1370},"to":{"krate":2,"index":4971}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336224,"byte_end":336237,"line_start":30,"line_end":30,"column_start":18,"column_end":31},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1377},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":336472,"byte_end":336485,"line_start":41,"line_end":41,"column_start":6,"column_end":19},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1377},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354191,"byte_end":354197,"line_start":561,"line_end":561,"column_start":29,"column_end":35},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1384},"to":{"krate":2,"index":2166}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":354342,"byte_end":354348,"line_start":569,"line_end":569,"column_start":6,"column_end":12},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":355212,"byte_end":355218,"line_start":596,"line_end":596,"column_start":20,"column_end":26},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1384},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/writer.rs","byte_start":374948,"byte_end":374954,"line_start":1155,"line_end":1155,"column_start":6,"column_end":12},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1412},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":5611,"byte_end":5621,"line_start":207,"line_end":207,"column_start":6,"column_end":16},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1417},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6029,"byte_end":6039,"line_start":219,"line_end":219,"column_start":18,"column_end":28},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1417},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":6797,"byte_end":6807,"line_start":244,"line_end":244,"column_start":6,"column_end":16},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7131,"byte_end":7141,"line_start":255,"line_end":255,"column_start":18,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1433},"to":{"krate":2,"index":1959}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":7880,"byte_end":7884,"line_start":281,"line_end":281,"column_start":6,"column_end":10},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/adrian/.cargo/registry/src/github.com-1ecc6299db9ec823/csv-1.1.5/src/lib.rs","byte_start":8112,"byte_end":8116,"line_start":291,"line_end":291,"column_start":18,"column_end":22},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1446},"to":{"krate":2,"index":1959}}]}